<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>稍后阅读</title>
    <url>/2021/08/13/%E7%A8%8D%E5%90%8E%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><h4 id="sql更新语句中update-set-from用法"><a href="#sql更新语句中update-set-from用法" class="headerlink" title="sql更新语句中update set from用法"></a>sql更新语句中update set from用法</h4><p><a href="https://blog.csdn.net/zeternityyt/article/details/80041794">https://blog.csdn.net/zeternityyt/article/details/80041794</a></p>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>技术教程合集</title>
    <url>/2021/06/13/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="个人学习路线"><a href="#个人学习路线" class="headerlink" title="个人学习路线"></a>个人学习路线</h3><ul>
<li>Java开发学习路线 <a href="https://www.processon.com/view/link/6110b64bf346fb2a2e9ab318#map">脑图</a> <a href="https://www.processon.com/view/link/6110b64bf346fb2a2e9ab318#outline">大纲</a> <a href="https://processon.com/mindmap/60f15647e0b34d0e1b69460f">编辑</a></li>
</ul>
<span id="more"></span>

<h3 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h3><p><a href="https://processon.com/mindmap/60f15647e0b34d0e1b69460f">Java学习路线（henry）</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247504053&idx=1&sn=c30690a1c814a5ac53fd42fe08e418b7&scene=21#wechat_redirect">2021 最新的Java 后端学习路线</a></p>
<p><a href="https://mp.weixin.qq.com/s/fHUeyzY9J_R6fEBab0SJ6w">Java学习路线（哔哩哔哩视频）</a></p>
<p><a href="https://www.bilibili.com/video/BV1GQ4y1N7HD">Java后端开发详细学习路线视频教程</a>（<a href="https://www.processon.com/view/link/5eb6a1b0e401fd16f4283225">思维脑图</a>）</p>
<p><a href="https://zhuanlan.zhihu.com/p/395162772">2021最新Java学习路线！助力大厂offer</a></p>
<h3 id="IT学习（包含多个技术路线）"><a href="#IT学习（包含多个技术路线）" class="headerlink" title="IT学习（包含多个技术路线）"></a>IT学习（包含多个技术路线）</h3><p>包含最全的Java、Web前端、大数据等学习路线。</p>
<p><a href="https://www.bilibili.com/read/readlist/rl100260">https://www.bilibili.com/read/readlist/rl100260</a></p>
<img src="/2021/06/13/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B%E5%90%88%E9%9B%86/360%E6%88%AA%E5%9B%BE20210716130607404.jpg" class title="路线">

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>JavaFX 教程 （中文）</td>
<td><a href="https://code.makery.ch/zh-cn/library/javafx-tutorial/">https://code.makery.ch/zh-cn/library/javafx-tutorial/</a></td>
<td>资料网盘路径:/我的资源/JavaFX，资料包含软件安装包、项目代码</td>
</tr>
<tr>
<td>JavaFX 8 Dialogs</td>
<td><a href="https://code.makery.ch/blog/javafx-8-dialogs/">https://code.makery.ch/blog/javafx-8-dialogs/</a></td>
<td></td>
</tr>
<tr>
<td>Java相关技术文档（英文）</td>
<td><a href="https://www.concretepage.com/">https://www.concretepage.com/</a></td>
<td></td>
</tr>
</tbody></table>
<h2 id="计算机技术"><a href="#计算机技术" class="headerlink" title="计算机技术"></a>计算机技术</h2><table>
<thead>
<tr>
<th>名称</th>
<th>地址</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>Github 上的各种硬核技术学习路线</td>
<td><a href="https://mp.weixin.qq.com/s/q2nKADfIL3jfX3MLGWfXtA">https://mp.weixin.qq.com/s/q2nKADfIL3jfX3MLGWfXtA</a></td>
<td>涵盖 Java、Go、Rust、Android、iOS、Web……</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>人事管理系统</title>
    <url>/2021/10/27/%E4%BA%BA%E4%BA%8B%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>人事管理系统是办公信息自动化建设中最常见的项目，几乎每个OA系统中都需要人事管理系统。</p>
<p>该项目包含了用户管理、部门管理、职位管理、员工管理、公告管理、下载中心等多个模块，页面使用jQuery框架完成动态功能，用户管理、部门管理等模块包含了实际项目开发中常用的增删改查动作，下载中心包含了Spring MVC的文件上传、下载等功能。</p>
<h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><ul>
<li>严格的Java EE应用结构</li>
<li>分层清晰，代码逻辑简单易懂，但又不失完整性</li>
<li>完整的打包、安装脚本</li>
<li>阿里云部署</li>
</ul>
<h2 id="演示地址"><a href="#演示地址" class="headerlink" title="演示地址"></a>演示地址</h2><p><a href="http://39.103.139.86:8887/hrm/">http://39.103.139.86:8887/hrm/</a> admin/123456（登录页面默认密码可能有误）</p>
<p>注：仅供正确浏览学习所用，网站本身没有做过多安全防攻击保护，如有不良行为，永久拉黑</p>
<h2 id="资源获取"><a href="#资源获取" class="headerlink" title="资源获取"></a>资源获取</h2><p>链接：<a href="https://pan.baidu.com/s/1-nJ8AgdTFcoGsBNQFE-92A">https://pan.baidu.com/s/1-nJ8AgdTFcoGsBNQFE-92A</a><br>提取码：gl7z </p>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><p>email：<a href="mailto:&#x31;&#48;&#48;&#57;&#48;&#x31;&#x35;&#51;&#x33;&#x37;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#109;">&#x31;&#48;&#48;&#57;&#48;&#x31;&#x35;&#51;&#x33;&#x37;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#109;</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>项目</category>
      </categories>
  </entry>
  <entry>
    <title>svn集锦</title>
    <url>/2021/07/31/svn%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><p>svn revert –recursive *</p>
<p><a href="https://blog.csdn.net/huangbaokang/article/details/89465425">https://blog.csdn.net/huangbaokang/article/details/89465425</a></p>
]]></content>
      <categories>
        <category>svn</category>
      </categories>
  </entry>
  <entry>
    <title>nginx集锦</title>
    <url>/2021/07/26/nginx%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><p><a href="https://zhuanlan.zhihu.com/p/138982930">https://zhuanlan.zhihu.com/p/138982930</a></p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="Nginx简单配置转发"><a href="#Nginx简单配置转发" class="headerlink" title="Nginx简单配置转发"></a><a href="https://blog.csdn.net/qq_21856521/article/details/81945458">Nginx简单配置转发</a></h3><p>场景概述：</p>
<p>一台服务器运行多个项目的时候会遇到这样的问题：如果使用同一个tomcat来启动不同项目的话，项目之间会相互影响；如果用多个tomcat运行项目，那么在访问项目的时候又不能都使用80端口，还要加上端口号，显得很麻烦又不美观。<br>考虑用Nginx实现转发，目标是通过访问不同的域名实现对不同tomcat上运行的项目的跳转，例如访问<a href="http://www.a.com/">www.a.com</a> 跳转到本地的8088端口的项目，访问<a href="http://www.b.com跳转到本地的8080端口的项目./">www.b.com跳转到本地的8080端口的项目。</a></p>
<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">/nginx 启动</span><br><span class="line">./nginx -s stop 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程</span><br><span class="line">./nginx -s quit 此方式停止步骤是待nginx进程处理任务完毕进行停止</span><br><span class="line">./nginx -s reload 重新加载配置文件，当 nginx的配置文件nginx.conf修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效。</span><br><span class="line">ps aux|grep nginx 查询nginx进程</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nginx</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络集锦</title>
    <url>/2021/07/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="HTTP-amp-HTTPS"><a href="#HTTP-amp-HTTPS" class="headerlink" title="HTTP&amp;HTTPS"></a>HTTP&amp;HTTPS</h2><p><a href="https://blog.csdn.net/freekiteyu/article/details/76423436">一篇文章看明白 HTTP，HTTPS，SSL/TLS 之间的关系</a></p>
<p><a href="https://blog.csdn.net/hcrw01/article/details/107878072">Https原理及流程</a></p>
<p><a href="https://www.cnblogs.com/andy9468/p/10110465.html">查看win信任的证书办法机构（CA机构的公钥）</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2021/07/16/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="在面试时被问到，为什么MySQL数据库数据量大了要进行分库分表？"><a href="#在面试时被问到，为什么MySQL数据库数据量大了要进行分库分表？" class="headerlink" title="在面试时被问到，为什么MySQL数据库数据量大了要进行分库分表？"></a>在面试时被问到，为什么MySQL数据库数据量大了要进行分库分表？</h2><p><a href="https://www.zhihu.com/answer/1949098113">https://www.zhihu.com/answer/1949098113</a></p>
<p><a href="https://www.zhihu.com/answer/1904557377">https://www.zhihu.com/answer/1904557377</a></p>
]]></content>
      <categories>
        <category>面试</category>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>我订阅了哪些技术团队的博客？</title>
    <url>/2021/07/07/%E6%88%91%E8%AE%A2%E9%98%85%E4%BA%86%E5%93%AA%E4%BA%9B%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%9F/</url>
    <content><![CDATA[<p>这篇文章，推荐了一些不错的团队技术博客、公众号。</p>
<span id="more"></span>

<p>文章整理自Guide哥，原文链接：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505023&amp;idx=1&amp;sn=3be6f2d3649030e9a048c9a758dfef16&amp;chksm=cea19bb4f9d612a22edb75e5fc9627c842267d1d14ce3f2b9b583fd8b7169888f62654c2c7fa&amp;scene=178&amp;cur_album_id=1325613376722059264#rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247505023&amp;idx=1&amp;sn=3be6f2d3649030e9a048c9a758dfef16&amp;chksm=cea19bb4f9d612a22edb75e5fc9627c842267d1d14ce3f2b9b583fd8b7169888f62654c2c7fa&amp;scene=178&amp;cur_album_id=1325613376722059264#rd</a></p>
<h2 id="美团技术团队"><a href="#美团技术团队" class="headerlink" title="美团技术团队"></a><a href="https://tech.meituan.com/">美团技术团队</a></h2><p>美团技术团队上面的文章质量都非常高，涵盖 Java 后端、分布式、人工智能、个人成长等多个领域，并且还出过好几个爆款技术文。</p>
<h2 id="有赞技术团队"><a href="#有赞技术团队" class="headerlink" title="有赞技术团队"></a>有赞技术团队</h2><p>有赞技术团队 （公号同名|有赞 coder）是有赞旗下的一个技术博客类型的网站，同样做的非常好，主要分享前端、中间件、后端、架构、大数据等技术领域的内容。</p>
<h2 id="京东科技技术说"><a href="#京东科技技术说" class="headerlink" title="京东科技技术说"></a>京东科技技术说</h2><p>京东科技技术说（公号同名）是京东科技官方技术公众号，主要分享后端相关的文章，内容涵盖架构设计、系统设计、开源项目等技术领域。</p>
<h2 id="阿里技术"><a href="#阿里技术" class="headerlink" title="阿里技术"></a>阿里技术</h2><p>阿里技术（公号同名）是阿里旗下的一个技术分享账号，更新频率非常高，并且，文章质量有很高！</p>
<h2 id="阿里巴巴中间件"><a href="#阿里巴巴中间件" class="headerlink" title="阿里巴巴中间件"></a>阿里巴巴中间件</h2><h2 id="eBay-技术荟"><a href="#eBay-技术荟" class="headerlink" title="eBay 技术荟"></a>eBay 技术荟</h2><p>eBay 技术荟（公号同名）是 eBay 旗下的一个技术分享账号，主要分享后端、运维、大数据等技术领域的文章。更新频率一般，不过，内容质量非常高！</p>
<h2 id="ThoughtWorks-洞见"><a href="#ThoughtWorks-洞见" class="headerlink" title="ThoughtWorks 洞见"></a><a href="https://insights.thoughtworks.cn/">ThoughtWorks 洞见</a></h2><p>ThoughtWorks 洞见是 ThoughtWorks 旗下的一个技术博客类型的网站。ThoughtWorks 洞见上面的文章质量都非常高，涵盖中台、后台开发实践、领域驱动设计、个人成长等多个领域。</p>
<h2 id="爱奇艺技术产品团队"><a href="#爱奇艺技术产品团队" class="headerlink" title="爱奇艺技术产品团队"></a>爱奇艺技术产品团队</h2><p>爱奇艺技术产品团队（公号同名）是爱奇艺旗下的一个技术分享账号，主要分享后端相关的文章。</p>
<h2 id="小米信息部技术团队"><a href="#小米信息部技术团队" class="headerlink" title="小米信息部技术团队"></a><a href="https://xiaomi-info.github.io/">小米信息部技术团队</a></h2><h2 id="360-核心安全技术博客"><a href="#360-核心安全技术博客" class="headerlink" title="360 核心安全技术博客"></a><a href="https://blogs.360.cn/">360 核心安全技术博客</a></h2><h2 id="伴鱼技术团队"><a href="#伴鱼技术团队" class="headerlink" title="伴鱼技术团队"></a><a href="https://tech.ipalfish.com/blog/">伴鱼技术团队</a></h2><p>伴鱼技术团队主要分享服务治理、全链路追踪与压测、分布式架构设计等领域的知识。</p>
<h2 id="IBM-Developer"><a href="#IBM-Developer" class="headerlink" title="IBM Developer"></a>IBM Developer</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="字节跳动技术团队"><a href="#字节跳动技术团队" class="headerlink" title="字节跳动技术团队"></a><a href="https://juejin.cn/user/1838039172387262/posts?sort=popular">字节跳动技术团队</a></h3><p>主要分享前端、APP 端、后端相关的一些文章。</p>
<h3 id="滴滴技术"><a href="#滴滴技术" class="headerlink" title="滴滴技术"></a>滴滴技术</h3><p>主要分享后端相关的一些文章。</p>
<h3 id="vivo-互联网技术"><a href="#vivo-互联网技术" class="headerlink" title="vivo 互联网技术"></a>vivo 互联网技术</h3><p>主要分享后端相关的文章，涵盖微服务、架构、性能优化、大数据等领域。</p>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>常用的20+个学习编程的网站！</title>
    <url>/2021/07/07/%E5%B8%B8%E7%94%A8%E7%9A%8420-%E4%B8%AA%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E7%9A%84%E7%BD%91%E7%AB%99%EF%BC%81/</url>
    <content><![CDATA[<p>常用的20+个学习编程的网站整理！</p>
<span id="more"></span>

<p>整理自Guide哥，原文链接：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247507238&amp;idx=1&amp;sn=1cf7fde9f606b9fd48e3921fa020324e&amp;chksm=cea192edf9d61bfba02d4eab74f11d5399fbcaf714a5749b2a770c3839c2b70afb388d72c54e&amp;scene=178&amp;cur_album_id=1325613376722059264#rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247507238&amp;idx=1&amp;sn=1cf7fde9f606b9fd48e3921fa020324e&amp;chksm=cea192edf9d61bfba02d4eab74f11d5399fbcaf714a5749b2a770c3839c2b70afb388d72c54e&amp;scene=178&amp;cur_album_id=1325613376722059264#rd</a></p>
<h2 id="程序员必备"><a href="#程序员必备" class="headerlink" title="程序员必备"></a>程序员必备</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><h3 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h3><h3 id="Stackoverflow"><a href="#Stackoverflow" class="headerlink" title="Stackoverflow"></a><a href="https://stackoverflow.com/">Stackoverflow</a></h3><h2 id="文字教程"><a href="#文字教程" class="headerlink" title="文字教程"></a>文字教程</h2><h3 id="Baeldung"><a href="#Baeldung" class="headerlink" title="Baeldung"></a><a href="https://www.baeldung.com/">Baeldung</a></h3><p>Baeldung 是国外的一个非常不错的技术网站，上面主要是一些 Java 后端的教程。</p>
<h3 id="API-Documentation"><a href="#API-Documentation" class="headerlink" title="API Documentation"></a><a href="http://devdocs.io/">API Documentation</a></h3><h3 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h3><h3 id="w3cschool"><a href="#w3cschool" class="headerlink" title="w3cschool"></a>w3cschool</h3><h2 id="视频教程-amp-专栏"><a href="#视频教程-amp-专栏" class="headerlink" title="视频教程&amp;专栏"></a>视频教程&amp;专栏</h2><h3 id="慕课网"><a href="#慕课网" class="headerlink" title="慕课网"></a>慕课网</h3><h3 id="极客时间"><a href="#极客时间" class="headerlink" title="极客时间"></a>极客时间</h3><h3 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h3><h2 id="编程刷题"><a href="#编程刷题" class="headerlink" title="编程刷题"></a>编程刷题</h2><h3 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a><a href="https://leetcode-cn.com/">Leetcode</a></h3><h3 id="牛客网"><a href="#牛客网" class="headerlink" title="牛客网"></a><a href="https://www.nowcoder.com/">牛客网</a></h3><h2 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h2><p>国内的技术交流社区大家都比较熟悉了，比较常见的有 <a href="https://juejin.cn/">掘金</a>、<a href="https://segmentfault.com/">思否</a>、<a href="https://www.cnblogs.com/">博客园</a>、<a href="https://www.imooc.com/article">慕课网手记</a>、<a href="https://cloud.tencent.com/developer">腾讯云社区</a>、<a href="https://yq.aliyun.com/?spm=a2c4e.11157919.headermainnav.1.4408f204iW6Tmu">阿里云社区</a>、<a href="https://toutiao.io/">开发者头条</a>、<a href="https://www.zhihu.com/">知乎</a> （综合性的问答交流社区。不过，上面有聚集了很多技术大佬，也有很多编程相关的话题），下面介绍国外的技术社区。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a><a href="https://medium.com/">Medium</a></h3><p>Medium是国外的一个非常不错的技术交流社区，上面有很多高质量有深度的技术文章，有点类似于国内的掘金。</p>
<h3 id="Dzone"><a href="#Dzone" class="headerlink" title="Dzone"></a><a href="https://dzone.com/">Dzone</a></h3><p>Dzone也是国外的一个很不错的技术交流社区。上面有大数据、AI、 Java、微服务、性能调优、安全等方面的内容。</p>
<h3 id="Reddit"><a href="#Reddit" class="headerlink" title="Reddit"></a><a href="https://www.reddit.com/r/java/">Reddit</a></h3><p>Reddit 是国外比较火的一个兴趣爱好以及热点事件交流社区。上面有很多社区，比如编程社区、理财社区。</p>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>我是怎么学习编程的？</title>
    <url>/2021/07/07/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E7%BC%96%E7%A8%8B%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p>这边文章关于如何学习编程，包括学习途径和自学过程中的注意事项。</p>
<span id="more"></span>

<p>文章整理参考Guide哥，原文链接：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247504336&amp;idx=1&amp;sn=388c1276d5efac2adfa259d571fe4f09&amp;chksm=cea19e1bf9d6170d0ae5710a4b86dda9ebc8cd0dac8ce27253a92f1b89b14e31ffe95a4e4b7b&amp;scene=178&amp;cur_album_id=1325613376722059264#rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247504336&amp;idx=1&amp;sn=388c1276d5efac2adfa259d571fe4f09&amp;chksm=cea19e1bf9d6170d0ae5710a4b86dda9ebc8cd0dac8ce27253a92f1b89b14e31ffe95a4e4b7b&amp;scene=178&amp;cur_album_id=1325613376722059264#rd</a></p>
<h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><p>首先要有一份技术学习路线图，然后就可以对各个技术点进行学习了。</p>
<h2 id="学习途径"><a href="#学习途径" class="headerlink" title="学习途径"></a>学习途径</h2><ul>
<li>视频</li>
<li>博客</li>
<li>官网（官方文档）</li>
<li>书籍</li>
</ul>
<h2 id="自学过程中注意事项"><a href="#自学过程中注意事项" class="headerlink" title="自学过程中注意事项"></a>自学过程中注意事项</h2><ul>
<li>英语阅读能力</li>
<li>多练！多记！多实战！</li>
<li>不要把学习编程还当做学生时代的应试考试来看</li>
<li>多看优秀的代码（源码，难度由简单至复杂）</li>
<li>不要死记硬背</li>
</ul>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis集锦</title>
    <url>/2021/07/06/mybatis%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="Mybatis加载-Mapper配置的四种方式"><a href="#Mybatis加载-Mapper配置的四种方式" class="headerlink" title="Mybatis加载 Mapper配置的四种方式"></a>Mybatis加载 Mapper配置的四种方式</h3><p><a href="https://blog.csdn.net/bestcxx/article/details/72966768">https://blog.csdn.net/bestcxx/article/details/72966768</a></p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>kafka集锦</title>
    <url>/2021/07/05/kafka%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="kafka中的key有啥作用？"><a href="#kafka中的key有啥作用？" class="headerlink" title="kafka中的key有啥作用？"></a>kafka中的key有啥作用？</h3><p>kafka源码ProducerRecord.java类的注释说明了key的作用，注释如下：</p>
<p>A key/value pair to be sent to Kafka. This consists of a topic name to which the record is being sent, an optional partition number, and an optional key and value.<br>一个k/v对被发送到kafka。这包含被发送记录的主题名字，一个可选的分区编号，一个可选的key和value。</p>
<p>If a valid partition number is specified that partition will be used when sending the record. If no partition is specified but a key is present a partition will be chosen using a hash of the key. If neither key nor partition is present a partition will be assigned in a round-robin fashion.<br>如果一个有效的partition属性数值被指定，那么在发送记录时partition属性数值就会被应用。如果没有partition属性数值被指定，而一个key属性被声明的话，一个partition会通过key的hash而被选中。如果既没有key也没有partition属性数值被声明，那么一个partition将会被分配以轮询的方式。</p>
<p>The record also has an associated timestamp. If the user did not provide a timestamp, the producer will stamp the record with its current time. The timestamp eventually used by Kafka depends on the timestamp type configured for the topic.<br>record也有一个关联的时间戳。如果用户未提供一个时间戳，producer 将会通过当前的时间标记此record。时间戳最终会被kafka应用，其依赖时间戳类型来配置主题。</p>
<p>If the topic is configured to use {@link org.apache.kafka.common.record.TimestampType#CREATE_TIME CreateTime},the timestamp in the producer record will be used by the broker。<br>如果主题是配置用的CREATE_TIME ，在producer记录中的时间戳将会被broker应用。</p>
<p>If the topic is configured to use {@link org.apache.kafka.common.record.TimestampType#LOG_APPEND_TIME LogAppendTime}, the timestamp in the producer record will be overwritten by the broker with the broker local time when it appends the message to its log.<br>如果主题被配置用的LogAppendTime，当broker添加消息到它的日志中的时候，producer记录中的时间戳将会被broker覆盖掉，覆盖成以broker本地的时间。</p>
<p>In either of the cases above, the timestamp that has actually been used will be returned to user in {@link RecordMetadata}<br>对于以上两者之一，确实已被应用的时间戳将会在RecordMetadata中返回给用户。</p>
<p>作者：牙齿不帅<br>链接：<a href="https://www.jianshu.com/p/769814211a81">https://www.jianshu.com/p/769814211a81</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2021/07/05/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="为什么主数组长度要为2的n次幂？"><a href="#为什么主数组长度要为2的n次幂？" class="headerlink" title="为什么主数组长度要为2的n次幂？"></a>为什么主数组长度要为2的n次幂？</h3><p>两个原因：</p>
<h4 id="第一个因为哈希函数的问题"><a href="#第一个因为哈希函数的问题" class="headerlink" title="第一个因为哈希函数的问题"></a>第一个因为哈希函数的问题</h4><p>通过<strong>除留余数法</strong>方式获取桶号，因为<strong>Hash表的大小始终为2的n次幂</strong>，因此可以将<strong>取模转为位运算操作</strong>，提高效率，容量n为2的幂次方，n-1的二进制会全为1，位运算时可以充分散列，避免不必要的哈希冲突，这也就是为什么要按照2倍方式扩容的一个原因。</p>
<h4 id="第二个因为是否位移的问题"><a href="#第二个因为是否位移的问题" class="headerlink" title="第二个因为是否位移的问题"></a>第二个因为是否位移的问题</h4><p>是否移位，<strong>由扩容后表示的最高位是否1为所决定</strong>，并且移动的方向只有一个，<strong>即向高位移动</strong>。因此，可以根据对最高位进行检测的结果来决定是否移位，从而可以优化性能，<strong>不用每一个元素都进行移位</strong>，<strong>因为为0说明刚好在移位完之后的位置，为1说明不是需要移动oldCop</strong>，这也是其为什么要按照2倍方式扩容的第二个原因。</p>
<p><a href="https://blog.csdn.net/lzh_99999/article/details/105843313">https://blog.csdn.net/lzh_99999/article/details/105843313</a></p>
<h3 id="底层如何确保主数组长度为2的n次幂？"><a href="#底层如何确保主数组长度为2的n次幂？" class="headerlink" title="底层如何确保主数组长度为2的n次幂？"></a>底层如何确保主数组长度为2的n次幂？</h3><p>使用tableSizeFor()方法。</p>
<p><a href="https://www.cnblogs.com/shujiying/p/12460808.html">https://www.cnblogs.com/shujiying/p/12460808.html</a></p>
<h3 id="哈希算法有哪些技巧？"><a href="#哈希算法有哪些技巧？" class="headerlink" title="哈希算法有哪些技巧？"></a>哈希算法有哪些技巧？</h3><p>右移16位，并使用异或。</p>
<p><a href="https://blog.csdn.net/q5706503/article/details/85114159">https://blog.csdn.net/q5706503/article/details/85114159</a></p>
<h3 id="为什么桶中节点个数超过8才会转为红黑树？"><a href="#为什么桶中节点个数超过8才会转为红黑树？" class="headerlink" title="为什么桶中节点个数超过8才会转为红黑树？"></a>为什么桶中节点个数超过8才会转为红黑树？</h3><p>在负载因子0.75（HashMap默认）的情况下，单个hash槽内元素个数为8的概率小于百万分之一，也就说大部分情况都是小于8，不必转为红黑树增加空间消耗。当大于等于8时，转为红黑树当桶中元素过多时快元素检索。</p>
<p><a href="https://blog.csdn.net/Liu_Wd/article/details/108052428">https://blog.csdn.net/Liu_Wd/article/details/108052428</a></p>
<h3 id="装填因子为0-75的原因？"><a href="#装填因子为0-75的原因？" class="headerlink" title="装填因子为0.75的原因？"></a>装填因子为0.75的原因？</h3><p>0.75作为加载因子，每个碰撞位置的链表长度超过８个是几乎不可能的。</p>
<p><a href="https://www.cnblogs.com/aspirant/p/11470928.html">https://www.cnblogs.com/aspirant/p/11470928.html</a></p>
<h3 id="key的equals方法一定会被调用吗？"><a href="#key的equals方法一定会被调用吗？" class="headerlink" title="key的equals方法一定会被调用吗？"></a>key的equals方法一定会被调用吗？</h3><p>不一定，不存在hash冲突就不会。</p>
]]></content>
      <categories>
        <category>面试</category>
        <category>集合</category>
      </categories>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2021/07/05/mysql/</url>
    <content><![CDATA[<p>一些整理和记录的mysql面试题</p>
<span id="more"></span>

<h2 id="描述一下数据库事务隔离级别？"><a href="#描述一下数据库事务隔离级别？" class="headerlink" title="描述一下数据库事务隔离级别？"></a>描述一下数据库事务隔离级别？</h2><p>​        ACID：</p>
<p>​        原子性：undo log（MVCC）</p>
<p>​        一致性: 最核心和最本质的要求</p>
<p>​        隔离性:锁，mvcc（多版本并发控制）</p>
<p>​        持久性：redo log        </p>
<p>​        数据库的事务隔离级别有四种，分别是读未提交、读已提交、可重复读、序列化，不同的隔离级别下会产生脏读、幻读、不可重复读等相关问题，因此在选择隔离级别的时候要根据应用场景来决定，使用合适的隔离级别。</p>
<p>​        各种隔离级别和数据库异常情况对应情况如下：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复  读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>READ- UNCOMMITTED</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>READ-COMMITTED</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE- READ</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>SQL 标准定义了四个隔离级别：</p>
<ul>
<li>READ-UNCOMMITTED(读取未提交)： 事务的修改，即使没有提交，对其他事务也都是可见的。事务能够读取未提交的数据，这种情况称为脏读。</li>
<li>READ-COMMITTED(读取已提交)： 事务读取已提交的数据，大多数数据库的默认隔离级别。当一个事务在执行过程中，数据被另外一个事务修改，造成本次事务前后读取的信息不一样，这种情况称为不可重复读。</li>
<li>REPEATABLE-READ(可重复读)： 这个级别是MySQL的默认隔离级别，它解决了脏读的问题，同时也保证了同一个事务多次读取同样的记录是一致的，但这个级别还是会出现幻读的情况。幻读是指当一个事务A读取某一个范围的数据时，另一个事务B在这个范围插入行，A事务再次读取这个范围的数据时，会产生幻读</li>
<li>SERIALIZABLE(可串行化)： 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li>
</ul>
<p>事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。</p>
<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED(读取提交内容):，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p>
<h2 id="MVCC的实现原理"><a href="#MVCC的实现原理" class="headerlink" title="MVCC的实现原理"></a>MVCC的实现原理</h2><p>参见博客《MVCC多版本并发控制》</p>
<h2 id="mysql幻读怎么解决的"><a href="#mysql幻读怎么解决的" class="headerlink" title="mysql幻读怎么解决的"></a>mysql幻读怎么解决的</h2><p>​        事务A按照一定条件进行数据读取，期间事务B插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B新插入的数据称之为幻读。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">20</span>),(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">20</span>),(<span class="number">15</span>,<span class="string">&#x27;15&#x27;</span>,<span class="number">30</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>假设有如下业务场景：</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>事务1</th>
<th>事务2</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>begin；</td>
<td></td>
</tr>
<tr>
<td>T1</td>
<td>select * from user where age = 20;2个结果</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>insert into user values(25,’25’,20);commit;</td>
</tr>
<tr>
<td>T3</td>
<td>select * from user where age =20;2个结果</td>
<td></td>
</tr>
<tr>
<td>T4</td>
<td>update user set name=’00’ where age =20;此时看到影响的行数为3</td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>select * from user where age =20;三个结果</td>
<td></td>
</tr>
</tbody></table>
<p>执行流程如下：</p>
<p>1、T1时刻读取年龄为20 的数据，事务1拿到了2条记录</p>
<p>2、T2时刻另一个事务插入一条新的记录，年龄也是20 </p>
<p>3、T3时刻，事务1再次读取年龄为20的数据，发现还是2条记录，事务2插入的数据并没有影响到事务1的事务读取</p>
<p>4、T4时刻，事务1修改年龄为20的数据，发现结果变成了三条，修改了三条数据</p>
<p>5、T5时刻，事务1再次读取年龄为20的数据，发现结果有三条，第三条数据就是事务2插入的数据，此时就产生了幻读情况</p>
<p>此时大家需要思考一个问题，在当下场景里，为什么没有解决幻读问题？</p>
<p>其实通过前面的分析，大家应该知道了快照读和当前读，一般情况下select * from ….where …是快照读，不会加锁，而 for update,lock in share mode,update,delete都属于当前读，<strong>如果事务中都是用快照读，那么不会产生幻读的问题，但是快照读和当前读一起使用的时候就会产生幻读</strong>。</p>
<p>如果都是当前读的话，如何解决幻读问题呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">20</span>),(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>,<span class="number">20</span>),(<span class="number">15</span>,<span class="string">&#x27;15&#x27;</span>,<span class="number">30</span>),(<span class="number">20</span>,<span class="string">&#x27;20&#x27;</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>时间</th>
<th>事务1</th>
<th>事务2</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>begin;</td>
<td></td>
</tr>
<tr>
<td>T1</td>
<td>select * from user where age =20 for update;</td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>insert into user values(25,’25’,20);此时会阻塞等待锁</td>
</tr>
<tr>
<td>T3</td>
<td>select * from user where age =20 for update;</td>
<td></td>
</tr>
</tbody></table>
<p>此时，可以看到事务2被阻塞了，需要等待事务1提交事务之后才能完成，其实本质上来说采用的是<font style="color:red;">间隙锁的机制</font>解决幻读问题。</p>
<h2 id="sql-join原理"><a href="#sql-join原理" class="headerlink" title="sql join原理?"></a>sql join原理?</h2><p>​        MySQL是只支持一种Join算法Nested-Loop Join(嵌套循环连接)，并不支持哈希连接和合并连接，不过在mysql中包含了多种变种，能够帮助MySQL提高join执行的效率。</p>
<p>​        <strong>1、Simple Nested-Loop Join</strong></p>
<p>​        这个算法相对来说就是很简单了，从驱动表中取出R1匹配S表所有列，然后R2，R3,直到将R表中的所有数据匹配完，然后合并数据，可以看到这种算法要对S表进行RN次访问，虽然简单，但是相对来说开销还是太大了。</p>
<p>​        <strong>2、Index Nested-Loop Join</strong></p>
<p>​        索引嵌套联系由于非驱动表上有索引，所以比较的时候不再需要一条条记录进行比较，而可以通过索引来减少比较，从而加速查询。这也就是平时我们在做关联查询的时候必须要求关联字段有索引的一个主要原因。</p>
<p>​        这种算法在链接查询的时候，驱动表会根据关联字段的索引进行查找，当在索引上找到了符合的值，再回表进行查询，也就是只有当匹配到索引以后才会进行回表。至于驱动表的选择，MySQL优化器一般情况下是会选择记录数少的作为驱动表，但是当SQL特别复杂的时候不排除会出现错误选择。</p>
<p>​        在索引嵌套链接的方式下，如果非驱动表的关联键是主键的话，这样来说性能就会非常的高，如果不是主键的话，关联起来如果返回的行数很多的话，效率就会特别的低，因为要多次的回表操作。先关联索引，然后根据二级索引的主键ID进行回表的操作。这样来说的话性能相对就会很差。</p>
<p>​        <strong>3、Block Nested-Loop Join</strong></p>
<p>​        在有索引的情况下，MySQL会尝试去使用Index Nested-Loop Join算法，在有些情况下，可能Join的列就是没有索引，那么这时MySQL的选择绝对不会是最先介绍的Simple Nested-Loop Join算法，而是会优先使用Block Nested-Loop Join的算法。</p>
<p>​        Block Nested-Loop Join对比Simple Nested-Loop Join多了一个中间处理的过程，也就是join buffer，使用join buffer将驱动表的查询JOIN相关列都给缓冲到了JOIN BUFFER当中，然后批量与非驱动表进行比较，这也来实现的话，可以将多次比较合并到一次，降低了非驱动表的访问频率。也就是只需要访问一次S表。这样来说的话，就不会出现多次访问非驱动表的情况了，也只有这种情况下才会访问join buffer。</p>
<p>​        在MySQL当中，我们可以通过参数join_buffer_size来设置join buffer的值，然后再进行操作。默认情况下join_buffer_size=256K，在查找的时候MySQL会将所有的需要的列缓存到join buffer当中，包括select的列，而不是仅仅只缓存关联列。在一个有N个JOIN关联的SQL当中会在执行时候分配N-1个join buffer。</p>
<h2 id="说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？"><a href="#说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？" class="headerlink" title="说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？"></a>说明一下数据库索引原理、底层索引数据结构，叶子节点存储的是什么，索引失效的情况？</h2><p>​        索引的实现原理，底层数据结构，叶子节点存储数据需要看视频了解。</p>
<p>​        索引失效的情况：</p>
<p>​        1、组合索引不遵循最左匹配原则</p>
<p>​        2、组合索引的前面索引列使用范围查询(&lt;,&gt;,like),会导致后续的索引失效</p>
<p>​        3、不要在索引上做任何操作（计算，函数，类型转换）</p>
<p>​        4、is null和is not null无法使用索引</p>
<p>​        5、尽量少使用or操作符，否则连接时索引会失效</p>
<p>​        6、字符串不添加引号会导致索引失效</p>
<p>​        7、两表关联使用的条件字段中字段的长度、编码不一致会导致索引失效</p>
<p>​        8、like语句中，以%开头的模糊查询</p>
<p>​        9、如果mysql中使用全表扫描比使用索引快，也会导致索引失效</p>
<h2 id="mysql如何做分库分表的？"><a href="#mysql如何做分库分表的？" class="headerlink" title="mysql如何做分库分表的？"></a>mysql如何做分库分表的？</h2><p>​        使用mycat或者shardingsphere中间件做分库分表，选择合适的中间件，水平分库，水平分表，垂直分库，垂直分表</p>
<p>​        在进行分库分表的时候要尽量遵循以下原则：</p>
<p>​        1、能不切分尽量不要切分；</p>
<p>​        2、如果要切分一定要选择合适的切分规则，提前规划好；</p>
<p>​        3、数据切分尽量通过数据冗余或表分组来降低跨库 Join 的可能；</p>
<p>​        4、由于数据库中间件对数据 Join 实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表 Join。</p>
<h2 id="数据存储引擎有哪些？"><a href="#数据存储引擎有哪些？" class="headerlink" title="数据存储引擎有哪些？"></a>数据存储引擎有哪些？</h2><p>​        大家可以通过show engines的方式查看对应的数据库支持的存储引擎。</p>
<h2 id="描述一下InnoDB和MyISAM的区别？"><a href="#描述一下InnoDB和MyISAM的区别？" class="headerlink" title="描述一下InnoDB和MyISAM的区别？"></a>描述一下InnoDB和MyISAM的区别？</h2><table>
<thead>
<tr>
<th>区别</th>
<th>Innodb</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody><tr>
<td>事务</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>外键</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>索引</td>
<td>即支持聚簇索引又支持非聚簇索引</td>
<td>只支持非聚簇索引</td>
</tr>
<tr>
<td>行锁</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表锁</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>存储文件</td>
<td>frm，ibd</td>
<td>frm,myi,myd</td>
</tr>
<tr>
<td>具体行数</td>
<td>每次必须要全表扫描统计行数</td>
<td>通过变量保存行数（查询不能带条件）</td>
</tr>
</tbody></table>
<p>如何选择？</p>
<p>​        1、是否需要支持事务，如果需要选择innodb，如果不需要选择myisam</p>
<p>​        2、如果表的大部分请求都是读请求，可以考虑myisam，如果既有读也有写，使用innodb</p>
<p>​        现在mysql的默认存储引擎已经变成了Innodb,推荐使用innodb</p>
<h2 id="描述一下聚簇索引和非聚簇索引的区别？"><a href="#描述一下聚簇索引和非聚簇索引的区别？" class="headerlink" title="描述一下聚簇索引和非聚簇索引的区别？"></a>描述一下聚簇索引和非聚簇索引的区别？</h2><p>​        innodb存储引擎在进行数据插入的时候必须要绑定到一个索引列上，默认是主键，如果没有主键，会选择唯一键，如果没有唯一键，那么会选择生成6字节的rowid，跟数据绑定在一起的索引我们称之为聚簇索引，没有跟数据绑定在一起的索引我们称之为非聚簇索引。</p>
<p>​        innodb存储引擎中既有聚簇索引也有非聚簇索引，而myisam存储引擎中只有非聚簇索引。</p>
<h2 id="事务有哪些隔离级别，分别解决了什么问题？"><a href="#事务有哪些隔离级别，分别解决了什么问题？" class="headerlink" title="事务有哪些隔离级别，分别解决了什么问题？"></a>事务有哪些隔离级别，分别解决了什么问题？</h2><ul>
<li>未提交读</li>
<li>提交读</li>
<li>可重复读（mysql默认）</li>
<li>串行化</li>
</ul>
<h2 id="描述一下mysql主从复制的机制的原理？mysql主从复制主要有几种模式？"><a href="#描述一下mysql主从复制的机制的原理？mysql主从复制主要有几种模式？" class="headerlink" title="描述一下mysql主从复制的机制的原理？mysql主从复制主要有几种模式？"></a>描述一下mysql主从复制的机制的原理？mysql主从复制主要有几种模式？</h2><p><strong>原理</strong></p>
<p><a href="https://blog.csdn.net/qq_41772936/article/details/80380950">https://blog.csdn.net/qq_41772936/article/details/80380950</a></p>
<p><strong>主从复制的几种方式</strong></p>
<ul>
<li>基于SQL语句的复制（SBR）</li>
<li>基于行的复制（RBR）</li>
<li>混合模式复制（MBR）</li>
</ul>
<p>基于 SQL 语句的方式最古老的方式，也是目前默认的复制方式，后来的两种是 MySQL 5 以后才出现的复制方式。</p>
<p>参考：<a href="https://blog.csdn.net/ztianming/article/details/72876609">https://blog.csdn.net/ztianming/article/details/72876609</a></p>
<h2 id="如何优化sql，查询计划的结果中看哪些些关键数据？"><a href="#如何优化sql，查询计划的结果中看哪些些关键数据？" class="headerlink" title="如何优化sql，查询计划的结果中看哪些些关键数据？"></a>如何优化sql，查询计划的结果中看哪些些关键数据？</h2><p><a href="https://www.cnblogs.com/misscai/p/13121947.html">https://www.cnblogs.com/misscai/p/13121947.html</a></p>
<p><a href="https://www.cnblogs.com/klvchen/p/10137117.html">https://www.cnblogs.com/klvchen/p/10137117.html</a></p>
<h2 id="MySQL为什么选择B-树作为它的存储结构，为什么不选择Hash、二叉、红黑树？"><a href="#MySQL为什么选择B-树作为它的存储结构，为什么不选择Hash、二叉、红黑树？" class="headerlink" title="MySQL为什么选择B+树作为它的存储结构，为什么不选择Hash、二叉、红黑树？"></a>MySQL为什么选择B+树作为它的存储结构，为什么不选择Hash、二叉、红黑树？</h2><p><a href="http://www.liuzk.com/410.html">http://www.liuzk.com/410.html</a></p>
<h2 id="描述一下mysql的乐观锁和悲观锁，锁的种类？"><a href="#描述一下mysql的乐观锁和悲观锁，锁的种类？" class="headerlink" title="描述一下mysql的乐观锁和悲观锁，锁的种类？"></a>描述一下mysql的乐观锁和悲观锁，锁的种类？</h2><p>​        乐观锁并不是数据库自带的，如果需要使用乐观锁，那么需要自己去实现，一般情况下，我们会在表中新增一个version字段，每次更新数据version+1,在进行提交之前会判断version是否一致。</p>
<p>​        mysql中的绝大部分锁都是悲观锁，按照粒度可以分为行锁和表锁：</p>
<p>​        <strong>行锁：</strong></p>
<p>​            共享锁：当读取一行记录的时候，为了防止别人修改，则需要添加S锁</p>
<p>​            排它锁：当修改一行记录的时候，为了防止别人同时进行修改，则需要添加X锁</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">X</th>
<th align="center">S</th>
</tr>
</thead>
<tbody><tr>
<td align="center">X</td>
<td align="center">不兼容</td>
<td align="center">不兼容</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">不兼容</td>
<td align="center">兼容</td>
</tr>
</tbody></table>
<p>​            记录锁：添加在行索引上的锁</p>
<p>​            间隙锁：锁定范围是索引记录之间的间隙，针对可重复读以上隔离级别</p>
<p>​            临键锁：记录锁+间隙锁</p>
<p>​        <strong>表锁：</strong></p>
<p>​            意向锁：在获取某行的锁之前，必须要获取表的锁，分为意向共享锁，意向排它锁</p>
<p>​            自增锁：对自增字段所采用的特殊表级锁</p>
<p>​        锁模式的含义：</p>
<p>​            IX：意向排它锁</p>
<p>​            X：锁定记录本身和记录之前的间隙</p>
<p>​            S：锁定记录本身和记录之前的间隙</p>
<p>​            X,REC_NOT_GAP：只锁定记录本身</p>
<p>​            S，REC_NOT_GAP：只锁定记录本身</p>
<p>​            X，GAP：间隙锁，不锁定记录本身</p>
<p>​            S，GAP：间隙锁，不锁定记录本身</p>
<p>​            X，GAP,INSERT_INTENTION：插入意向锁</p>
<h2 id="mysql原子性和持久性是怎么保证的？"><a href="#mysql原子性和持久性是怎么保证的？" class="headerlink" title="mysql原子性和持久性是怎么保证的？"></a>mysql原子性和持久性是怎么保证的？</h2><p>原子性通过undolog来实现，持久性通过redo log来实现</p>
<h2 id="自增id用完怎么办？"><a href="#自增id用完怎么办？" class="headerlink" title="自增id用完怎么办？"></a>自增id用完怎么办？</h2><ul>
<li>表的自增id达到上限后，再申请时它的值就不会改变，进而导致继续插入数据时报主键冲突的错误</li>
<li>row_id达到上限后，则会归0再重新递增，如果出现相同的row_id，后写的数据会覆盖之前的数据</li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>基于redis的java分布式锁实现</title>
    <url>/2021/07/02/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84java%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>分布式锁一般有三种实现方式：</p>
<ul>
<li>数据库乐观锁</li>
<li>基于Redis的分布式锁</li>
<li>基于Zookeeper的分布式锁</li>
</ul>
<span id="more"></span>

<p>本文给出第二种方式的代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.db.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeLock</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">&quot;PX&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DistributeLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 连接池配置项</span></span><br><span class="line">			JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">			<span class="comment">// 最大活跃连接数</span></span><br><span class="line">			config.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">			<span class="comment">// 最大空闲连接数</span></span><br><span class="line">			config.setMaxIdle(<span class="number">30</span>);</span><br><span class="line">			<span class="comment">// 初始化连接数</span></span><br><span class="line">			config.setMinIdle(<span class="number">30</span>);</span><br><span class="line">			<span class="comment">// 最大等待时间</span></span><br><span class="line">			config.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">			<span class="comment">// 从池中获取连接时，是否进行有效检查</span></span><br><span class="line">			config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">// 归还连接时，是否进行有效检查</span></span><br><span class="line">			config.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">// 判断是否需要密码</span></span><br><span class="line">			<span class="keyword">if</span> (StringUtils.isNotBlank(<span class="string">&quot;XXX&quot;</span>)) &#123;</span><br><span class="line">				jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">&quot;XXX.XXX.XXX.XXX&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>, <span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">&quot;XXX.XXX.XXX.XXX&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		DistributeLock distributeLock = <span class="keyword">new</span> DistributeLock();</span><br><span class="line">		<span class="keyword">boolean</span> flag = distributeLock.tryGetDistributedLock(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1001&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">		System.out.println(flag);</span><br><span class="line">		<span class="keyword">boolean</span> flag2 = distributeLock.releaseDistributeLock(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;1001&quot;</span>);</span><br><span class="line">		System.out.println(flag2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> expireTime</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = getJedis();</span><br><span class="line">		String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">			jedis.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 释放分布式锁</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseDistributeLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = getJedis();</span><br><span class="line">		String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">		Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line">		<span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 错误示例</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> expireTime</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrongHetLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = getJedis();</span><br><span class="line">		Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line">		<span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁。setnx()方法作用就是set if not exist，expire()方法就是给锁加一个过期时间。乍一看好像和前面的set()方法结果一样</span></span><br><span class="line">		<span class="comment">// 然而由于这是两条redis命令，不具有原子性，如果程序在执行完setnx之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法</span></span><br><span class="line">		<span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">			jedis.expire(lockKey, expireTime);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 从jedis连接池中获取获取jedis对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			jedis = jedisPool.getResource();</span><br><span class="line">			System.out.println(<span class="string">&quot;获取redis连接成功！&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;获取redis连接失败！ : &quot;</span> + e.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> jedis;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnblogs.com/pingping-joe/p/10681231.html">https://www.cnblogs.com/pingping-joe/p/10681231.html</a></p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>redis做分布式无锁CAS</title>
    <url>/2021/07/02/redis%E5%81%9A%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A0%E9%94%81CAS/</url>
    <content><![CDATA[<p>本文章主要参考博客：</p>
<p><a href="https://my.oschina.net/u/3768341/blog/1854578">https://my.oschina.net/u/3768341/blog/1854578</a></p>
<p>并做了修正，把jedisPool.close()修改为jedis.close()，读者可以比较着看。</p>
<p>因为Redis本身是单线程的，具备原子性，所以可以用来做分布式无锁的操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.db.redis.nolock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.db.redis.nolock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderRedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">		jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOrderNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			jedis = jedisPool.getResource();</span><br><span class="line">			SimpleDateFormat date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYYMMDDHHMMSS&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> date.format(<span class="keyword">new</span> Date())+<span class="string">&quot;-&quot;</span>+jedis.incr(<span class="string">&quot;order_keys&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">				jedis.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>线程任务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.db.redis.nolock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">	<span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OrderTask</span><span class="params">(CountDownLatch latch, OrderService orderService)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.latch = latch;</span><br><span class="line">		<span class="keyword">this</span>.orderService = orderService;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			latch.await();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.printf(<span class="string">&quot;ThreadName %s 订单号:%s\n&quot;</span>, Thread.currentThread().getName(), orderService.getOrderNo());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">		<span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">		OrderService orderService = <span class="keyword">new</span> OrderRedisServiceImpl();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			service.submit(<span class="keyword">new</span> OrderTask(latch, orderService));</span><br><span class="line">		&#125;</span><br><span class="line">		latch.countDown();</span><br><span class="line">		service.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>ThreadName pool-1-thread-10 订单号:2021061810906510-62<br>ThreadName pool-1-thread-1 订单号:2021061810906512-70<br>ThreadName pool-1-thread-2 订单号:2021061810906512-69<br>ThreadName pool-1-thread-6 订单号:2021061810906510-68<br>ThreadName pool-1-thread-8 订单号:2021061810906510-67<br>ThreadName pool-1-thread-7 订单号:2021061810906510-66<br>ThreadName pool-1-thread-4 订单号:2021061810906510-65<br>ThreadName pool-1-thread-9 订单号:2021061810906510-64<br>ThreadName pool-1-thread-3 订单号:2021061810906510-61<br>ThreadName pool-1-thread-5 订单号:2021061810906510-63</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>redis事务</title>
    <url>/2021/07/02/redis%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>首先下一个定义，关系型数据中的事务都是原子性的，而redis的事务是非原子性的。什么是原子性：简单理解就是整个程序中的所有操作，要么全部完成，要不全部不完成，不会停留在中间某个环节。</p>
<h2 id="Redis事务相关命令"><a href="#Redis事务相关命令" class="headerlink" title="Redis事务相关命令"></a>Redis事务相关命令</h2><ul>
<li><p>multi：开启事务，redis会将后续的命令逐个放入队列中，然后使用exec命令来原子化执行这个命令系列</p>
</li>
<li><p>exec：执行事务中的所有操作命令</p>
</li>
<li><p>discard：取消事务，放弃执行事务块中的所有命令</p>
</li>
<li><p>watch：监视一个或多个key，如果事务在执行前，这个key（或多个key）被其他命令修改，则事务被中断，不会执行事务中的任何命令</p>
</li>
<li><p>unwatch：取消watch对所有key的监视</p>
</li>
</ul>
<span id="more"></span>

<h2 id="Redis事务执行流程"><a href="#Redis事务执行流程" class="headerlink" title="Redis事务执行流程"></a>Redis事务执行流程</h2><p>开始事务-&gt;命令入队-&gt;执行事务</p>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="正常执行"><a href="#正常执行" class="headerlink" title="正常执行"></a>正常执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h3 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 22</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 33</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; discard</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v2&quot; // 数据未被改动</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h3 id="若在事务队列中存在命令性错误（类似于java编译性错误），则执行exec命令时，所有命令都不会执行"><a href="#若在事务队列中存在命令性错误（类似于java编译性错误），则执行exec命令时，所有命令都不会执行" class="headerlink" title="若在事务队列中存在命令性错误（类似于java编译性错误），则执行exec命令时，所有命令都不会执行"></a>若在事务队列中存在命令性错误（类似于java编译性错误），则执行exec命令时，所有命令都不会执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h3 id="若在事务队列中存在语法性错误（类似于java中的运行时异常），则执行exec命令时，其他正确命令会被执行，错误命令抛出异常。"><a href="#若在事务队列中存在语法性错误（类似于java中的运行时异常），则执行exec命令时，其他正确命令会被执行，错误命令抛出异常。" class="headerlink" title="若在事务队列中存在语法性错误（类似于java中的运行时异常），则执行exec命令时，其他正确命令会被执行，错误命令抛出异常。"></a>若在事务队列中存在语法性错误（类似于java中的运行时异常），则执行exec命令时，其他正确命令会被执行，错误命令抛出异常。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 22</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 33</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (error) ERR value is not an integer or out of range</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) OK</span><br><span class="line">5) &quot;v4&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h3 id="使用watch"><a href="#使用watch" class="headerlink" title="使用watch"></a>使用watch</h3><h4 id="案例一：使用watch检测balance，事务期间balance数据未变动，事务执行成功"><a href="#案例一：使用watch检测balance，事务期间balance数据未变动，事务执行成功" class="headerlink" title="案例一：使用watch检测balance，事务期间balance数据未变动，事务执行成功"></a>案例一：使用watch检测balance，事务期间balance数据未变动，事务执行成功</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get debt</span><br><span class="line">&quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 80</span><br><span class="line">2) (integer) 20</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h4 id="案例二：使用watch检测balance，在开启事务后（标注1处），在新窗口执行标注2中的操作，更改balance的值，模拟其他客户端在事务执行期间更改watch监控的数据，然后再执行标注1后命令，执行exec后，事务未成功执行。"><a href="#案例二：使用watch检测balance，在开启事务后（标注1处），在新窗口执行标注2中的操作，更改balance的值，模拟其他客户端在事务执行期间更改watch监控的数据，然后再执行标注1后命令，执行exec后，事务未成功执行。" class="headerlink" title="案例二：使用watch检测balance，在开启事务后（标注1处），在新窗口执行标注2中的操作，更改balance的值，模拟其他客户端在事务执行期间更改watch监控的数据，然后再执行标注1后命令，执行exec后，事务未成功执行。"></a>案例二：使用watch检测balance，在开启事务后（标注1处），在新窗口执行标注2中的操作，更改balance的值，模拟其他客户端在事务执行期间更改watch监控的数据，然后再执行标注1后命令，执行exec后，事务未成功执行。</h4><p>控制台1：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch balance</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby balance 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby debt 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line">&quot;800&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p>控制台2：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line">&quot;80&quot;</span><br><span class="line">127.0.0.1:6379&gt; set balance 800</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p>一但执行exec开启事务的执行后，无论事务使用执行成功，watch对变量的监控都将被取消。故当事务执行失败后，需要重新执行watch命令对变量进行监控，并开启新的事务进行操作。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>watch指令类似于乐观锁，在事务提交时，如果watch监控的多个key中任何key的值已经被其他客户端更改，则使用exec执行事务时，事务队列将不会被执行。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>redis工具类（Java）</title>
    <url>/2021/07/02/redis%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88Java%EF%BC%89/</url>
    <content><![CDATA[<p>本文介绍java版本的redis工具类（基于jedis客户端实现），方便项目代码访问redis。</p>
<span id="more"></span>

<h2 id="代码骨架"><a href="#代码骨架" class="headerlink" title="代码骨架"></a>代码骨架</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.db.redis.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JedisUtil.class);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisUtil jedisUtil = <span class="keyword">new</span> JedisUtil();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">JedisUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Jedis jedis = getJedis();</span></span><br><span class="line">	<span class="comment">// 执行命令操作</span></span><br><span class="line">	<span class="comment">// 关闭redis句柄returnJedis(Jedis jedis)并返回结果</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">			config.setMaxTotal(<span class="number">1000</span>);</span><br><span class="line">			config.setMaxIdle(<span class="number">30</span>);</span><br><span class="line">			config.setMinIdle(<span class="number">30</span>);</span><br><span class="line">			config.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">			config.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">			config.setTestOnReturn(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">// 判断是否需要密码</span></span><br><span class="line">			<span class="keyword">if</span> (StringUtils.isNotBlank(<span class="string">&quot;xxx&quot;</span>)) &#123;</span><br><span class="line">				jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>, <span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			LOGGER.error(<span class="string">&quot;初始化连接池失败！: &quot;</span> + e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 从jedis连接池中获取获取jedis对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			jedis = jedisPool.getResource();</span><br><span class="line">			LOGGER.debug(<span class="string">&quot;获取redis连接成功！&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			LOGGER.error(<span class="string">&quot;获取redis连接失败！ : &quot;</span> + e.toString());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> jedis;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取JedisUtil实例(供外部访问使用)</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> jedisUtil;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 回收jedis(放到finally中)</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> jedis</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnJedis</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">			jedis.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="redis操作"><a href="#redis操作" class="headerlink" title="redis操作"></a>redis操作</h2><h3 id="取多个集合中的交集"><a href="#取多个集合中的交集" class="headerlink" title="取多个集合中的交集"></a>取多个集合中的交集</h3><p>public Set<String> setInter(String… keys) {<br>        Jedis jedis = getJedis();<br>        Set<String> values = jedis.sinter(keys);<br>        returnJedis(jedis);<br>        return values;<br>    }</String></String></p>
<h3 id="取set集合中的元素数量"><a href="#取set集合中的元素数量" class="headerlink" title="取set集合中的元素数量"></a>取set集合中的元素数量</h3><p>public long getSetCount(String key) {<br>        Jedis jedis = getJedis();<br>        long count = jedis.scard(key);<br>        returnJedis(jedis);<br>        return count;<br>    }</p>
<h3 id="获取set集合中的所有元素"><a href="#获取set集合中的所有元素" class="headerlink" title="获取set集合中的所有元素"></a>获取set集合中的所有元素</h3><p>public Set<String> getSetElements(String key) {<br>        Jedis jedis = getJedis();<br>        Set<String> smembers = jedis.smembers(key);<br>        returnJedis(jedis);<br>        return smembers;<br>    }</String></String></p>
<h3 id="删除set集合中的某一元素"><a href="#删除set集合中的某一元素" class="headerlink" title="删除set集合中的某一元素"></a>删除set集合中的某一元素</h3><p>public void delSetElements(byte[] key, byte[] member) {<br>        Jedis jedis = getJedis();<br>        jedis.srem(key, member);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="将多个set集合中的交集保存到指定key并返回交集"><a href="#将多个set集合中的交集保存到指定key并返回交集" class="headerlink" title="将多个set集合中的交集保存到指定key并返回交集"></a>将多个set集合中的交集保存到指定key并返回交集</h3><p>public Set<String> interToDestKey(String destKey, String… keys) {<br>        Jedis jedis = getJedis();<br>        jedis.sinterstore(destKey, keys);<br>        Set<String> mongoIds = jedis.smembers(destKey);<br>        returnJedis(jedis);<br>        return mongoIds;<br>    }</String></String></p>
<h3 id="将多个set集合中的并集保存到指定key并返回并集"><a href="#将多个set集合中的并集保存到指定key并返回并集" class="headerlink" title="将多个set集合中的并集保存到指定key并返回并集"></a>将多个set集合中的并集保存到指定key并返回并集</h3><p>public Set<String> unionToDestKey(String destKey, String… keys) {<br>        Jedis jedis = getJedis();<br>        jedis.sunionstore(destKey, keys);<br>        Set<String> mongoIds = jedis.smembers(destKey);<br>        returnJedis(jedis);<br>        return mongoIds;<br>    }</String></String></p>
<h3 id="取多个集合中的并集"><a href="#取多个集合中的并集" class="headerlink" title="取多个集合中的并集"></a>取多个集合中的并集</h3><p>public Set<String> setUnion(String… keys) {<br>        Jedis jedis = getJedis();<br>        Set<String> values = jedis.sunion(keys);<br>        returnJedis(jedis);<br>        return values;<br>    }</String></String></p>
<h3 id="将第一个key对后面多个key做差集后的数据保存到指定key中并返回结果"><a href="#将第一个key对后面多个key做差集后的数据保存到指定key中并返回结果" class="headerlink" title="将第一个key对后面多个key做差集后的数据保存到指定key中并返回结果"></a>将第一个key对后面多个key做差集后的数据保存到指定key中并返回结果</h3><p>public Set<String> diffToDestKey(String destKey, String… keys) {<br>        Jedis jedis = getJedis();<br>        jedis.sdiffstore(destKey, keys);<br>        Set<String> mongoIds = jedis.smembers(destKey);<br>        returnJedis(jedis);<br>        return mongoIds;<br>    }</String></String></p>
<h3 id="取第一个key对所有key做差集后的元素集合"><a href="#取第一个key对所有key做差集后的元素集合" class="headerlink" title="取第一个key对所有key做差集后的元素集合"></a>取第一个key对所有key做差集后的元素集合</h3><p>public Set<String> setDiff(String… keys) {<br>        Jedis jedis = getJedis();<br>        Set<String> values = jedis.sdiff(keys);<br>        returnJedis(jedis);<br>        return values;<br>    }</String></String></p>
<h3 id="添加元素到有序集合sortedSet（设置过期时间）"><a href="#添加元素到有序集合sortedSet（设置过期时间）" class="headerlink" title="添加元素到有序集合sortedSet（设置过期时间）"></a>添加元素到有序集合sortedSet（设置过期时间）</h3><p>public void zadd(String key, String value, double score) {<br>        Jedis jedis = getJedis();<br>        jedis.zadd(key, score, value);<br>        jedis.expire(key, 7200);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="添加元素到有序集合sortedSet"><a href="#添加元素到有序集合sortedSet" class="headerlink" title="添加元素到有序集合sortedSet"></a>添加元素到有序集合sortedSet</h3><p>public void zadd(byte[] key, byte[] value, double score) {<br>        Jedis jedis = getJedis();<br>        jedis.zadd(key, score, value);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="添加sorted-set（对有序集合进行长度限制）"><a href="#添加sorted-set（对有序集合进行长度限制）" class="headerlink" title="添加sorted set（对有序集合进行长度限制）"></a>添加sorted set（对有序集合进行长度限制）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key     sorted的Key名称</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value   需要添加的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> score   需要添加的分值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> limit   有序集合需要维持的长度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> reverse true,当队列达到规定的长度时，删除分值最小的值，false删除最大的值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zaddWithLimit</span><span class="params">(String key, String value, <span class="keyword">double</span> score, <span class="keyword">int</span> limit, <span class="keyword">boolean</span> reverse)</span> </span>&#123;</span><br><span class="line">		Jedis jedis = getJedis();</span><br><span class="line">		jedis.zadd(key, score, value);</span><br><span class="line">		<span class="keyword">long</span> totalcount = jedis.zcard(key);</span><br><span class="line">		<span class="keyword">if</span> (limit &lt; totalcount) &#123;</span><br><span class="line">			<span class="keyword">if</span> (reverse) &#123;</span><br><span class="line">				jedis.zremrangeByRank(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				jedis.zremrangeByRank(key, totalcount, totalcount);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		returnJedis(jedis);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置key的值为value"><a href="#设置key的值为value" class="headerlink" title="设置key的值为value"></a>设置key的值为value</h3><p>public void setKey(String key, String value) {<br>        Jedis jedis = getJedis();<br>        jedis.set(key, value);<br>        returnJedis(jedis);<br>    }</p>
<p>public void setKey(byte[] key, byte[] value) {<br>        Jedis jedis = getJedis();<br>        jedis.set(key, value);<br>        returnJedis(jedis);<br>    }</p>
<p>设置key的值为value，并规定Key的失效时间（second）</p>
<p>public void setKeyWithExpire(String key, int second, String value) {<br>        Jedis jedis = getJedis();<br>        jedis.set(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<p>public void setKeyWithExpire(byte[] key, int second, byte[] value) {<br>        Jedis jedis = getJedis();<br>        jedis.set(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<p>public void setKeyWithExpire(String key, int second) {<br>        Jedis jedis = getJedis();<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="获取指定key的值"><a href="#获取指定key的值" class="headerlink" title="获取指定key的值"></a>获取指定key的值</h3><p>public String getValue(String key) {<br>        Jedis jedis = getJedis();<br>        String value = jedis.get(key);<br>        returnJedis(jedis);<br>        return value;<br>    }</p>
<p>public byte[] getValue(byte[] key) {<br>        Jedis jedis = getJedis();<br>        byte[] value = jedis.get(key);<br>        returnJedis(jedis);<br>        return value;<br>    }</p>
<h3 id="获取指定set中的元素集合"><a href="#获取指定set中的元素集合" class="headerlink" title="获取指定set中的元素集合"></a>获取指定set中的元素集合</h3><p>public Set<String> getSetValue(String key) {<br>        Jedis jedis = getJedis();<br>        Set<String> valueSet = jedis.smembers(key);<br>        returnJedis(jedis);<br>        return valueSet;<br>    }</String></String></p>
<h3 id="返回sortedSet指定范围的集合元素-0为第一个元素，-1为最后一个元素（元素已按由小到大排序）"><a href="#返回sortedSet指定范围的集合元素-0为第一个元素，-1为最后一个元素（元素已按由小到大排序）" class="headerlink" title="返回sortedSet指定范围的集合元素,0为第一个元素，-1为最后一个元素（元素已按由小到大排序）"></a>返回sortedSet指定范围的集合元素,0为第一个元素，-1为最后一个元素（元素已按由小到大排序）</h3><p>public Set<String> zrange(String key, int start, int end) {<br>        Jedis jedis = getJedis();<br>        Set<String> set = jedis.zrange(key, start, end);<br>        returnJedis(jedis);<br>        return set;<br>    }</String></String></p>
<h3 id="获取给定区间的元素，原始按照权重由高到低排序"><a href="#获取给定区间的元素，原始按照权重由高到低排序" class="headerlink" title="获取给定区间的元素，原始按照权重由高到低排序"></a>获取给定区间的元素，原始按照权重由高到低排序</h3><p>public Set<String> zrevrange(String key, int start, int end) {<br>        Jedis jedis = getJedis();<br>        Set<String> set = jedis.zrevrange(key, start, end);<br>        returnJedis(jedis);<br>        return set;<br>    }</String></String></p>
<h3 id="添加对应关系，如果对应关系已存在，则覆盖"><a href="#添加对应关系，如果对应关系已存在，则覆盖" class="headerlink" title="添加对应关系，如果对应关系已存在，则覆盖"></a>添加对应关系，如果对应关系已存在，则覆盖</h3><p>public String hmset(String key, Map&lt;String, String&gt; map) {<br>        Jedis jedis = getJedis();<br>        String s = jedis.hmset(key, map);<br>        returnJedis(jedis);<br>        return s;<br>    }</p>
<h3 id="向List尾部追加记录"><a href="#向List尾部追加记录" class="headerlink" title="向List尾部追加记录"></a>向List尾部追加记录</h3><p>public long rpush(String key, String value) {<br>        Jedis jedis = getJedis();<br>        long count = jedis.rpush(key, value);<br>        returnJedis(jedis);<br>        return count;<br>    }</p>
<h3 id="向List头部追加记录"><a href="#向List头部追加记录" class="headerlink" title="向List头部追加记录"></a>向List头部追加记录</h3><p>public long lpush(String key, String value) {<br>        Jedis jedis = getJedis();<br>        long count = jedis.lpush(key, value);<br>        returnJedis(jedis);<br>        return count;<br>    }</p>
<h3 id="截取list并返回截取后的元素"><a href="#截取list并返回截取后的元素" class="headerlink" title="截取list并返回截取后的元素"></a>截取list并返回截取后的元素</h3><p>public List<String> ltrim(String key, int start, int end) {<br>        Jedis jedis = getJedis();<br>        jedis.ltrim(key, start, end);<br>        List<String> list = jedis.lrange(key, 0, -1);<br>        returnJedis(jedis);<br>        return list;<br>    }</String></String></p>
<h3 id="截取list并返回截取后的元素-1"><a href="#截取list并返回截取后的元素-1" class="headerlink" title="截取list并返回截取后的元素"></a>截取list并返回截取后的元素</h3><p>public List<String> getListElements(String key) {<br>        Jedis jedis = getJedis();<br>        List<String> list = jedis.lrange(key, 0, -1);<br>        returnJedis(jedis);<br>        return list;<br>    }</String></String></p>
<h3 id="获取list的元素个数"><a href="#获取list的元素个数" class="headerlink" title="获取list的元素个数"></a>获取list的元素个数</h3><p>public long llen(String key) {<br>        Jedis jedis = getJedis();<br>        Long len = jedis.llen(key);<br>        returnJedis(jedis);<br>        return len;<br>    }</p>
<h3 id="删除指定key"><a href="#删除指定key" class="headerlink" title="删除指定key"></a>删除指定key</h3><p>public long del(String key) {<br>        Jedis jedis = getJedis();<br>        long s = jedis.del(key);<br>        returnJedis(jedis);<br>        return s;<br>    }</p>
<p>public long del(byte[] key) {<br>        Jedis jedis = getJedis();<br>        long s = jedis.del(key);<br>        returnJedis(jedis);<br>        return s;<br>    }</p>
<h3 id="向set集合中添加集合数据"><a href="#向set集合中添加集合数据" class="headerlink" title="向set集合中添加集合数据"></a>向set集合中添加集合数据</h3><p>public void addSetWithExpire(String key, Set<String> vaules, int expire) {<br>        Jedis jedis = getJedis();<br>        Pipeline pipeline = jedis.pipelined();<br>        for (String value : vaules) {<br>            pipeline.sadd(key, value);<br>            pipeline.expire(key, expire);<br>        }<br>        pipeline.sync();<br>        returnJedis(jedis);<br>    }</String></p>
<h3 id="向set集合中添加集合数据，并规定Key的失效时间"><a href="#向set集合中添加集合数据，并规定Key的失效时间" class="headerlink" title="向set集合中添加集合数据，并规定Key的失效时间"></a>向set集合中添加集合数据，并规定Key的失效时间</h3><p>public void updateKeyWithExpire(String key, int second, Set<String> vaules) {<br>        Jedis jedis = getJedis();<br>        jedis.del(key);<br>        Pipeline pipeline = jedis.pipelined();<br>        for (String value : vaules) {<br>            pipeline.sadd(key, value);<br>            pipeline.expire(key, second);<br>        }<br>        pipeline.sync();<br>        returnJedis(jedis);<br>    }</String></p>
<h3 id="向set集合中添加数据"><a href="#向set集合中添加数据" class="headerlink" title="向set集合中添加数据"></a>向set集合中添加数据</h3><p>public void addSetValue(String key, String value) {<br>        Jedis jedis = getJedis();<br>        jedis.sadd(key, value);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="向set集合中添加数据-1"><a href="#向set集合中添加数据-1" class="headerlink" title="向set集合中添加数据"></a>向set集合中添加数据</h3><p>public void addSetValue(byte[] key, byte[] value) {<br>        Jedis jedis = getJedis();<br>        jedis.sadd(key, value);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="向set集合中添加数据，并规定Key的失效时间"><a href="#向set集合中添加数据，并规定Key的失效时间" class="headerlink" title="向set集合中添加数据，并规定Key的失效时间"></a>向set集合中添加数据，并规定Key的失效时间</h3><p>public void addSetValueWithExpire(String key, int second, String value) {<br>        Jedis jedis = getJedis();<br>        jedis.sadd(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<p>public void addSetValueWithExpire(byte[] key, int second, byte[] value) {<br>        Jedis jedis = getJedis();<br>        jedis.sadd(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<p>public void addSetValueWithExpire(String key, int second, String… value) {<br>        if (null == value || value.length == 0) {<br>            return;<br>        }<br>        Jedis jedis = getJedis();<br>        jedis.sadd(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="向set集合中添加集合数据，并规定Key的失效时间-1"><a href="#向set集合中添加集合数据，并规定Key的失效时间-1" class="headerlink" title="向set集合中添加集合数据，并规定Key的失效时间"></a>向set集合中添加集合数据，并规定Key的失效时间</h3><p>public void addSetWithExpire(Map&lt;String, Set<String>&gt; valueMap, int second) {<br>        Jedis jedis = getJedis();<br>        Pipeline pipeline = jedis.pipelined();<br>        for (Map.Entry&lt;String, Set<String>&gt; entry : valueMap.entrySet()) {<br>            for (String str : entry.getValue()) {<br>                pipeline.sadd(entry.getKey(), str);<br>                pipeline.expire(entry.getKey(), second);<br>            }<br>        }<br>        pipeline.sync();<br>        returnJedis(jedis);<br>    }</String></String></p>
<h3 id="向redis队列中发布消息"><a href="#向redis队列中发布消息" class="headerlink" title="向redis队列中发布消息"></a>向redis队列中发布消息</h3><p>public void publishMsg(String channel, Object redisMsg) {<br>        Jedis jedis = getJedis();<br>        jedis.publish(channel.getBytes(Charset.forName(“UTF-8”)), SerializeUtil.serialize(redisMsg));<br>        returnJedis(jedis);<br>    }</p>
<h3 id="向redis队列中发布消息-1"><a href="#向redis队列中发布消息-1" class="headerlink" title="向redis队列中发布消息"></a>向redis队列中发布消息</h3><p>public void publishMsg(byte[] channel, byte[] redisMsg) {<br>        Jedis jedis = getJedis();<br>        jedis.publish(channel, redisMsg);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="是否存在KEY"><a href="#是否存在KEY" class="headerlink" title="是否存在KEY"></a>是否存在KEY</h3><p>public boolean exists(String key) {<br>        Jedis jedis = getJedis();<br>        boolean exists = jedis.exists(key);<br>        returnJedis(jedis);<br>        return exists;<br>    }</p>
<p>public boolean exists(byte[] key) {<br>        Jedis jedis = getJedis();<br>        boolean exists = jedis.exists(key);<br>        returnJedis(jedis);<br>        return exists;<br>    }</p>
<h3 id="重命名KEY"><a href="#重命名KEY" class="headerlink" title="重命名KEY"></a>重命名KEY</h3><p>public String rename(String oldKey, String newKey) {<br>        Jedis jedis = getJedis();<br>        String result = jedis.rename(oldKey, newKey);<br>        returnJedis(jedis);<br>        return result;<br>    }</p>
<h3 id="设置失效时间"><a href="#设置失效时间" class="headerlink" title="设置失效时间"></a>设置失效时间</h3><p>public void expire(String key, int seconds) {<br>        Jedis jedis = getJedis();<br>        jedis.expire(key, seconds);<br>        returnJedis(jedis);<br>    }</p>
<p>public void expire(byte[] key, int seconds) {<br>        Jedis jedis = getJedis();<br>        jedis.expire(key, seconds);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="删除失效时间"><a href="#删除失效时间" class="headerlink" title="删除失效时间"></a>删除失效时间</h3><p>public void persist(String key) {<br>        Jedis jedis = getJedis();<br>        jedis.persist(key);<br>        returnJedis(jedis);<br>    }</p>
<p>public void persist(byte[] key) {<br>        Jedis jedis = getJedis();<br>        jedis.persist(key);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="添加一个键值对，如果键存在不在添加，如果不存在，添加完成以后设置键的有效期"><a href="#添加一个键值对，如果键存在不在添加，如果不存在，添加完成以后设置键的有效期" class="headerlink" title="添加一个键值对，如果键存在不在添加，如果不存在，添加完成以后设置键的有效期"></a>添加一个键值对，如果键存在不在添加，如果不存在，添加完成以后设置键的有效期</h3><p>public void setnxWithTimeOut(String key, String value, int timeOut) {<br>        Jedis jedis = getJedis();<br>        if (0 != jedis.setnx(key, value)) {<br>            jedis.expire(key, timeOut);<br>        }<br>        returnJedis(jedis);<br>    }</p>
<h3 id="返回指定key序列值"><a href="#返回指定key序列值" class="headerlink" title="返回指定key序列值"></a>返回指定key序列值</h3><p>public long incr(String key) {<br>        Jedis jedis = getJedis();<br>        long number = jedis.incr(key);<br>        returnJedis(jedis);<br>        return number ;<br>    }</p>
<h3 id="按照给处的key顺序查看list-并在找到的第一个非空list的尾部弹出一个元素-没有元素时，会阻塞至超时timeout"><a href="#按照给处的key顺序查看list-并在找到的第一个非空list的尾部弹出一个元素-没有元素时，会阻塞至超时timeout" class="headerlink" title="按照给处的key顺序查看list,并在找到的第一个非空list的尾部弹出一个元素 没有元素时，会阻塞至超时timeout"></a>按照给处的key顺序查看list,并在找到的第一个非空list的尾部弹出一个元素 没有元素时，会阻塞至超时timeout</h3><p>public List&lt;byte[]&gt; brpop(int timeout, byte[]… keys) {<br>        Jedis jedis = getJedis();<br>        List&lt;byte[]&gt; brpop = jedis.brpop(timeout, keys);<br>        returnJedis(jedis);<br>        return brpop;<br>    }</p>
<h3 id="按照给处的key顺序查看list-并在找到的第一个非空list的尾部弹出一个元素-没有元素时，会阻塞至超时timeout-1"><a href="#按照给处的key顺序查看list-并在找到的第一个非空list的尾部弹出一个元素-没有元素时，会阻塞至超时timeout-1" class="headerlink" title="按照给处的key顺序查看list,并在找到的第一个非空list的尾部弹出一个元素 没有元素时，会阻塞至超时timeout"></a>按照给处的key顺序查看list,并在找到的第一个非空list的尾部弹出一个元素 没有元素时，会阻塞至超时timeout</h3><p>public List<String> brpop(int timeout, String… keys) {<br>        Jedis jedis = getJedis();<br>        List<String> brpop = jedis.brpop(timeout, keys);<br>        returnJedis(jedis);<br>        return brpop;<br>    }</String></String></p>
<h3 id="list添加元素并设置过期时间（过期后整个key删除）"><a href="#list添加元素并设置过期时间（过期后整个key删除）" class="headerlink" title="list添加元素并设置过期时间（过期后整个key删除）"></a>list添加元素并设置过期时间（过期后整个key删除）</h3><p>public void lpushValue(byte[] key, byte[] messgaes, String taskId) {<br>        Jedis tmpJedis = getJedis();<br>        tmpJedis.lpush(key, messgaes);<br>        tmpJedis.expire(key, 7200);<br>        tmpJedis.close();<br>    }</p>
<p>public void addListValueWithExpire(String key, int second, String… value) {<br>        if (null == value || value.length == 0) {<br>            return;<br>        }<br>        Jedis jedis = getJedis();<br>        jedis.rpush(key, value);<br>        jedis.expire(key, second);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="为哈希表中字段赋值，并设置key的过期时间-如果哈希表不存在，一个新的将被创建（并设置过期时间）"><a href="#为哈希表中字段赋值，并设置key的过期时间-如果哈希表不存在，一个新的将被创建（并设置过期时间）" class="headerlink" title="为哈希表中字段赋值，并设置key的过期时间 如果哈希表不存在，一个新的将被创建（并设置过期时间）"></a>为哈希表中字段赋值，并设置key的过期时间 如果哈希表不存在，一个新的将被创建（并设置过期时间）</h3><p>public void hsetWithExpire(String key, String field, String value, int expire) {<br>        Jedis jedis = getJedis();<br>        jedis.hset(key, field, value);<br>        jedis.expire(key, expire);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="为哈希表中字段赋值，并设置key的过期时间-如果哈希表不存在，一个新的将被创建"><a href="#为哈希表中字段赋值，并设置key的过期时间-如果哈希表不存在，一个新的将被创建" class="headerlink" title="为哈希表中字段赋值，并设置key的过期时间 如果哈希表不存在，一个新的将被创建"></a>为哈希表中字段赋值，并设置key的过期时间 如果哈希表不存在，一个新的将被创建</h3><p>public void hset(String key, String field, String value) {<br>        Jedis jedis = getJedis();<br>        jedis.hset(key, field, value);<br>        returnJedis(jedis);<br>    }</p>
<h3 id="获取哈希表-key-中，所有的属性名和属性值"><a href="#获取哈希表-key-中，所有的属性名和属性值" class="headerlink" title="获取哈希表 key 中，所有的属性名和属性值"></a>获取哈希表 key 中，所有的属性名和属性值</h3><p>public Map&lt;String, String&gt; hgetAll(String key) {<br>        Jedis jedis = getJedis();<br>        Map&lt;String, String&gt; res = jedis.hgetAll(key);<br>        returnJedis(jedis);<br>        return res;<br>    }</p>
<p>public String hget(String key, String field) {<br>        Jedis jedis = getJedis();<br>        String res = jedis.hget(key, field);<br>        returnJedis(jedis);<br>        return res;<br>    }</p>
<p>public boolean hexists(String key, String field) {<br>        Jedis jedis = getJedis();<br>        boolean res = jedis.hexists(key, field);<br>        returnJedis(jedis);<br>        return res;<br>    }</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/07/02/redis/</url>
    <content><![CDATA[<p>一些整理和记录的redis面试题。</p>
<span id="more"></span>

<h2 id="mashibing"><a href="#mashibing" class="headerlink" title="mashibing"></a>mashibing</h2><h3 id="说一下你在项目中的redis的应用场景？"><a href="#说一下你在项目中的redis的应用场景？" class="headerlink" title="说一下你在项目中的redis的应用场景？"></a>说一下你在项目中的redis的应用场景？</h3><ul>
<li>5大value类型（String、List、hash、Set、Sort Set）</li>
<li>基本上就是缓存（很少有企业当存储使用）</li>
<li>为了是服务无状态（session），延伸思考，看你的项目有哪些数据结构，在单机里需要单机锁，在多机需要分布式锁，抽出来放入redis</li>
<li>无锁化（参考文章）</li>
</ul>
<h3 id="redis是单线程还是多线程？"><a href="#redis是单线程还是多线程？" class="headerlink" title="redis是单线程还是多线程？"></a>redis是单线程还是多线程？</h3><ul>
<li><p>无论什么版本，工作线程就是一个</p>
</li>
<li><p>6.x高版本出现了IO多线程（使用上来说，没有变化）</p>
</li>
<li><p>[去学一下系统IO课]，你要真正的理解面向IO模型编程的时候，有内核的事，从内核把数据搬运到这是第一个不，然后，搬运回来的数据做的计算是第二步，netty</p>
</li>
<li><p>单线程，满足redis的串行原子，只不过IO多线程后，把输入/输出放到更多的线程里去并行，好处如下：1、执行时间缩短，更快；2、更好地压榨系统及硬件的资源（网卡能够高效的使用）</p>
</li>
<li><p>客户端被读取的顺序不能被保障</p>
<p>那个顺序时可以被保障的：在一个连接里，socket里</p>
</li>
</ul>
<p>6.x以前的方式：epoll多路复用器不负责数据的读写，只负责监听读写的事件 redis工作线程只有一条（IO读写和业务处理）；</p>
<p>6.x以后的方式：一个worker线程、多个IO线程（网卡缓存-&gt;内核与queue-&gt;程序空间内存，就是把请求数据尽量搬运到用户空间中）</p>
<p>redis操作式原子的单指令，pipeline，一个客户端的指令集合；lua脚本的方式；事务的执行时期是原子的，失败就是失败，其他继续执行<font color="red">没有回滚</font>。少使用事务，事务内的指令少，尽量快。</p>
<p>事务有queue的概念</p>
<h3 id="redis存在线程安全的问题吗？为什么？"><a href="#redis存在线程安全的问题吗？为什么？" class="headerlink" title="redis存在线程安全的问题吗？为什么？"></a>redis存在线程安全的问题吗？为什么？</h3><ul>
<li>重复2中的单线程串行</li>
<li>redis可以保障内部串行</li>
<li>外界使用的时候要保障，业务上要自行保障顺序。</li>
</ul>
<h3 id="遇到过缓存穿透吗？详细描述一下。"><a href="#遇到过缓存穿透吗？详细描述一下。" class="headerlink" title="遇到过缓存穿透吗？详细描述一下。"></a>遇到过缓存穿透吗？详细描述一下。</h3><h3 id="遇到过缓存击穿吗？详细描述一下。"><a href="#遇到过缓存击穿吗？详细描述一下。" class="headerlink" title="遇到过缓存击穿吗？详细描述一下。"></a>遇到过缓存击穿吗？详细描述一下。</h3><h3 id="如何避免缓存雪崩？"><a href="#如何避免缓存雪崩？" class="headerlink" title="如何避免缓存雪崩？"></a>如何避免缓存雪崩？</h3><p>以上问题，核心就是避免DB元素无效/重复请求，结合图去理解，其中涉及一些架构思想上的提升。</p>
<img src="/2021/07/02/redis/redis.png" class title="redis.png">

<h3 id="Redis是怎么删除过期key的？"><a href="#Redis是怎么删除过期key的？" class="headerlink" title="Redis是怎么删除过期key的？"></a>Redis是怎么删除过期key的？</h3><h3 id="缓存如何回收的？"><a href="#缓存如何回收的？" class="headerlink" title="缓存如何回收的？"></a>缓存如何回收的？</h3><ul>
<li><p>后台在轮询，分段分批的删除哪些过期的key</p>
</li>
<li><p>请求的时候判断是否已经过期了</p>
<p>尽量把内存无用空间回收回来</p>
</li>
</ul>
<h3 id="缓存是如何淘汰的？"><a href="#缓存是如何淘汰的？" class="headerlink" title="缓存是如何淘汰的？"></a>缓存是如何淘汰的？</h3><ul>
<li>内存空间不足的情况下</li>
<li>淘汰机制里有不允许淘汰</li>
<li>lfu、lru、random、ttl</li>
<li>全空间</li>
<li>设置过过期的key的集合中</li>
</ul>
<h3 id="如何进行缓存预热？"><a href="#如何进行缓存预热？" class="headerlink" title="如何进行缓存预热？"></a>如何进行缓存预热？</h3><ul>
<li>提前把数据塞入redis（你知道哪些是热数据吗？肯定不知道）</li>
<li>参考缓存穿透、击穿、雪崩，看图理解</li>
<li>开发逻辑上也要避免差集，会造成穿透、击穿、雪崩</li>
<li>一劳永逸，未来也不怕了</li>
</ul>
<h3 id="数据库与缓存不一致如何解决？"><a href="#数据库与缓存不一致如何解决？" class="headerlink" title="数据库与缓存不一致如何解决？"></a>数据库与缓存不一致如何解决？</h3><ul>
<li>恶心点的，我们可以使用分布式事务来解决（意义不大），顶多读多，写稀有</li>
<li>先写数据库再写redis（redis是缓存，更倾向于稍微的有时差）</li>
<li>还是减少DB的操作</li>
<li>先写MQ，再使用消费程序消费存入redis和数据库中</li>
<li>真的要落地，咋就canal吧</li>
</ul>
<h3 id="简述一下主从不一致的问题？"><a href="#简述一下主从不一致的问题？" class="headerlink" title="简述一下主从不一致的问题？"></a>简述一下主从不一致的问题？</h3><ul>
<li>redis的确默认是弱一致性，异步的同步</li>
<li>锁不能用主从（单实例/分片集群/redlock）==&gt; redisson</li>
<li>在配置中提供了必须有多少个client连接能同步，你可以配置同步因子，趋向于强一致性</li>
<li>wait 2 5000</li>
</ul>
<h3 id="描述一下redis持久化原理？"><a href="#描述一下redis持久化原理？" class="headerlink" title="描述一下redis持久化原理？"></a>描述一下redis持久化原理？</h3><ul>
<li><p>当前线程阻塞服务 不聊</p>
</li>
<li><p>异步后台进程完成持久</p>
<p>fork + cow(copy write)</p>
</li>
</ul>
<h3 id="Redis有哪些持久化方式？"><a href="#Redis有哪些持久化方式？" class="headerlink" title="Redis有哪些持久化方式？"></a>Redis有哪些持久化方式？</h3><ul>
<li><p>RDB，AOF（单机）；主从同步也算持久化</p>
</li>
<li><p>高版本：开启AOF，AOF是可以通过执行日志得到全部内存数据的方式，但是追求性能；</p>
<p>（1）体积变大，重复无效指令 重写，后台用线程把内存的kv生成指令写个新的aof</p>
<p>（2）4.x新增更有性能模式；把重写方式换成直接RDB放到aof文件的头部，比2.1的方法快乐，再追加日志</p>
</li>
</ul>
<h3 id="Redis也打不住了，万级流量会打到DB上，该怎么处理？"><a href="#Redis也打不住了，万级流量会打到DB上，该怎么处理？" class="headerlink" title="Redis也打不住了，万级流量会打到DB上，该怎么处理？"></a>Redis也打不住了，万级流量会打到DB上，该怎么处理？</h3><p>见缓存穿透、击穿、雪崩</p>
<h3 id="为什么使用setnx？"><a href="#为什么使用setnx？" class="headerlink" title="为什么使用setnx？"></a>为什么使用setnx？</h3><ul>
<li>好东西，原子（不存在的情况下完成创建）</li>
<li>如果要做分布式锁，就要用set k v nx ex（不存在，过期时间，避免死锁）</li>
</ul>
<h3 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h3><p>见博文《redis事务》</p>
<h3 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h3><p>见博文《基于redis的java分布式锁实现》</p>
<h3 id="redlock实现分布式锁原理"><a href="#redlock实现分布式锁原理" class="headerlink" title="redlock实现分布式锁原理"></a>redlock实现分布式锁原理</h3><p>参见：<a href="https://www.cnblogs.com/rgcLOVEyaya/p/RGC_LOVE_YAYA_1003days.html">https://www.cnblogs.com/rgcLOVEyaya/p/RGC_LOVE_YAYA_1003days.html</a></p>
<p>多节点redis实现分布式锁算法（redlock）简述：</p>
<ul>
<li>获取当前时间戳</li>
<li>client尝试按照顺序使用相同的key、value获取所有redis服务的锁，在获取锁的过程中获取时间比锁过期时间短很多，这是为了不要过长时间等待已经关闭的redis服务。并且试着获取下一个redis实例（比如：TTL为5s，设置获取锁最多用1s，所以如果一秒内无法获取锁，就放弃获取这个锁，从而尝试获取下个锁）</li>
<li>client通过获取所有能获取的锁后的时间减去第一步的时间，这个时间差要小于TTL时间并且至少有3个redis实例成功获取锁，才算真正的获取锁成功</li>
<li>如果成功获取锁，则锁的真正有效时间是TTL减去第三步的时间差的时间；比如：TTL是5s，获取所有锁用了2s，则真正有效时间为3s（其实应该再减去时钟漂移）</li>
<li>如果客户端由于某些原因失败，便会开始解锁所有redis实例；因为可能已经获取了小于3个锁，否则影响其他client获取锁</li>
</ul>
<h3 id="redission"><a href="#redission" class="headerlink" title="redission"></a>redission</h3><p>目前操作redis数据有以下解决方案</p>
<ul>
<li>redis自带方法</li>
<li>jedis</li>
<li>redission</li>
<li>lettuce</li>
</ul>
<h3 id="redission实现分布式锁原理"><a href="#redission实现分布式锁原理" class="headerlink" title="redission实现分布式锁原理"></a>redission实现分布式锁原理</h3><p>参见：<a href="https://www.cnblogs.com/AnXinliang/p/10019389.html">https://www.cnblogs.com/AnXinliang/p/10019389.html</a></p>
]]></content>
      <categories>
        <category>面试</category>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>mysql集锦</title>
    <url>/2021/07/02/mysql%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="mysql建数据库的字符集与排序规则说明"><a href="#mysql建数据库的字符集与排序规则说明" class="headerlink" title="mysql建数据库的字符集与排序规则说明"></a>mysql建数据库的字符集与排序规则说明</h3><p><a href="https://blog.csdn.net/qq_38224812/article/details/80745868">https://blog.csdn.net/qq_38224812/article/details/80745868</a></p>
<span id="more"></span>

<h3 id="mysql忘记root用户密码找回步骤"><a href="#mysql忘记root用户密码找回步骤" class="headerlink" title="mysql忘记root用户密码找回步骤"></a>mysql忘记root用户密码找回步骤</h3><p><a href="https://www.cnblogs.com/kevin-yang123/p/9923203.html">https://www.cnblogs.com/kevin-yang123/p/9923203.html</a></p>
<p><a href="https://blog.csdn.net/qq_36350532/article/details/79591803">https://blog.csdn.net/qq_36350532/article/details/79591803</a></p>
<p><a href="https://blog.csdn.net/quan278905570/article/details/106153049">https://blog.csdn.net/quan278905570/article/details/106153049</a></p>
<h3 id="mysql给root开启远程访问权限"><a href="#mysql给root开启远程访问权限" class="headerlink" title="mysql给root开启远程访问权限"></a>mysql给root开启远程访问权限</h3><p><a href="https://blog.csdn.net/zhaojie0708/article/details/96335916">https://blog.csdn.net/zhaojie0708/article/details/96335916</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>MVCC多版本并发控制</title>
    <url>/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>​        MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p>
<span id="more"></span>

<pre><code>     MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读。
</code></pre>
<h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h2><p>​        像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p>
<h2 id="快照读（提高数据库的并发查询能力）"><a href="#快照读（提高数据库的并发查询能力）" class="headerlink" title="快照读（提高数据库的并发查询能力）"></a>快照读（提高数据库的并发查询能力）</h2><p>​        像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p>
<h2 id="当前读、快照读、MVCC关系"><a href="#当前读、快照读、MVCC关系" class="headerlink" title="当前读、快照读、MVCC关系"></a>当前读、快照读、MVCC关系</h2><p>​        MVCC多版本并发控制指的是维持一个数据的多个版本，使得读写操作没有冲突，快照读是MySQL为实现MVCC的一个非阻塞读功能。MVCC模块在MySQL中的具体实现是由三个隐式字段，undo日志、read view三个组件来实现的。</p>
<h2 id="MVCC解决的问题"><a href="#MVCC解决的问题" class="headerlink" title="MVCC解决的问题"></a>MVCC解决的问题</h2><p>​        数据库并发场景有三种，分别为：</p>
<p>​        1、读读：不存在任何问题，也不需要并发控制</p>
<p>​        2、读写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读、幻读、不可重复读</p>
<p>​        3、写写：有线程安全问题，可能存在更新丢失问题</p>
<p>​        MVCC是一种用来解决读写冲突的无锁并发控制，也就是为事务分配单项增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照，所以MVCC可以为数据库解决一下问题：</p>
<p>​        1、在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能</p>
<p>​        2、解决脏读、幻读、不可重复读等事务隔离问题，但是不能解决更新丢失问题</p>
<h2 id="MVCC实现原理"><a href="#MVCC实现原理" class="headerlink" title="MVCC实现原理"></a>MVCC实现原理</h2><p>​        mvcc的实现原理主要依赖于记录中的三个隐藏字段，undolog，read view来实现的。</p>
<p>​        <strong>隐藏字段</strong></p>
<p>​        每行记录除了我们自定义的字段外，还有数据库隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段</p>
<p>​        DB_TRX_ID</p>
<p>​        6字节，最近修改事务id，记录创建这条记录或者最后一次修改该记录的事务id</p>
<p>​        DB_ROLL_PTR</p>
<p>​        7字节，回滚指针，指向这条记录的上一个版本,用于配合undolog，指向上一个旧版本</p>
<p>​        DB_ROW_JD</p>
<p>​        6字节，隐藏的主键，如果数据表没有主键，那么innodb会自动生成一个6字节的row_id</p>
<p>​        记录如图所示：</p>
<p>​       <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/%E6%95%B0%E6%8D%AE%E6%A1%88%E4%BE%8B.png" class title="数据案例.png"></p>
<p>​        在上图中，DB_ROW_ID是数据库默认为该行记录生成的唯一隐式主键，DB_TRX_ID是当前操作该记录的事务ID，DB_ROLL_PTR是一个回滚指针，用于配合undo日志，指向上一个旧版本</p>
<p>​        <strong>undo log</strong></p>
<p>​        undolog被称之为回滚日志，表示在进行insert，delete，update操作的时候产生的方便回滚的日志</p>
<p>​        当进行insert操作的时候，产生的undolog只在事务回滚的时候需要，并且在事务提交之后可以被立刻丢弃</p>
<p>​        当进行update和delete操作的时候，产生的undolog不仅仅在事务回滚的时候需要，在快照读的时候也需要，所以不能随便删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除（当数据发生更新和删除操作的时候都只是设置一下老记录的deleted_bit，并不是真正的将过时的记录删除，因为为了节省磁盘空间，innodb有专门的purge线程来清除deleted_bit为true的记录，如果某个记录的deleted_id为true，并且DB_TRX_ID相对于purge线程的read view 可见，那么这条记录一定时可以被清除的）</p>
<p>​        <strong>下面我们来看一下undolog生成的记录链</strong></p>
<p>​        1、假设有一个事务编号为1的事务向表中插入一条记录，那么此时行数据的状态为：</p>
<p>​       <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/1.png" class title="1.png"></p>
<p>​        2、假设有第二个事务编号为2对该记录的name做出修改，改为lisi</p>
<p>​        在事务2修改该行记录数据时，数据库会对该行加排他锁</p>
<p>​        然后把该行数据拷贝到undolog中，作为 旧记录，即在undolog中有当前行的拷贝副本</p>
<p>​        拷贝完毕后，修改该行name为lisi，并且修改隐藏字段的事务id为当前事务2的id，回滚指针指向拷贝到undolog的副本记录中</p>
<p>​        事务提交后，释放锁</p>
<p>​       <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/2.png" class title="2.png"></p>
<p>​        3、假设有第三个事务编号为3对该记录的age做了修改，改为32</p>
<p>​        在事务3修改该行数据的时，数据库会对该行加排他锁</p>
<p>​        然后把该行数据拷贝到undolog中，作为旧纪录，发现该行记录已经有undolog了，那么最新的旧数据作为链表的表头，插在该行记录的undolog最前面</p>
<p>​        修改该行age为32岁，并且修改隐藏字段的事务id为当前事务3的id，回滚指针指向刚刚拷贝的undolog的副本记录</p>
<p>​        事务提交，释放锁</p>
<p>​    <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/3.png" class title="3.png"></p>
<p>​        从上述的一系列图中，大家可以发现，不同事务或者相同事务的对同一记录的修改，会导致该记录的undolog生成一条记录版本线性表，即链表，undolog的链首就是最新的旧记录，链尾就是最早的旧记录。</p>
<p>​        <strong>Read View</strong></p>
<p>​        上面的流程如果看明白了，那么大家需要再深入理解下read view的概念了。</p>
<p>​        Read View是事务进行快照读操作的时候生产的读视图，在该事务执行快照读的那一刻，会生成一个数据系统当前的快照，<font style="color:red;">记录并维护系统当前活跃事务的id，事务的id值是递增的</font>。</p>
<p>​        其实Read View的最大作用是用来做可见性判断的，也就是说当某个事务在执行快照读的时候，对该记录创建一个Read View的视图，把它当作条件去判断当前事务能够看到哪个版本的数据，有可能读取到的是最新的数据，也有可能读取的是当前行记录的undolog中某个版本的数据</p>
<p>​        Read View遵循的可见性算法主要是将要被修改的数据的最新记录中的DB_TRX_ID（当前事务id）取出来，与系统当前其他活跃事务的id去对比，如果DB_TRX_ID跟Read View的属性做了比较，不符合可见性，那么就通过DB_ROLL_PTR回滚指针去取出undolog中的DB_TRX_ID做比较，即遍历链表中的DB_TRX_ID，直到找到满足条件的DB_TRX_ID,这个DB_TRX_ID所在的旧记录就是当前事务能看到的最新老版本数据。</p>
<p>​        Read View的可见性规则如下所示：</p>
<p>​        首先要知道Read View中的三个全局属性：</p>
<p>​        trx_list:一个数值列表，用来维护Read View生成时刻系统正活跃的事务ID（1,2,3）</p>
<p>​        up_limit_id:记录trx_list列表中事务ID最小的ID（1）</p>
<p>​        low_limit_id:Read View生成时刻系统尚未分配的下一个事务ID，（4）</p>
<p>​        具体的比较规则如下：</p>
<p>​        1、首先比较DB_TRX_ID(最新记录) &lt; up_limit_id,如果小于，则当前事务能看到DB_TRX_ID所在的记录，如果大于等于进入下一个判断</p>
<p>​        2、接下来判断DB_TRX_ID &gt;= low_limit_id,如果大于等于则代表DB_TRX_ID所在的记录在Read View生成后才出现的，那么对于当前事务肯定不可见，如果小于，则进入下一步判断</p>
<p>​        3、判断DB_TRX_ID是否在活跃事务中，如果在，则代表在Read View生成时刻，这个事务还是活跃状态，还没有commit，修改的数据，当前事务也是看不到，如果不在，则说明这个事务在Read View生成之前就已经开始commit，那么修改的结果是能够看见的。</p>
<h2 id="MVCC的整体处理流程"><a href="#MVCC的整体处理流程" class="headerlink" title="MVCC的整体处理流程"></a>MVCC的整体处理流程</h2><p>假设有四个事务同时在执行，如下图所示：</p>
<table>
<thead>
<tr>
<th align="center">事务1</th>
<th align="center">事务2</th>
<th align="center">事务3</th>
<th align="center">事务4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">事务开始</td>
<td align="center">事务开始</td>
<td align="center">事务开始</td>
<td align="center">事务开始</td>
</tr>
<tr>
<td align="center">……</td>
<td align="center">……</td>
<td align="center">……</td>
<td align="center">修改且已提交</td>
</tr>
<tr>
<td align="center">进行中</td>
<td align="center">快照读</td>
<td align="center">进行中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">……</td>
<td align="center">……</td>
<td align="center">……</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>从上述表格中，我们可以看到，当事务2对某行数据执行了快照读，数据库为该行数据生成一个Read View视图，可以看到事务1和事务3还在活跃状态，事务4在事务2快照读的前一刻提交了更新，所以，在Read View中记录了系统当前活跃事务1，3，维护在一个列表中。同时可以看到up_limit_id的值为1，而low_limit_id为5，如下图所示：</p>
<p>​    <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/4.png" class title="5.png"></p>
<p>在上述的例子中，只有事务4修改过该行记录，并在事务2进行快照读前，就提交了事务，所以该行当前数据的undolog如下所示：</p>
<p>​    <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/5.png" class title="5.png"></p>
<p>​        当事务2在快照读该行记录的是，会拿着该行记录的DB_TRX_ID去跟up_limit_id,lower_limit_id和活跃事务列表进行比较，判读事务2能看到该行记录的版本是哪个。</p>
<p>​        具体流程如下：先拿该行记录的事务ID（4）去跟Read View中的up_limit_id相比较，判断是否小于，通过对比发现不小于，所以不符合条件，继续判断4是否大于等于low_limit_id,通过比较发现也不大于，所以不符合条件，判断事务4是否处理trx_list列表中，发现不再次列表中，那么符合可见性条件，所以事务4修改后提交的最新结果对事务2 的快照是可见的，因此，事务2读取到的最新数据记录是事务4所提交的版本，而事务4提交的版本也是全局角度的最新版本。如下图所示：</p>
<p>​    <img src="/2021/07/02/MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/6.png" class title="6.png"></p>
<p>当上述的内容都看明白了的话，那么大家就应该能够搞清楚这几个核心概念之间的关系了，下面我们讲一个不同的隔离级别下的快照读的不同。</p>
<h2 id="RC、RR级别下的InnoDB快照读有什么不同"><a href="#RC、RR级别下的InnoDB快照读有什么不同" class="headerlink" title="RC、RR级别下的InnoDB快照读有什么不同"></a>RC、RR级别下的InnoDB快照读有什么不同</h2><p>​        因为Read View生成时机的不同，从而造成RC、RR级别下快照读的结果的不同</p>
<p>​        1、在RR级别下的某个事务的对某条记录的第一次快照读会创建一个快照即Read View,将当前系统活跃的其他事务记录起来，此后在调用快照读的时候，还是使用的是同一个Read View,所以只要当前事务在其他事务提交更新之前使用过快照读，那么之后的快照读使用的都是同一个Read View,所以对之后的修改不可见</p>
<p>​        2、在RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动和事务的快照，这些事务的修改对于当前事务都是不可见的，而早于Read View创建的事务所做的修改均是可见</p>
<p>​        3、在RC级别下，事务中，每次快照读都会新生成一个快照和Read View,这就是我们在RC级别下的事务中可以看到别的事务提交的更新的原因。</p>
<p>​        <strong>总结：在RC隔离级别下，是每个快照读都会生成并获取最新的Read View,而在RR隔离级别下，则是同一个事务中的第一个快照读才会创建Read View，之后的快照读获取的都是同一个Read View.</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>分布式锁实现</title>
    <url>/2021/07/02/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>常用的分布式锁实现一共有三种方式</p>
<ul>
<li><p>基于数据库的</p>
<p><a href="https://blog.csdn.net/u013256816/article/details/92854794">https://blog.csdn.net/u013256816/article/details/92854794</a></p>
</li>
<li><p>基于redis</p>
<p>参见博客《基于redis的java分布式锁实现》</p>
</li>
<li><p>基于zookeeper</p>
<p>待定</p>
</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title>mysql当前读和快照读</title>
    <url>/2021/07/01/mysql%E5%BD%93%E5%89%8D%E8%AF%BB%E5%92%8C%E5%BF%AB%E7%85%A7%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h2><p>MySQL使用MVCC (Multiversion Concurrency Control)机制来保证被读取到数据的一致性，读取数据时不需要对数据进行加锁，且快照读不会被其他事物阻塞。</p>
<h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h2><p>称锁定读(locking read),通过对读取到的数据(索引记录)加锁来保证数据一致性，当前读会对所有扫描到的索引记录进行加锁，无论该记录是否满足WHERE条件都会被加锁。</p>
<p>在读提交和可重复读两种事务隔离级别下，普通的SELECT操作使用“快照读”，不会对数据加锁，也不会被事务阻塞。</p>
<p>在读提交和可重复读两种事务隔离级别下，使用“当前读”的操作包括：</p>
<ul>
<li>SELECT LOCK IN SHARE MODE</li>
<li>SELECT FOR UPDATE</li>
<li>DELETE\UPDATE\INSERT INTO\REPLACE INTO</li>
</ul>
<p>在可重复读事务隔离级别下，“当前读”读取到的时数据库最新的数据，而“快照读”读取到的数据是事务中第一次建立ReadView时的数据+<strong>事务中修改的数据</strong>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/gaogao67/p/10410888.html">MySQL Transaction–快照读和当前读</a></p>
<p><a href="https://mp.weixin.qq.com/s/Is6CbfwwQNeWWRqpGhv_ig">当前读和快照读的区别</a></p>
<p><a href="https://www.jianshu.com/p/32904ee07e56">间隙锁详解</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Stream中findAny()使用</title>
    <url>/2021/06/28/Stream%E4%B8%ADfindAny-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><code>Stream</code>的<code>findAny</code>方法选择该流中的任何元素。</p>
<p><code>findAny</code>方法的行为是不确定的，它可以自由选择流中的任何元素。</p>
<p><code>findAny</code>方法有助于在并行操作中获得最大的性能，但它不能保证每次调用都得到相同的结果。</p>
<p>在<code>java doc</code>中的<code>findAny()</code>方法声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Optional&lt;T&gt; <span class="title">findAny</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>上述方法返回java.util.Optional，一个容器对象，可能包含也可能不包含非空值。当方法在流中选择<code>null</code>值时，<code>findAny</code>抛出<code>NullPointerException</code>。如果每次都要选择第一个元素，请使用<code>Stream</code>的<code>findFirst()</code>方法。</p>
<p>findAny示例：</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>假设我们有一个整数流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>).findAny()</span><br><span class="line">  .ifPresent(s -&gt; System.out.println(s)); </span><br></pre></td></tr></table></figure>

<p>调用<code>findAny</code>方法时，可以自由选择流中的任何元素，这意味着<code>findAny</code>可以给出10、20或30的输出。</p>
<p>再看一组例子</p>
<p><strong>FindAnyDemo1.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.concretepage;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAnyDemo1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Mahesh&quot;</span>, <span class="string">&quot;Suresh&quot;</span>, <span class="string">&quot;Mohit&quot;</span>);</span><br><span class="line">	String output = list.stream()</span><br><span class="line">	  .filter(e -&gt; e.startsWith(<span class="string">&quot;M&quot;</span>))</span><br><span class="line">	  .findAny()</span><br><span class="line">	  .orElse(<span class="string">&quot;NA&quot;</span>);</span><br><span class="line">	System.out.println(output);</span><br><span class="line"></span><br><span class="line">	List&lt;Integer&gt; numList = Arrays.asList(<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>);</span><br><span class="line">	numList.stream()</span><br><span class="line">	  .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">	  .findAny()</span><br><span class="line">	  .ifPresent(e -&gt; System.out.println(e));</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Mahesh</span></span><br><span class="line"><span class="number">22</span> </span><br></pre></td></tr></table></figure>

<p>查看上面的代码行</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">list<span class="selector-class">.stream</span>()<span class="selector-class">.filter</span>(e -&gt; e<span class="selector-class">.startsWith</span>(<span class="string">&quot;M&quot;</span>)) </span><br></pre></td></tr></table></figure>

<p>过滤后流中包含“Mahesh”、“Mohit”。<code>findAny</code>可以自由选择其中任何一个。所以，如果我们多次运行这个例子，输出并不一定每次都相同。</p>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>下面是使用<code>IntStream</code>、<code>LongStream</code>和<code>DoubleStream</code>的<code>findAny</code>方法示例。</p>
<p><strong>FindAnyDemo2.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.concretepage;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.DoubleStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAnyDemo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	IntStream intStream = IntStream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">	intStream.filter(i -&gt; i &gt; <span class="number">20</span>).findAny()</span><br><span class="line">	     .ifPresent(i -&gt; System.out.println(i));</span><br><span class="line"></span><br><span class="line">	LongStream longStream = LongStream.of(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">	longStream.filter(l -&gt; l &lt; <span class="number">250</span>).findAny()</span><br><span class="line">	     .ifPresent(l -&gt; System.out.println(l));</span><br><span class="line"></span><br><span class="line">	DoubleStream doubleStream = DoubleStream.of(<span class="number">100.52</span>, <span class="number">200.55</span>, <span class="number">300.66</span>);</span><br><span class="line">	doubleStream.filter(d -&gt; d &gt; <span class="number">200</span>).findAny()</span><br><span class="line">	     .ifPresent(l -&gt; System.out.println(l));</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">30</span></span><br><span class="line"><span class="attribute">100</span></span><br><span class="line"><span class="attribute">200</span>.<span class="number">55</span></span><br></pre></td></tr></table></figure>

<h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p><code>findAny</code>方法提高了并行流的性能，但我们要知道，重新运行时输出可能会有所不同。</p>
<p><strong>FindAnyDemo3.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.concretepage;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAnyDemo3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	list.add(<span class="keyword">new</span> Employee(<span class="string">&quot;Emp A&quot;</span>, <span class="number">3000</span>));</span><br><span class="line">	list.add(<span class="keyword">new</span> Employee(<span class="string">&quot;Emp B&quot;</span>, <span class="number">4000</span>));</span><br><span class="line">	list.add(<span class="keyword">new</span> Employee(<span class="string">&quot;Emp C&quot;</span>, <span class="number">5000</span>));</span><br><span class="line">	list.add(<span class="keyword">new</span> Employee(<span class="string">&quot;Emp D&quot;</span>, <span class="number">6000</span>));</span><br><span class="line"></span><br><span class="line">	list.parallelStream()</span><br><span class="line">	    .filter(e -&gt; e.getSal() &gt;= <span class="number">4000</span> &amp;&amp; e.getSal() &lt;= <span class="number">5000</span>)</span><br><span class="line">	    .mapToInt(e -&gt; e.getSal())</span><br><span class="line">	    .findAny()</span><br><span class="line">		.ifPresent(s -&gt; System.out.println(s));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sal;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.sal = sal;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Sets and Gets</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5000 </span></span><br></pre></td></tr></table></figure>

<h2 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h2><p>如果<code>findAny</code>方法选择<code>null</code>值，则抛出<code>NullPointerException</code>。</p>
<p><strong>FindAnyDemo4.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.concretepage;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAnyDemo4</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Stream.of(<span class="keyword">null</span>, <span class="string">&quot;AA&quot;</span>).</span><br><span class="line">	    findAny().ifPresent(s -&gt; System.out.println(s));</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出将为NullPointerException。</p>
<p>参考：<a href="https://www.concretepage.com/java/java-8/java-stream-findany">https://www.concretepage.com/java/java-8/java-stream-findany</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8</category>
      </categories>
  </entry>
  <entry>
    <title>Java9-Java16新特性介绍</title>
    <url>/2021/06/25/Java9-Java16%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><strong>Java9（2017年9月）</strong></p>
<ul>
<li>接口里可以添加私有接口</li>
<li>匿名内部类也支持钻石（diamond）运算符</li>
<li>增强的 try-with-resources</li>
</ul>
<span id="more"></span>

<p><strong>Java10（2018年3月）</strong></p>
<ul>
<li>局部变量的自动类型推断（var）</li>
</ul>
<p><strong>Java11（2018年9月）</strong></p>
<ul>
<li>Lambda 中的自动类型推断（var）</li>
<li>javac + java 命令一把梭</li>
<li>Java Flight Recorder 登陆 OpenJDK</li>
</ul>
<p><strong>Java12（2019年3月）</strong></p>
<ul>
<li>更简洁的 switch 语法</li>
<li>instanceof + 类型强转一步到位</li>
</ul>
<p><strong>Java13（2019年9月）</strong></p>
<ul>
<li>switch 语法再增强</li>
<li>文本块（Text Block）的支持</li>
</ul>
<p><strong>Java14（2020年3月）</strong></p>
<ul>
<li>新增的 record 类型，干掉复杂的 POJO 类</li>
<li>更直观的 NullPointerException 提示</li>
<li>安全的堆外内存读写接口，别再玩 Unsafe 的骚操作了</li>
<li>新增的 jpackage 打包工具，直接打包二进制程序，再也不用装 JRE 了</li>
</ul>
<p><strong>Java15（2020年9月）</strong></p>
<ul>
<li>ZGC 和 Shenandoah 两款垃圾回收器正式登陆</li>
<li>封闭（Sealed ）类</li>
</ul>
<p><strong>Java16（2021年3月）</strong></p>
<ul>
<li>JAVA 16 在用户可见的地方变化并不多，基本都是 14/15 的实验性内容，到了 16 正式</li>
</ul>
<p>参考链接：<a href="https://mp.weixin.qq.com/s/LsK0V1cR8H8jCCKAODVJ3w">https://mp.weixin.qq.com/s/LsK0V1cR8H8jCCKAODVJ3w</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>项目工程</title>
    <url>/2021/06/24/%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>记录在各个集成开发环境中新建项目或者导入项目的流程、注意点，以及包含各个开发软件的使用技巧。</p>
<span id="more"></span>

<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="IDEA（2021）新建web项目"><a href="#IDEA（2021）新建web项目" class="headerlink" title="IDEA（2021）新建web项目"></a>IDEA（2021）新建web项目</h3><p><a href="https://blog.csdn.net/xcj2317496650/article/details/115936438">https://blog.csdn.net/xcj2317496650/article/details/115936438</a></p>
<p><a href="https://www.jianshu.com/p/d1c053d14dbe">https://www.jianshu.com/p/d1c053d14dbe</a></p>
<h3 id="IDEA-导入web项目"><a href="#IDEA-导入web项目" class="headerlink" title="IDEA 导入web项目"></a>IDEA 导入web项目</h3><p><a href="https://cloud.tencent.com/developer/article/1671420">https://cloud.tencent.com/developer/article/1671420</a></p>
<p><a href="https://blog.csdn.net/qq_45765882/article/details/104300984">https://blog.csdn.net/qq_45765882/article/details/104300984</a></p>
<h3 id="idea启动tomcat的中文乱码问题"><a href="#idea启动tomcat的中文乱码问题" class="headerlink" title="idea启动tomcat的中文乱码问题"></a>idea启动tomcat的中文乱码问题</h3><p><a href="https://blog.csdn.net/weixin_33941350/article/details/93449685">https://blog.csdn.net/weixin_33941350/article/details/93449685</a></p>
<p><a href="https://blog.csdn.net/qq1332479771/article/details/90667209">https://blog.csdn.net/qq1332479771/article/details/90667209</a></p>
<h4 id="乱码解决"><a href="#乱码解决" class="headerlink" title="乱码解决"></a>乱码解决</h4><p>在IDEA界面 Help-&gt;Edit Custom VM Options…打开idea64.exe.vmoptions文件，在最后两行添加：</p>
<p>-Dfile.encoding=UTF-8</p>
<p>-Dconsole.encoding=UTF-8</p>
<h3 id="intellij-idea-的全局搜索快捷键方法"><a href="#intellij-idea-的全局搜索快捷键方法" class="headerlink" title="intellij idea 的全局搜索快捷键方法"></a>intellij idea 的全局搜索快捷键方法</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl+H</td>
<td>查看类的继承关系，例如HashMap的父类是AbstractMap，子类则有一大堆。</td>
</tr>
<tr>
<td>Shift+Shift</td>
<td>搜索任何东西，功能非常强大，可搜索类、资源、配置项、方法等，还能搜索路径。其中搜索路径非常实用，例如你写了一个功能叫hello，在java，js，css，jsp中都有hello的文件夹，那我们可以搜索”hello/“找到路径中包含hello的文件夹</td>
</tr>
<tr>
<td>Ctrl+Alt+B</td>
<td>查看类的子类实现，Ctrl+Alt+鼠标左键也有此功能</td>
</tr>
<tr>
<td>Alt+F7</td>
<td>查找类或方法在哪被使用，ctrl+鼠标左键也有此功能</td>
</tr>
<tr>
<td>Ctrl+F/Ctrl+Shift+F</td>
<td>Ctrl+F是在本页查找，<span style="color:red;">Ctrl+Shift+F</span>是全局查找</td>
</tr>
<tr>
<td>Ctrl+Alt+O</td>
<td>类似eclipse中的ctrl＋shift＋o（移除未使用的类名的import引用）</td>
</tr>
<tr>
<td>Ctrl+F12</td>
<td>类似eclipse中的Ctrl+O</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>文件搜索（<strong>强大</strong>）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>jquery中使用ajax</title>
    <url>/2021/06/22/jquery%E4%B8%AD%E4%BD%BF%E7%94%A8ajax/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文阐述了使用jquery中的ajax来调用后台服务接口，调用方式包含get、post、json。</p>
<span id="more"></span>

<h2 id="服务控制层代码"><a href="#服务控制层代码" class="headerlink" title="服务控制层代码"></a>服务控制层代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月15日 下午12:38:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController2</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/ajax/get&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">get</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">		map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/ajax/post&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">post</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">		map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/ajax/json&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">json</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;name&quot;</span>, student.getName());</span><br><span class="line">		map.put(<span class="string">&quot;age&quot;</span>, student.getAge());</span><br><span class="line">		<span class="keyword">return</span> map;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> String name;</span><br><span class="line">		<span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.name = name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> age;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.age = age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ajax调用"><a href="#ajax调用" class="headerlink" title="ajax调用"></a>ajax调用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// get请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*$.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                type: &quot;GET&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                url: &quot;http://127.0.0.1:10000/ajax/get&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                dataType: &#x27;json&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                data: &#123;name: &quot;jingchenyong1&quot;, age: 29&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                success: function (result) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    alert(JSON.stringify(result));</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;);*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// post请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:10000/ajax/post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;jingchenyong1&quot;</span>, <span class="attr">age</span>: <span class="number">29</span>&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="built_in">JSON</span>.stringify(result));</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// json请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*$.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                type: &quot;POST&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                url: &quot;http://127.0.0.1:10000/ajax/json&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                contentType: &quot;application/json;charset=utf-8&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                dataType: &#x27;json&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                data: JSON.stringify(&#123;name: &quot;jingchenyong1&quot;, age: 29&#125;),</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                success: function (result) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    alert(JSON.stringify(result));</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;);*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// ajax请求文件</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/*$(&quot;#btn&quot;).click(function () &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    url: &quot;my.txt&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    success: functin (result) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    $(&quot;#div1&quot;).hotml(result);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;);*/</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ajax中参数名描述（部分）"><a href="#ajax中参数名描述（部分）" class="headerlink" title="ajax中参数名描述（部分）"></a>ajax中参数名描述（部分）</h2><table>
<thead>
<tr>
<th>名称</th>
<th>值/描述</th>
</tr>
</thead>
<tbody><tr>
<td>contentType</td>
<td>发送数据到服务器时所使用的内容类型。默认是：“application/x-www-form-urlencoded”</td>
</tr>
<tr>
<td>type</td>
<td>规定请求的类型（GET或POST）</td>
</tr>
<tr>
<td>url</td>
<td>规定发送请求的URL。默认是当前页面</td>
</tr>
<tr>
<td>dataType</td>
<td>预期的服务器响应的数据类型</td>
</tr>
<tr>
<td>data</td>
<td>规定要发送到服务器的数据</td>
</tr>
<tr>
<td>success(result, status, xhr)</td>
<td>当请求成功时运行的函数</td>
</tr>
<tr>
<td>error(result, status, xhr)</td>
<td>如果请求失败要运行的函数</td>
</tr>
</tbody></table>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>项目中一般讲ajax调用封装成对象，然后通过函数形式调用。</p>
<p>module.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:10000/ajax/get&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 返回json对象</span></span><br><span class="line">            <span class="attr">data</span>: data</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">post</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:10000/ajax/post&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: data</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">json</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:10000/ajax/json&quot;</span>,</span><br><span class="line">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;module.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">getParam</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&quot;jingchenyong2&quot;</span>, <span class="attr">age</span>: <span class="number">29</span>&#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">module</span>.get(getParam()).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res));</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">module</span>.post(getParam()).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res));</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#btn3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">module</span>.json(getParam()).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res));</span></span><br><span class="line"><span class="javascript">                    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            bindEvent();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>get请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>post请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>json请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="when多请求调用"><a href="#when多请求调用" class="headerlink" title="$.when多请求调用"></a>$.when多请求调用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;module.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">getParam</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&quot;jingchenyong2&quot;</span>, <span class="attr">age</span>: <span class="number">29</span>&#125;;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#btn4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $.when(<span class="built_in">module</span>.get(getParam()),</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">module</span>.post(getParam()),</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">module</span>.json(getParam())).then(<span class="function"><span class="keyword">function</span> (<span class="params">ajax1, ajax2, ajax3</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> res1 = ajax1[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res1));</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> res2 = ajax2[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res2));</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> res3 = ajax3[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                        alert(<span class="built_in">JSON</span>.stringify(res3));</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            bindEvent();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span>&gt;</span>多请求调用<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>jquery</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript集锦</title>
    <url>/2021/06/22/JavaScript%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="如何判断对象的类型？"><a href="#如何判断对象的类型？" class="headerlink" title="如何判断对象的类型？"></a>如何判断对象的类型？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;jingchenyong&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(student);</span><br><span class="line">alert(<span class="keyword">typeof</span> json); <span class="comment">// string</span></span><br><span class="line">alert(<span class="keyword">typeof</span> (<span class="built_in">JSON</span>.parse(json)));<span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="JSON对象和字符串如何互转？"><a href="#JSON对象和字符串如何互转？" class="headerlink" title="JSON对象和字符串如何互转？"></a>JSON对象和字符串如何互转？</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>:<span class="string">&quot;jingchenyong&quot;</span>,</span><br><span class="line">   <span class="string">&quot;age&quot;</span>: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(student);</span><br><span class="line">alert(json); </span><br><span class="line">alert(<span class="built_in">JSON</span>.parse(json));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>并发CPU缓存问题——伪共享和内存行</title>
    <url>/2021/06/22/%E5%B9%B6%E5%8F%91CPU%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94%E4%BC%AA%E5%85%B1%E4%BA%AB%E5%92%8C%E5%86%85%E5%AD%98%E8%A1%8C/</url>
    <content><![CDATA[<p>CPU缓存读取内存数据一次读取一行，32或64字节</p>
<p>伪共享指的是在多个线程同时读写同一个缓存行的不同变量的时候，尽管这些变量之间没有任何关系，但是在多个线程之间仍然需要同步，从而导致性能下降的情况。在对称多处理器结构的系统中，伪共享是影响性能的主要因素之一，由于很难通过走查代码的方式定位伪共享的问题，因此，大家把伪共享称为“性能杀手”。</p>
<span id="more"></span>

<img src="/2021/06/22/%E5%B9%B6%E5%8F%91CPU%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94%E4%BC%AA%E5%85%B1%E4%BA%AB%E5%92%8C%E5%86%85%E5%AD%98%E8%A1%8C/cache.png" class title="图片">

<p>从上图看到，线程1在CPU核心1上读写变量X，同时线程2在CPU核心2上读写变量Y，不幸的是变量X和变量Y在同一个缓存行上，每一个线程为了对缓存行进行读写，都要竞争并获得缓存行的读写权限，如果线程2在CPU核心2上获得了对缓存行进行读写的权限，那么线程1必须刷新它的缓存后才能在核心1上获得读写权限，这导致这个缓存行在不同的线程间多次通过L3缓存来交换最新的拷贝数据，这极大的影响了多核心CPU的性能。如果这些CPU核心在不同的插槽上，性能会变得更糟。</p>
<p>可以利用填充内存行隔离内存，从而避免伪共享带来的缓存失效问题。</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
  </entry>
  <entry>
    <title>Spring系列第56篇:一文搞懂spring到底为什么要用三级缓存?</title>
    <url>/2021/06/21/Spring%E7%B3%BB%E5%88%97%E7%AC%AC56%E7%AF%87-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82spring%E5%88%B0%E5%BA%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/pBo5NkBwPwA_WATGe2xugQ">https://mp.weixin.qq.com/s/pBo5NkBwPwA_WATGe2xugQ</a></p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>Spring高手系列</category>
      </categories>
  </entry>
  <entry>
    <title>电子书</title>
    <url>/2021/06/19/%E7%94%B5%E5%AD%90%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="最新-1000-多本计算机电子书免费下载（github）"><a href="#最新-1000-多本计算机电子书免费下载（github）" class="headerlink" title="最新 1000 多本计算机电子书免费下载（github）"></a>最新 1000 多本计算机电子书免费下载（github）</h2><p><a href="https://github.com/itdevbooks/pdf">https://github.com/itdevbooks/pdf</a></p>
<p>本github整理了超过1000本计算机电子书，供免费下载使用。</p>
<span id="more"></span>

<img src="/2021/06/19/%E7%94%B5%E5%AD%90%E4%B9%A6/%E7%94%B5%E5%AD%90%E4%B9%A601.png" class title="电子书">

<h2 id="程序人生-阅读快乐"><a href="#程序人生-阅读快乐" class="headerlink" title="程序人生 阅读快乐"></a>程序人生 阅读快乐</h2><p><a href="https://www.yuque.com/winforlife/vgzph9">https://www.yuque.com/winforlife/vgzph9</a></p>
<h2 id="个人电子书（语雀）"><a href="#个人电子书（语雀）" class="headerlink" title="个人电子书（语雀）"></a>个人电子书（语雀）</h2><h3 id="深入浅出Kubernetes"><a href="#深入浅出Kubernetes" class="headerlink" title="深入浅出Kubernetes"></a>深入浅出Kubernetes</h3><p><a href="https://yq.aliyun.com/download/4007">https://yq.aliyun.com/download/4007</a></p>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>Java泛型通配符extends T与super T</title>
    <url>/2021/06/19/Java%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6extends-T%E4%B8%8Esuper-T/</url>
    <content><![CDATA[<p>本文主要讲解Java泛型通配符&lt;? extends T&gt;与&lt;? super T&gt;的区别与使用。</p>
<span id="more"></span>

<h2 id="关键字说明"><a href="#关键字说明" class="headerlink" title="关键字说明"></a>关键字说明</h2><ul>
<li>? 通配符类型</li>
<li><? extends T> 表示类型的上界，表示参数化类型的可能是T 或是 T的子类</li>
<li><? super T> 表示类型下界（Java Core中叫超类型限定），表示参数化类型是此类型的超类型（父类型），直至Object</li>
</ul>
<h2 id="extends示例"><a href="#extends示例" class="headerlink" title="extends示例"></a>extends示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Food</span></span>&#123;&#125;  </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> <span class="keyword">extends</span> <span class="title">Food</span></span>&#123;&#125;  </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;&#125;  </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RedApple</span> <span class="keyword">extends</span> <span class="title">Apple</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">List&lt;? extends Fruit&gt; flist = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();  </span><br><span class="line"><span class="comment">// complie error:  </span></span><br><span class="line"><span class="comment">// flist.add(new Apple());  </span></span><br><span class="line"><span class="comment">// flist.add(new Fruit());  </span></span><br><span class="line"><span class="comment">// flist.add(new Object());  </span></span><br><span class="line">flist.add(<span class="keyword">null</span>); <span class="comment">// only work for null </span></span><br></pre></td></tr></table></figure>

<p>List&lt;? extends Frut&gt; 表示 “具有任何从Fruit继承类型的列表”，编译器无法确定List所持有的类型，所以无法安全的向其中添加对象。可以添加null,因为null 可以表示任何类型。所以List 的add 方法不能添加任何有意义的元素，但是可以接受现有的子类型List<Apple> 赋值。 </Apple></p>
<p>Fruit fruit = flist.get(0);  </p>
<p>Apple apple = (Apple)flist.get(0);</p>
<p>由于，其中放置是从Fruit中继承的类型，所以可以安全地取出Fruit类型。</p>
<p>flist.contains(new Fruit());  </p>
<p>flist.contains(new Apple());  </p>
<p>在使用Collection中的contains 方法时，接受Object 参数类型，可以不涉及任何通配符，编译器也允许这么调用。</p>
<h2 id="super示例"><a href="#super示例" class="headerlink" title="super示例"></a>super示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Fruit&gt; flist = <span class="keyword">new</span> ArrayList&lt;Fruit&gt;();  </span><br><span class="line">flist.add(<span class="keyword">new</span> Fruit());  </span><br><span class="line">flist.add(<span class="keyword">new</span> Apple());  </span><br><span class="line">flist.add(<span class="keyword">new</span> RedApple());  </span><br><span class="line"><span class="comment">// compile error:  </span></span><br><span class="line">List&lt;? <span class="keyword">super</span> Fruit&gt; flist = <span class="keyword">new</span> ArrayList&lt;Apple&gt;();  </span><br></pre></td></tr></table></figure>

<p>List&lt;? super Fruit&gt; 表示“具有任何Fruit超类型的列表”，列表的类型至少是一个 Fruit 类型，因此可以安全的向其中添加Fruit 及其子类型。由于List&lt;? super Fruit&gt;中的类型可能是任何Fruit 的超类型，无法赋值为Fruit的子类型Apple的List<Apple>.  </Apple></p>
<p>// compile error:  </p>
<p>Fruit item = flist.get(0);  </p>
<p>因为，List&lt;? super Fruit&gt;中的类型可能是任何Fruit 的超类型，所以编译器无法确定get返回的对象类型是Fruit,还是Fruit的父类Food 或 Object.  </p>
<p>小结  </p>
<p>extends 可用于的返回类型限定，不能用于参数类型限定。  </p>
<p>super 可用于参数类型限定，不能用于返回类型限定。  </p>
<p>带有super超类型限定的通配符可以向泛型对易用写入，带有extends子类型限定的通配符可以向泛型对象读取。——《Core Java》</p>
<p>原文链接：</p>
<p><a href="https://blog.csdn.net/jiesa/article/details/54926353">https://blog.csdn.net/jiesa/article/details/54926353</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/06/18/git/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="删除本地文件后-Git-pull从远程仓库重新获取不到解决办法"><a href="#删除本地文件后-Git-pull从远程仓库重新获取不到解决办法" class="headerlink" title="删除本地文件后 Git pull从远程仓库重新获取不到解决办法"></a>删除本地文件后 Git pull从远程仓库重新获取不到解决办法</h3><p>删除本地文件后，想从远程仓库中重新新Pull最新代码，但是执行了git pull命令后始终无法拉取下来，提示 Already up-to-date.<br>原因：当前本地库处于另一个分支中，需将本分支发Head重置至develop，然后git 强行pull并覆盖本地文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之八—Google_Protobuf编解码</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%85%AB%E2%80%94Google-Protobuf%E7%BC%96%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<p>Protobuf是一个灵活、高效、结构化的数据序列化框架，相比于XML等传统的序列化工具，它更小、更快、更简单。Protobuf支持数据结构化一次可以到处使用，甚至跨语言使用，通过代码生成工具可以自动生成不同语言版本的源代码，甚至可以在使用不同版本的数据结构进程间进行数据传递，实现数据结构的前向兼容。</p>
<span id="more"></span>

<p>相关工具下载：<a href="https://gitee.com/ujshenry/g-rpc-demo">https://gitee.com/ujshenry/g-rpc-demo</a></p>
<h2 id="Protobuf开发环境搭建"><a href="#Protobuf开发环境搭建" class="headerlink" title="Protobuf开发环境搭建"></a>Protobuf开发环境搭建</h2><p>对protoc-3.1.0-win32.zip进行解压，使用protoc.exe工具根据.proto文件生成代码，定义SubscribeReq.proto和SubscribeResp.proto，数据文件定义如下：</p>
<p>SubscribeReq.proto</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.henry.netty.middle.ex2&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;SubscribeReqProto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SubscribeReq</span></span>&#123;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">int32</span> subReqID = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> userName = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> productName = <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">repeated</span> <span class="built_in">string</span> address = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SubscribeResp.proto</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.henry.netty.middle.ex2&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;SubscribeRespProto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SubscribeResp</span></span>&#123;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">int32</span> subReqID = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> respCode = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">required</span> <span class="built_in">string</span> desc = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用protoc.exe命令行生成Java代码：</p>
<p>protoc.exe –java_out=.\src .\netty*.java</p>
<p>将生成的.java文件放入到eclipse工程中，并且，添加相关依赖。</p>
<img src="/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%85%AB%E2%80%94Google-Protobuf%E7%BC%96%E8%A7%A3%E7%A0%81/0033.jpg" class title="工程结构">

<p>至此，环境已搭建完毕。</p>
<h2 id="运行Protobuf例程"><a href="#运行Protobuf例程" class="headerlink" title="运行Protobuf例程"></a>运行Protobuf例程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSubscribeReqProto</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encode(SubscribeReqProto.SubscribeReq req) &#123;</span><br><span class="line">		<span class="keyword">return</span> req.toByteArray();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SubscribeReqProto.<span class="function">SubscribeReq <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SubscribeReqProto.SubscribeReq.parseFrom(body);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SubscribeReqProto.<span class="function">SubscribeReq <span class="title">createSubscribeReq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		SubscribeReqProto.SubscribeReq.Builder builder = SubscribeReqProto.SubscribeReq.newBuilder();</span><br><span class="line">		builder.setSubReqID(<span class="number">1</span>);</span><br><span class="line">		builder.setUserName(<span class="string">&quot;Lilinfeng&quot;</span>);</span><br><span class="line">		builder.setProductName(<span class="string">&quot;Netty Book&quot;</span>);</span><br><span class="line">		List&lt;String&gt; address = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		address.add(<span class="string">&quot;NanJing YuHuaTai&quot;</span>);</span><br><span class="line">		address.add(<span class="string">&quot;BeiJing LiuLiChang&quot;</span>);</span><br><span class="line">		address.add(<span class="string">&quot;ShenZhen HongShuLin&quot;</span>);</span><br><span class="line">		builder.addAllAddress(address);</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">		SubscribeReqProto.SubscribeReq req = createSubscribeReq();</span><br><span class="line">		System.out.println(<span class="string">&quot;Before encode : &quot;</span> + req.toString());</span><br><span class="line">		SubscribeReqProto.SubscribeReq req2 = decode(encode(req));</span><br><span class="line">		System.out.println(<span class="string">&quot;After decode : &quot;</span> + req.toString());</span><br><span class="line">		System.out.println(<span class="string">&quot;Assert equal : --&gt; &quot;</span> + req2.equals(req));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Before encode : subReqID: <span class="number">1</span></span><br><span class="line"><span class="symbol">userName:</span> <span class="string">&quot;Lilinfeng&quot;</span></span><br><span class="line"><span class="symbol">productName:</span> <span class="string">&quot;Netty Book&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;NanJing YuHuaTai&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;BeiJing LiuLiChang&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;ShenZhen HongShuLin&quot;</span></span><br><span class="line"></span><br><span class="line">After decode : subReqID: <span class="number">1</span></span><br><span class="line"><span class="symbol">userName:</span> <span class="string">&quot;Lilinfeng&quot;</span></span><br><span class="line"><span class="symbol">productName:</span> <span class="string">&quot;Netty Book&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;NanJing YuHuaTai&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;BeiJing LiuLiChang&quot;</span></span><br><span class="line"><span class="symbol">address:</span> <span class="string">&quot;ShenZhen HongShuLin&quot;</span></span><br><span class="line"></span><br><span class="line">Assert equal : --&gt; <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="开发支持Protobuf的Netty服务端和客户端"><a href="#开发支持Protobuf的Netty服务端和客户端" class="headerlink" title="开发支持Protobuf的Netty服务端和客户端"></a>开发支持Protobuf的Netty服务端和客户端</h2><h3 id="Protobuf版本的图书订购服务端开发"><a href="#Protobuf版本的图书订购服务端开发" class="headerlink" title="Protobuf版本的图书订购服务端开发"></a>Protobuf版本的图书订购服务端开发</h3><p>SubReqServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubReqServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">							ch.pipeline().addLast(<span class="keyword">new</span> ProtobufVarint32FrameDecoder());</span><br><span class="line">                            <span class="comment">// 这里添加的是SubscribeReqProto.SubscribeReq因为服务端对请求进行解码</span></span><br><span class="line">							ch.pipeline().addLast(<span class="keyword">new</span> ProtobufDecoder(SubscribeReqProto.SubscribeReq.getDefaultInstance()));</span><br><span class="line">							ch.pipeline().addLast(<span class="keyword">new</span> ProtobufVarint32LengthFieldPrepender());</span><br><span class="line">							ch.pipeline().addLast(<span class="keyword">new</span> ProtobufEncoder());</span><br><span class="line">							ch.pipeline().addLast(<span class="keyword">new</span> SubReqServerHandler());</span><br><span class="line">						&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> SubReqServer().bind(port);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SubReqServerHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandler.Sharable;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Sharable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubReqServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		SubscribeReqProto.SubscribeReq req = (SubscribeReqProto.SubscribeReq) msg;</span><br><span class="line">		<span class="keyword">if</span> (<span class="string">&quot;henry&quot;</span>.equalsIgnoreCase(req.getUserName())) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Service accept client subscribe req : [&quot;</span> + req.toString() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">			ctx.writeAndFlush(resp(req.getSubReqID()));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SubscribeRespProto.<span class="function">SubscribeResp <span class="title">resp</span><span class="params">(<span class="keyword">int</span> subReqID)</span> </span>&#123;</span><br><span class="line">		SubscribeRespProto.SubscribeResp.Builder builder = SubscribeRespProto.SubscribeResp.newBuilder();</span><br><span class="line">		builder.setSubReqID(subReqID);</span><br><span class="line">		builder.setRespCode(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		builder.setDesc(<span class="string">&quot;Netty book order succeed, 3 days later, sent to the designated address&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();<span class="comment">// 发生异常，关闭链路</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Protobuf版本的图书订购客户端开发"><a href="#Protobuf版本的图书订购客户端开发" class="headerlink" title="Protobuf版本的图书订购客户端开发"></a>Protobuf版本的图书订购客户端开发</h3><p>SubReqClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubReqClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">// 配置客户端NIO线程组</span></span><br><span class="line">	EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	    Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">	    b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">		    .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">		    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span></span></span><br><span class="line"><span class="function">				<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			    ch.pipeline().addLast(<span class="keyword">new</span> ProtobufVarint32FrameDecoder());</span><br><span class="line">                <span class="comment">// 这里添加的是SubscribeRespProto.SubscribeResp因为客户端对响应进行解码</span></span><br><span class="line">			    ch.pipeline().addLast(<span class="keyword">new</span> ProtobufDecoder(SubscribeRespProto.SubscribeResp.getDefaultInstance()));</span><br><span class="line">			    ch.pipeline().addLast(<span class="keyword">new</span> ProtobufVarint32LengthFieldPrepender());</span><br><span class="line">			    ch.pipeline().addLast(<span class="keyword">new</span> ProtobufEncoder());</span><br><span class="line">			    ch.pipeline().addLast(<span class="keyword">new</span> SubReqClientHandler());</span><br><span class="line">			&#125;</span><br><span class="line">		    &#125;);</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 发起异步连接操作</span></span><br><span class="line">	    ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 当代客户端链路关闭</span></span><br><span class="line">	    f.channel().closeFuture().sync();</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	    <span class="comment">// 优雅退出，释放NIO线程组</span></span><br><span class="line">	    group.shutdownGracefully();</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> SubReqClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SubReqClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubReqClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Creates a client-side handler.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubReqClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			ctx.write(subReq(i));</span><br><span class="line">		&#125;</span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SubscribeReqProto.<span class="function">SubscribeReq <span class="title">subReq</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		SubscribeReqProto.SubscribeReq.Builder builder = SubscribeReqProto.SubscribeReq.newBuilder();</span><br><span class="line">		builder.setSubReqID(i);</span><br><span class="line">		builder.setUserName(<span class="string">&quot;henry&quot;</span>);</span><br><span class="line">		builder.setProductName(<span class="string">&quot;Netty Book For Protobuf&quot;</span>);</span><br><span class="line">		List&lt;String&gt; address = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		address.add(<span class="string">&quot;NanJing YuHuaTai&quot;</span>);</span><br><span class="line">		address.add(<span class="string">&quot;BeiJing LiuLiChang&quot;</span>);</span><br><span class="line">		address.add(<span class="string">&quot;ShenZhen HongShuLin&quot;</span>);</span><br><span class="line">		builder.addAllAddress(address);</span><br><span class="line">		<span class="keyword">return</span> builder.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Receive server response : [&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p>服务端</p>
<p>四月 27, 2021 3:36:33 下午 io.netty.handler.logging.LoggingHandler channelRegistered<br>信息: [id: 0x665bab4f] REGISTERED<br>四月 27, 2021 3:36:33 下午 io.netty.handler.logging.LoggingHandler bind<br>信息: [id: 0x665bab4f] BIND: 0.0.0.0/0.0.0.0:8080<br>四月 27, 2021 3:36:33 下午 io.netty.handler.logging.LoggingHandler channelActive<br>信息: [id: 0x665bab4f, /0:0:0:0:0:0:0:0:8080] ACTIVE<br>四月 27, 2021 3:36:37 下午 io.netty.handler.logging.LoggingHandler channelRead<br>信息: [id: 0x665bab4f, /0:0:0:0:0:0:0:0:8080] RECEIVED: [id: 0x65781c7b, /127.0.0.1:59928 =&gt; /127.0.0.1:8080]<br>Service accept client subscribe req : [subReqID: 0<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 1<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 2<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 3<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 4<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 5<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 6<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 7<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 8<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]<br>Service accept client subscribe req : [subReqID: 9<br>userName: “henry”<br>productName: “Netty Book For Protobuf”<br>address: “NanJing YuHuaTai”<br>address: “BeiJing LiuLiChang”<br>address: “ShenZhen HongShuLin”<br>]</p>
<p>客户端</p>
<p>Receive server response : [subReqID: 0<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 1<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 2<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 3<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 4<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 5<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 6<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 7<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 8<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]<br>Receive server response : [subReqID: 9<br>respCode: “0”<br>desc: “Netty book order succeed, 3 days later, sent to the designated address”<br>]</p>
<h3 id="Protobuf的使用注意事项"><a href="#Protobuf的使用注意事项" class="headerlink" title="Protobuf的使用注意事项"></a>Protobuf的使用注意事项</h3><p>ProtobufDecoder仅仅负责解码，它不支持读半包。因此，在ProtobufDecoder前面，一定要有能够处理读半包的解码器，有以下三种方式可以选择：</p>
<p>（1）使用Netty提供的ProtobufVarint32FrameDecoder，它可以处理半包消息；</p>
<p>（2）继承Netty提供的通用半包解码器LengthFieldBasedFrameDecoder；</p>
<p>（3）继承ByteToMessageDecoder类，自己处理半包消息。</p>
<p>如果你只使用ProtobufDecoder解码器而忽略对半包消息的处理，程序是不能正常工作的。</p>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之七—MessagePack编解码</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%83%E2%80%94MessagePack%E7%BC%96%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<p>MessagePack是一个高效的二进制序列化框架，它像JSON一样支持不同语言间的数据交换，但是它的性能更快，序列化之后的码流也更小。</p>
<span id="more"></span>

<h2 id="MesaagePack-Java-API介绍"><a href="#MesaagePack-Java-API介绍" class="headerlink" title="MesaagePack Java API介绍"></a>MesaagePack Java API介绍</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.msgpack<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>msgpack<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msgpack.MessagePack;</span><br><span class="line"><span class="keyword">import</span> org.msgpack.template.Templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessagePackTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		List&lt;String&gt; src = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		src.add(<span class="string">&quot;msgpack&quot;</span>);</span><br><span class="line">		src.add(<span class="string">&quot;kumofs&quot;</span>);</span><br><span class="line">		src.add(<span class="string">&quot;viver&quot;</span>);</span><br><span class="line"></span><br><span class="line">		MessagePack msgpack = <span class="keyword">new</span> MessagePack();</span><br><span class="line">		<span class="keyword">byte</span>[] raw = msgpack.write(src);</span><br><span class="line">		List&lt;String&gt; dst1 = msgpack.read(raw, Templates.tList(Templates.TString));</span><br><span class="line">		System.out.println(dst1.get(<span class="number">0</span>));</span><br><span class="line">		System.out.println(dst1.get(<span class="number">1</span>));</span><br><span class="line">		System.out.println(dst1.get(<span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MessagePack编码器和解码器开发"><a href="#MessagePack编码器和解码器开发" class="headerlink" title="MessagePack编码器和解码器开发"></a>MessagePack编码器和解码器开发</h2><p>利用Netty的编解码框架可以非常方便地集成第三方序列化框架，Netty预集成了几种常用的编解码框架，用户也可以根据自己项目的实际情况集成其他编解码框架，或者进行自定义。</p>
<h3 id="MessagePack编码器开发"><a href="#MessagePack编码器开发" class="headerlink" title="MessagePack编码器开发"></a>MessagePack编码器开发</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msgpack.MessagePack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgpackEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext arg0, Object arg1, ByteBuf arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		MessagePack msgpack = <span class="keyword">new</span> MessagePack();</span><br><span class="line">		<span class="keyword">byte</span>[] raw = msgpack.write(arg1);</span><br><span class="line">		arg2.writeBytes(raw);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MessagePack解码器开发"><a href="#MessagePack解码器开发" class="headerlink" title="MessagePack解码器开发"></a>MessagePack解码器开发</h3><p>MsgpackDecoder.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msgpack.MessagePack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.MessageToMessageDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgpackDecoder</span> <span class="keyword">extends</span> <span class="title">MessageToMessageDecoder</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext arg0, ByteBuf arg1, List&lt;Object&gt; arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">byte</span>[] array;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> length = arg1.readableBytes();</span><br><span class="line">		array = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">		arg1.getBytes(arg1.readerIndex(), array, <span class="number">0</span>, length);</span><br><span class="line">		MessagePack msgpack = <span class="keyword">new</span> MessagePack();</span><br><span class="line">		arg2.add(msgpack.read(array));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>以上面Ehco程序为例，使用自定编码解码器序列化和反序列化对象。</p>
<p>EchoServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack decoder&quot;</span>, <span class="keyword">new</span> MsgpackDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack encoder&quot;</span>, <span class="keyword">new</span> MsgpackEncoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoServerhandler());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoServer().bind(port);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoServerhandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerhandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;This is &quot;</span> + ++counter + <span class="string">&quot; timer receive client:[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		ctx.writeAndFlush(msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack decoder&quot;</span>, <span class="keyword">new</span> MsgpackDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack encoder&quot;</span>, <span class="keyword">new</span> MsgpackEncoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler(<span class="number">10</span>));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.henry.netty.middle.ex1.bean.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sendNumber;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoClientHandler</span><span class="params">(<span class="keyword">int</span> sendNumber)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.sendNumber = sendNumber;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		UserInfo[] infos = userInfo();</span><br><span class="line">		<span class="keyword">for</span> (UserInfo infoE : infos) &#123;</span><br><span class="line">			ctx.write(infoE);</span><br><span class="line">		&#125;</span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> UserInfo[] userInfo() &#123;</span><br><span class="line">		UserInfo[] userInfos = <span class="keyword">new</span> UserInfo[sendNumber];</span><br><span class="line">		UserInfo userInfo = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sendNumber; i++) &#123;</span><br><span class="line">			userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">			userInfo.setAge(i);</span><br><span class="line">			userInfo.setName(<span class="string">&quot;ABCDEFG ---&gt;&quot;</span> + i);</span><br><span class="line">			userInfos[i] = userInfo;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> userInfos;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Client receive the msgpack message: &quot;</span> + msg);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserInfo.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msgpack.annotation.Message;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个地方Message需要加，否则服务端接收不到客户端发送的消息</span></span><br><span class="line"><span class="meta">@Message</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> JSON.toJSONString(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p>服务端：</p>
<p>六月 13, 2021 3:33:08 下午 io.netty.handler.logging.LoggingHandler channelRead<br>信息: [id: 0x09d65810, /0:0:0:0:0:0:0:0:8080] RECEIVED: [id: 0x3fc99004, /127.0.0.1:63855 =&gt; /127.0.0.1:8080]<br>This is 1 timer receive client:[[“ABCDEFG —&gt;0”,0]]</p>
<p>客户端：</p>
<p>Client receive the msgpack message: [“ABCDEFG —&gt;0”,0]</p>
<p>由于代码中没有考虑TCP粘包的处理。客户端发送10条消息，服务器只接收了1条，并发送1条响应给客户端。</p>
<h2 id="粘包-半包支持"><a href="#粘包-半包支持" class="headerlink" title="粘包/半包支持"></a>粘包/半包支持</h2><p>EchoServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:30:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;frameDecoder&quot;</span>, <span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">65535</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack decoder&quot;</span>, <span class="keyword">new</span> MsgpackDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;frameEncoder&quot;</span>, <span class="keyword">new</span> LengthFieldPrepender(<span class="number">2</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack encoder&quot;</span>, <span class="keyword">new</span> MsgpackEncoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoServerhandler());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoServer().bind(port);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.middle.ex1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldPrepender;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:48:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;frameDecoder&quot;</span>, <span class="keyword">new</span> LengthFieldBasedFrameDecoder(<span class="number">65535</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack decoder&quot;</span>, <span class="keyword">new</span> MsgpackDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;frameEncoder&quot;</span>, <span class="keyword">new</span> LengthFieldPrepender(<span class="number">2</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="string">&quot;msgpack encoder&quot;</span>, <span class="keyword">new</span> MsgpackEncoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler(<span class="number">10</span>));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在MessagePack编码器之前增加LengthFieldPrepender，它将在ByteBuf之前增加2个字节的消息长度字段，其原理如下图所示：</p>
<img src="/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%83%E2%80%94MessagePack%E7%BC%96%E8%A7%A3%E7%A0%81/LengthFieldPrepender%E5%8E%9F%E7%90%86.jpg" class title="LengthFieldPrepender原理.jpg">

<p>在MessagePack解码器之前增加LengthFieldBasedFrameDecoder，用于处理半包消息，这样后面的MsgpackDecoder接收到的永远是整包消息，其原理如下图所示:</p>
<img src="/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%83%E2%80%94MessagePack%E7%BC%96%E8%A7%A3%E7%A0%81/LengthFieldBasedFrameDecoder%E5%8E%9F%E7%90%86.jpg" class title="LengthFieldBasedFrameDecoder原理">

<p>运行结果</p>
<p>服务端：</p>
<p>六月 13, 2021 3:58:32 下午 io.netty.handler.logging.LoggingHandler channelRead<br>信息: [id: 0x831103b1, /0:0:0:0:0:0:0:0:8080] RECEIVED: [id: 0x13c05576, /127.0.0.1:65013 =&gt; /127.0.0.1:8080]<br>This is 1 timer receive client:[[“ABCDEFG —&gt;0”,0]]<br>This is 2 timer receive client:[[“ABCDEFG —&gt;1”,1]]<br>This is 3 timer receive client:[[“ABCDEFG —&gt;2”,2]]<br>This is 4 timer receive client:[[“ABCDEFG —&gt;3”,3]]<br>This is 5 timer receive client:[[“ABCDEFG —&gt;4”,4]]<br>This is 6 timer receive client:[[“ABCDEFG —&gt;5”,5]]<br>This is 7 timer receive client:[[“ABCDEFG —&gt;6”,6]]<br>This is 8 timer receive client:[[“ABCDEFG —&gt;7”,7]]<br>This is 9 timer receive client:[[“ABCDEFG —&gt;8”,8]]<br>This is 10 timer receive client:[[“ABCDEFG —&gt;9”,9]]</p>
<p>客户端：</p>
<p>Client receive the msgpack message: [“ABCDEFG —&gt;0”,0]<br>Client receive the msgpack message: [“ABCDEFG —&gt;1”,1]<br>Client receive the msgpack message: [“ABCDEFG —&gt;2”,2]<br>Client receive the msgpack message: [“ABCDEFG —&gt;3”,3]<br>Client receive the msgpack message: [“ABCDEFG —&gt;4”,4]<br>Client receive the msgpack message: [“ABCDEFG —&gt;5”,5]<br>Client receive the msgpack message: [“ABCDEFG —&gt;6”,6]<br>Client receive the msgpack message: [“ABCDEFG —&gt;7”,7]<br>Client receive the msgpack message: [“ABCDEFG —&gt;8”,8]<br>Client receive the msgpack message: [“ABCDEFG —&gt;9”,9]</p>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之六—编解码技术</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%85%AD%E2%80%94%E7%BC%96%E8%A7%A3%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>基于Java提供的对象输入/输出流ObjectInputStream和ObjectOutputStream，可以直接把Java对象作为可存储的字节数组写入文件，也可以传输到网络上，对程序员来说，基于JDK默认的序列化机制可以避免操作底层字节数组，从而提升开发效率。</p>
<span id="more"></span>

<p>Java序列化的目的主要有两个：</p>
<ul>
<li>网络传输</li>
<li>对象持久化</li>
</ul>
<p>Netty主要关注的是序列化后对数据进行网络传输。</p>
<h2 id="Java序列化的缺点"><a href="#Java序列化的缺点" class="headerlink" title="Java序列化的缺点"></a>Java序列化的缺点</h2><ul>
<li>无法跨语言（致命）</li>
<li>序列化后的码流太大</li>
<li>序列化性能太低</li>
</ul>
<h2 id="业界主流的编解码框架"><a href="#业界主流的编解码框架" class="headerlink" title="业界主流的编解码框架"></a>业界主流的编解码框架</h2><ul>
<li>Google的Protobuf</li>
<li>Facebook的Thrift</li>
<li>JBoss Marshalling</li>
</ul>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之五—分隔符和定长解码器的应用</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%94%E2%80%94%E5%88%86%E9%9A%94%E7%AC%A6%E5%92%8C%E5%AE%9A%E9%95%BF%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h2><p>通过对DelimiterBasedFrameDecoder的使用，我们可以自动完成以分隔符作为码流结束标识的消息的解码。</p>
<span id="more"></span>

<p>EchoServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:30:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ByteBuf delimiter = Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1014</span>, delimiter));</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoServerhandler());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoServer().bind(port);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoServerhandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:38:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerhandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		String body = (String) msg;</span><br><span class="line">		System.out.println(<span class="string">&quot;This is &quot;</span> + ++counter + <span class="string">&quot; times receive client: [&quot;</span> + body + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		body += <span class="string">&quot;$_&quot;</span>;</span><br><span class="line">		ByteBuf echo = Unpooled.copiedBuffer(body.getBytes());</span><br><span class="line">		ctx.writeAndFlush(echo);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:48:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ByteBuf delimiter = Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1014</span>, delimiter));</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoClientHandler());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:44:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> String ECHO_REQ = <span class="string">&quot;Hi, Lilinfeng. Welcome to Netty.$_&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			ctx.writeAndFlush(Unpooled.copiedBuffer(ECHO_REQ.getBytes()));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;This is &quot;</span> + ++counter + <span class="string">&quot; times receive server: [&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="FixedLengthFrameDecoder"><a href="#FixedLengthFrameDecoder" class="headerlink" title="FixedLengthFrameDecoder"></a>FixedLengthFrameDecoder</h2><p>FixedLengthFrameDecoder是固定长度解码器，它能够按照指定的长度对消息进行自动解码，开发者不需要考虑TCP的粘包/拆包问题，非常实用。</p>
<p>EchoServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.FixedLengthFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:30:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">				.handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> FixedLengthFrameDecoder(<span class="number">20</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> EchoServerhandler());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">		<span class="keyword">new</span> EchoServer().bind(port);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EchoServerhandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:38:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerhandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Receive client :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;已经获取到消息啦,当前时间戳为:&quot;</span> + System.currentTimeMillis(), Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">		ctx.writeAndFlush(buf);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用网络调试助手调试</p>
<img src="/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%94%E2%80%94%E5%88%86%E9%9A%94%E7%AC%A6%E5%92%8C%E5%AE%9A%E9%95%BF%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%BA%94%E7%94%A8/%E5%8F%91%E9%80%81.jpg" class title="网络调试助手发送消息">

<h2 id="传统阻塞IO调用NIO服务器"><a href="#传统阻塞IO调用NIO服务器" class="headerlink" title="传统阻塞IO调用NIO服务器"></a>传统阻塞IO调用NIO服务器</h2><p>NIO服务器我们使用FixedLengthFrameDecoder创建的服务器（如果服务代码有微调，一并给出），下面是传统IO代码示例</p>
<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>EchoServerhandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:38:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerhandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Receive client :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;已经获取到消息啦,当前时间戳为:&quot;</span> + System.currentTimeMillis()+<span class="string">&quot;\n&quot;</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">		ctx.writeAndFlush(buf);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务器handler返回消息增加“\n”换行符，便于客户端每次读取一行。<strong>这样客户端与其建立长连接，客户端可以循环发送服务器并循环接收服务器的响应。</strong></p>
<p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 上午10:35:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">		PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">			in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">			out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">			out.println(<span class="string">&quot;12345678900987654321&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;Send data succeed.&quot;</span>);</span><br><span class="line">			String resp = in.readLine();</span><br><span class="line">			System.out.println(<span class="string">&quot;Now is: &quot;</span> + resp);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">				out.close();</span><br><span class="line">				out = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				socket = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>EchoServerhandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月27日 上午9:38:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerhandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Receive client :[&quot;</span> + msg + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;已经获取到消息啦,当前时间戳为:&quot;</span> + System.currentTimeMillis()+<span class="string">&quot;\n&quot;</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">		ctx.writeAndFlush(buf);</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		cause.printStackTrace();</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务端响应完成后，ctx调用close()关闭连接，便于客户端知道响应已经结束了。</p>
<p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty.introduction.ex4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 上午10:35:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">		PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">			out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">			out.println(<span class="string">&quot;12345678900987654321&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;Send data succeed.&quot;</span>);</span><br><span class="line">			InputStream inputStream = socket.getInputStream();</span><br><span class="line">			<span class="keyword">byte</span>[] byteArray = IOUtils.toByteArray(inputStream);</span><br><span class="line">			System.out.println(<span class="string">&quot;Now is: &quot;</span> + <span class="keyword">new</span> String(byteArray, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">				out.close();</span><br><span class="line">				out = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				socket = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之四—TCP粘包拆包问题解决之道</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9B%9B%E2%80%94TCP%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</url>
    <content><![CDATA[<p>无论是服务端还是客户端，当我们读取或者发送消息的时候，都需要考虑TCP底层的粘包和拆包机制。</p>
<h2 id="TCP粘包-拆包"><a href="#TCP粘包-拆包" class="headerlink" title="TCP粘包/拆包"></a>TCP粘包/拆包</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>TCP是个“流”协议，所谓流，就是没有界限的一串数据。TCP底层并不了解业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的拆分，所以在业务上认为，一个完整的包可能会被TCP拆分成多个包进行发送，也可能把多个小的包封装成一个大的数据包发送，这就是所谓的TCP粘包和拆包问题。</p>
<span id="more"></span>

<h3 id="粘包-拆包发生原因"><a href="#粘包-拆包发生原因" class="headerlink" title="粘包/拆包发生原因"></a>粘包/拆包发生原因</h3><ul>
<li>应用程序write写入的字节大小大于<strong>套接口发送缓冲区</strong>大小</li>
<li>进行MSS大小的TCP分段</li>
<li>以太网帧的payload大于MTU进行IP分片</li>
</ul>
<p>注：MSS、MTU等概念参考note/计算机网络相关笔记</p>
<h3 id="粘包-拆包解决策略"><a href="#粘包-拆包解决策略" class="headerlink" title="粘包/拆包解决策略"></a>粘包/拆包解决策略</h3><p>由于底层的TCP无法理解上层的业务数据，所以在底层是无法保证数据不被拆分和重组的，这个问题只能通过上层的应用协议栈设计来解决，根据业界的主流协议的解决方案，可以归纳如下：</p>
<ul>
<li>消息定长，例如每个报文的大小为固定长度200字节，如果不够，空位补空格；</li>
<li>在包尾增加回车换行符进行分割，例如FTP协议；</li>
<li>将消息分为消息头和消息体，消息头中包含表示消息总长度（或者消息体长度）的字段，通常设计思路为消息头的第一个字段使用int32来表示消息的总长度；</li>
<li>更复杂的应用层协议</li>
</ul>
<p>Netty提供了半包解码器来解决TCP粘包/拆包问题。</p>
<h2 id="未考虑TCP粘包导致功能异常案例"><a href="#未考虑TCP粘包导致功能异常案例" class="headerlink" title="未考虑TCP粘包导致功能异常案例"></a>未考虑TCP粘包导致功能异常案例</h2><p>在前面的时间服务器示例中，没有考虑读半包问题，在功能测试时往往没有问题，但是一旦压力上来，或者发送大报文之后，就会存在粘包/拆包问题。如果代码没有考虑，往往就会出现解码错位或者错误，导致程序不能正常工作。下面修改Nettty入门应用中的代码，模拟故障场景，看看如何正确使用Netty的半包解码器来解决TCP粘包/拆包问题。</p>
<h3 id="TimeServer的改造"><a href="#TimeServer的改造" class="headerlink" title="TimeServer的改造"></a>TimeServer的改造</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(req);</span><br><span class="line">		String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>).substring(<span class="number">0</span>, req.length - System.getProperty(<span class="string">&quot;line.separator&quot;</span>).length());</span><br><span class="line">		System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + body + <span class="string">&quot;; the counter is: &quot;</span> + ++counter);</span><br><span class="line">		String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">		currentTime = currentTime + System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">		<span class="comment">// byte[]转ByteBuf</span></span><br><span class="line">		ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">		ctx.writeAndFlush(resp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每读到一条消息后，就计一次数，然后发送应答消息给客户端。</p>
<h3 id="TimeClient的改造"><a href="#TimeClient的改造" class="headerlink" title="TimeClient的改造"></a>TimeClient的改造</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月26日 上午10:34:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] req;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		req = (<span class="string">&quot;QUERY TIME ORDER&quot;</span> + System.getProperty(<span class="string">&quot;line.separator&quot;</span>)).getBytes();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用channelActive方法，发送查询时间指令给服务端 调用ChannelHandlerContext的writeAndFlush方法将请求消息发送给服务端</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf message = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			message = Unpooled.buffer(req.length);</span><br><span class="line">			message.writeBytes(req);</span><br><span class="line">			ctx.writeAndFlush(message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当服务端返回应答消息时，channelRead方法被调用</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(req);</span><br><span class="line">		String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Now is :&quot;</span> + body + <span class="string">&quot;; the counter is: &quot;</span> + ++counter);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 释放资源</span></span><br><span class="line">		System.out.println(<span class="string">&quot;unexpected exception from downstream: &quot;</span> + cause.getMessage());</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端跟服务端链路建立成功之后，循环发送100条消息，每发送一条就刷新一次，保证每条消息都会写入Channel中。</p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>服务端：</p>
<p>channelId：c38649fc<br>The time server receive order: QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORD; the counter is: 1<br>The time server receive order:<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER<br>QUERY TIME ORDER; the counter is: 2</p>
<p>客户端：</p>
<p>链接报告开始<br>链接报告信息：本客户端链接到服务端。channelId：04e37621<br>链接报告完毕<br>Now is :BAD ORDER<br>BAD ORDER<br>; the counter is: 1</p>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>服务端运行结果表明它只接收到了两条消息，每条消息包含若干QUERY TIME ORDER指令，总共100条，这说明发生了TCP粘包。</p>
<p>按照设计初衷，客户端应该收到100条当前系统时间的消息，但是实际上只收到了一条，这不难理解，因为服务端只收到了2条请求消息，所以实际服务端只发送了2条应答，由于请求消息不满足查询条件，所以返回了2条“BAD ORDER”应答消息，但是实际上客户端只收到了一条包含2条“BAD ORDER”指令的消息，说明服务端返回的应答消息也发生了粘包。</p>
<p>因为发生粘包，程序就不能正常工作。下面演示利用Netty的LineBasedFrameDecoder和StringDecoder来解决TCP粘包问题。</p>
<h2 id="利用LineBasedFrameDecoder解决TCP粘包问题"><a href="#利用LineBasedFrameDecoder解决TCP粘包问题" class="headerlink" title="利用LineBasedFrameDecoder解决TCP粘包问题"></a>利用LineBasedFrameDecoder解决TCP粘包问题</h2><h3 id="支持TCP粘包的TimeServer"><a href="#支持TCP粘包的TimeServer" class="headerlink" title="支持TCP粘包的TimeServer"></a>支持TCP粘包的TimeServer</h3><p>TimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LineBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午10:34:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 配置服务器的NIO线程组 Reactor线程组</span></span><br><span class="line">		<span class="comment">// 用户服务端接受客户端的连接</span></span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="comment">// 用于进行SocketChannel的网络读写</span></span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">				<span class="comment">// ChildChannelHandler类似Reactor模式中的Handler,主要用于处理网络IO事件，例如记录日志、对消息进行编解码等</span></span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChildChannelHandler());</span><br><span class="line">			<span class="comment">// 绑定端口，同步等待成功</span></span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 等待服务器监听端口关闭 等待服务端链路关闭之后main函数才退出</span></span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 优雅退出，释放线程池资源</span></span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			arg0.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">			arg0.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">			arg0.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TimeServer().bind(<span class="number">8080</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeServerHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		String body = (String)msg;</span><br><span class="line">		System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + body + <span class="string">&quot;; the counter is: &quot;</span> + ++counter);</span><br><span class="line">		String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">		currentTime = currentTime + System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">		<span class="comment">// byte[]转ByteBuf</span></span><br><span class="line">		ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">		ctx.writeAndFlush(resp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="支持TCP粘包的TimeClient"><a href="#支持TCP粘包的TimeClient" class="headerlink" title="支持TCP粘包的TimeClient"></a>支持TCP粘包的TimeClient</h3><p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LineBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:28:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group)</span><br><span class="line">				.channel(NioSocketChannel.class) <span class="comment">// 与服务器端不同</span></span><br><span class="line">				<span class="comment">// 禁用nagle算法</span></span><br><span class="line">				.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">				<span class="comment">// 此处添加handler，直接创建了匿名内部类，实现initChannel方法，其作用是当创建NioSocketChannel</span></span><br><span class="line">				<span class="comment">// 成功之后，在进行初始化，将它的ChannelHandler设置到ChannelPipeline中，用于处理网络I/O事件。</span></span><br><span class="line">				.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						<span class="comment">// 写数据是是ByteBuf,那么服务器端接收到就要先通过分隔符分隔，再解码</span></span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> TimeClientHandler());</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 发起异步连接操作 调用connect方法异步连接，然后调用同步方法等待连接成功</span></span><br><span class="line">			ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 等待客户端链路关闭</span></span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TimeClient().connect(<span class="number">8080</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c4;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月26日 上午10:34:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] req;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		req = (<span class="string">&quot;QUERY TIME ORDER&quot;</span> + System.getProperty(<span class="string">&quot;line.separator&quot;</span>)).getBytes();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用channelActive方法，发送查询时间指令给服务端 调用ChannelHandlerContext的writeAndFlush方法将请求消息发送给服务端</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf message = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">			message = Unpooled.buffer(req.length);</span><br><span class="line">			message.writeBytes(req);</span><br><span class="line">			ctx.writeAndFlush(message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当服务端返回应答消息时，channelRead方法被调用</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		String body = (String)msg;</span><br><span class="line">		System.out.println(<span class="string">&quot;Now is :&quot;</span> + body + <span class="string">&quot;; the counter is: &quot;</span> + ++counter);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 释放资源</span></span><br><span class="line">		System.out.println(<span class="string">&quot;unexpected exception from downstream: &quot;</span> + cause.getMessage());</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="LineBasedFrameDecoder和StringDecoder的原理解析"><a href="#LineBasedFrameDecoder和StringDecoder的原理解析" class="headerlink" title="LineBasedFrameDecoder和StringDecoder的原理解析"></a>LineBasedFrameDecoder和StringDecoder的原理解析</h2><p>LineBasedFrameDecoder的工作原理是它依次遍历ByteBuf中的可读字节，判断看是否有“\n”或者“\r\n”，如果有，就以此位置为结束位置。</p>
<p>StringDecoder的功能非常简单，就是将接收到的对象转换成字符串，然后继续调用后面的Handler。</p>
<p>LineBasedFrameDecoder+StringDecoder组合就是按行切换的文本解码器。</p>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之三—Netty入门应用</title>
    <url>/2021/06/13/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%89%E2%80%94Netty%E5%85%A5%E9%97%A8%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>本文介绍通过Netty实现时间服务的代码开发，包括服务端和客户端。同时也给出了封装Netty客户端来供外部进行同步调用并获取服务端结果的开发方式。</p>
<span id="more"></span>

<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>电脑已经配置JDK环境、Maven依赖环境、Java开发环境（Eclipse、IDEA）</p>
<h3 id="maven依赖配置"><a href="#maven依赖配置" class="headerlink" title="maven依赖配置"></a>maven依赖配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.henry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- google guava --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>28.2-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.Alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.msgpack<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>msgpack<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Netty实现时间服务器"><a href="#Netty实现时间服务器" class="headerlink" title="Netty实现时间服务器"></a>Netty实现时间服务器</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>TimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午10:34:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 配置服务器的NIO线程组 Reactor线程组</span></span><br><span class="line">		<span class="comment">// 用户服务端接受客户端的连接</span></span><br><span class="line">		EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="comment">// 用于进行SocketChannel的网络读写</span></span><br><span class="line">		EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">			b.group(bossGroup, workerGroup)</span><br><span class="line">				.channel(NioServerSocketChannel.class)</span><br><span class="line">				.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">				<span class="comment">// ChildChannelHandler类似Reactor模式中的Handler,主要用于处理网络IO事件，例如记录日志、对消息进行编解码等</span></span><br><span class="line">				.childHandler(<span class="keyword">new</span> ChildChannelHandler());</span><br><span class="line">			<span class="comment">// 绑定端口，同步等待成功</span></span><br><span class="line">			ChannelFuture f = b.bind(port).sync();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 等待服务器监听端口关闭 等待服务端链路关闭之后main函数才退出</span></span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 优雅退出，释放线程池资源</span></span><br><span class="line">			bossGroup.shutdownGracefully();</span><br><span class="line">			workerGroup.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;channelId：&quot;</span>+arg0.id());</span><br><span class="line">			arg0.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TimeServer().bind(<span class="number">8080</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeServerHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:08:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf)msg;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(req);</span><br><span class="line">		String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + body);</span><br><span class="line">		String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">		<span class="comment">// byte[]转ByteBuf</span></span><br><span class="line">		ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">		ctx.write(resp);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 从性能角度考虑，为了防止频繁地唤醒Selector进行消息发送，Netty的write方法并不直接将消息写入SocketChannel中，</span></span><br><span class="line">		<span class="comment">// 调用write方法只是把待发送的消息放到发送缓冲区中，再通过调用flush方法，将发送缓冲区的消息全部写到SocketChannel中</span></span><br><span class="line">		ctx.flush();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:28:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">			b.group(group)</span><br><span class="line">				.channel(NioSocketChannel.class) <span class="comment">// 与服务器端不同</span></span><br><span class="line">				<span class="comment">// 禁用nagle算法</span></span><br><span class="line">				.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">				<span class="comment">// 此处添加handler，直接创建了匿名内部类，实现initChannel方法，其作用是当创建NioSocketChannel</span></span><br><span class="line">				<span class="comment">// 成功之后，在进行初始化，将它的ChannelHandler设置到ChannelPipeline中，用于处理网络I/O事件。</span></span><br><span class="line">				.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">					<span class="meta">@Override</span></span><br><span class="line">					<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;链接报告开始&quot;</span>);</span><br><span class="line">						System.out.println(<span class="string">&quot;链接报告信息：本客户端链接到服务端。channelId：&quot;</span>+ch.id());</span><br><span class="line">						System.out.println(<span class="string">&quot;链接报告完毕&quot;</span>);</span><br><span class="line">						ch.pipeline().addLast(<span class="keyword">new</span> TimeClientHandler());</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 发起异步连接操作 调用connect方法异步连接，然后调用同步方法等待连接成功</span></span><br><span class="line">			ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 等待客户端链路关闭</span></span><br><span class="line">			f.channel().closeFuture().sync();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> TimeClient().connect(<span class="number">8080</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TimeClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月26日 上午10:34:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ByteBuf firstMessage;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.getBytes();</span><br><span class="line">		<span class="comment">// 获取一个指定大小的ByteBuf</span></span><br><span class="line">		firstMessage = Unpooled.buffer(req.length);</span><br><span class="line">		firstMessage.writeBytes(req);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用channelActive方法，发送查询时间指令给服务端</span></span><br><span class="line"><span class="comment">	 * 调用ChannelHandlerContext的writeAndFlush方法将请求消息发送给服务端</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ctx.writeAndFlush(firstMessage);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当服务端返回应答消息时，channelRead方法被调用</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(req);</span><br><span class="line">		String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Now is :&quot;</span> + body);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;unexpected exception from downstream: &quot;</span> + cause.getMessage());</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Netty客户端发送消息并同步获取结果"><a href="#Netty客户端发送消息并同步获取结果" class="headerlink" title="Netty客户端发送消息并同步获取结果"></a>Netty客户端发送消息并同步获取结果</h2><p>下面演示通过封装的客户端来同步调用上节Netty时间服务器</p>
<p>封装的客户端:NettyClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFutureListener;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPromise;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 上午11:28:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 客户端业务处理handler</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> ClientHandler clientHandler = <span class="keyword">new</span> ClientHandler();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 启动器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 启动器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 客户端通道</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Channel clientChannel;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NettyClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class="line">		.option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">		.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				channel.pipeline().addLast(clientHandler);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// 发起同步连接操作</span></span><br><span class="line">		ChannelFuture channelFuture = bootstrap.connect(host, port);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 注册连接事件</span></span><br><span class="line">		channelFuture.addListener((ChannelFutureListener) future -&gt; &#123;</span><br><span class="line">			<span class="comment">// 如果连接成功</span></span><br><span class="line">			<span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;客户端[&quot;</span> + channelFuture.channel().localAddress().toString() + <span class="string">&quot;]已连接...&quot;</span>);</span><br><span class="line">				clientChannel = channelFuture.channel();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果连接失败, 尝试重新连接</span></span><br><span class="line">				System.out.println(<span class="string">&quot;客户端[&quot;</span> + channelFuture.channel().localAddress().toString() + <span class="string">&quot;]连接失败,重新连接中...&quot;</span>);</span><br><span class="line">				future.channel().close();</span><br><span class="line">				bootstrap.connect(host, port);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//注册关闭事件</span></span><br><span class="line">		channelFuture.channel().closeFuture().addListener(cfl -&gt; &#123;</span><br><span class="line">			close();</span><br><span class="line">			System.out.println(<span class="string">&quot;客户端[&quot;</span> + channelFuture.channel().localAddress().toString() + <span class="string">&quot;]已断开&quot;</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 客户单关闭</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 关闭客户端套接字</span></span><br><span class="line">		<span class="keyword">if</span>(clientChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">			clientChannel.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 关闭客户端线程组</span></span><br><span class="line">		<span class="keyword">if</span>(group != <span class="keyword">null</span>) &#123;</span><br><span class="line">			group.shutdownGracefully();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 客户端发送</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">send</span><span class="params">(String message)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		ChannelPromise promise = clientHandler.sendMessage(message);</span><br><span class="line">		promise.await(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">		<span class="keyword">return</span> clientHandler.getResponse();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.clientChannel.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> X3768</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年4月26日 上午10:34:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPromise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ChannelHandlerContext ctx;</span><br><span class="line">	<span class="keyword">private</span> ChannelPromise promise;</span><br><span class="line">	<span class="keyword">private</span> String response;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">		<span class="keyword">this</span>.ctx = ctx;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 当服务端返回应答消息时，channelRead方法被调用</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">		buf.readBytes(req);</span><br><span class="line">		<span class="keyword">this</span>.response = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		promise.setSuccess();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;unexpected exception from downstream: &quot;</span> + cause.getMessage());</span><br><span class="line">		ctx.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ChannelPromise <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				System.err.println(<span class="string">&quot;等待ChannelHandlerContext实例化过程中出错&quot;</span>);</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		promise = ctx.newPromise();</span><br><span class="line">		<span class="keyword">byte</span>[] req = message.getBytes();</span><br><span class="line">		<span class="comment">// 获取一个指定大小的ByteBuf</span></span><br><span class="line">		ByteBuf firstMessage = Unpooled.buffer(req.length);</span><br><span class="line">		<span class="comment">// 必须写数据进去,负责服务端接收不到请求</span></span><br><span class="line">		firstMessage.writeBytes(req);</span><br><span class="line">		ctx.writeAndFlush(firstMessage);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> promise;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试程序：MainTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c3_Netty入门应用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Stopwatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月10日 下午3:20:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">			Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					NettyClient nettyClient = <span class="keyword">new</span> NettyClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">							String message = nettyClient.send(<span class="string">&quot;QUERY TIME ORDER&quot;</span>);</span><br><span class="line">							System.out.println(<span class="string">&quot;获取响应为:&quot;</span> + message + <span class="string">&quot;, 耗时为:&quot;</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">							<span class="comment">// nettyClient.close2();</span></span><br><span class="line">						&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">							e.printStackTrace();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			t.start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，在利用ChannelHandlerContext进行消息发送前，我们先创建了一个promise并返回给send方法，那么send方法此时就会阻塞等待；当我们收到服务端消息后，promise.setSuccess就会解决send方法的等待行为，这样我们就会获取结果了。</p>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Netty知识集锦</title>
    <url>/2021/06/11/Netty%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="Channel与ChannelHandlerContext执行write方法的区别"><a href="#Channel与ChannelHandlerContext执行write方法的区别" class="headerlink" title="Channel与ChannelHandlerContext执行write方法的区别?"></a>Channel与ChannelHandlerContext执行write方法的区别?</h3><p>在netty中有我们一般有两种发送数据的方式，即使用ChannelHandlerContext或者Channel的write方法，这两种方法都能发送数据，那么其有什么区别呢。这儿引用netty文档中的解释如下：</p>
<p>在Netty中，有两种发送消息的方式。你可以直接写到Channel中，也可以写到和ChannelHandler相关联的ChannelHandlerContext对象中。前一种方式将会导致消息从ChannelPipeline的尾端开始流动，而后者将导致消息从ChannelPipeline中的下一个ChannelHandler开始流动。</p>
<span id="more"></span>

<p>详见：<a href="https://www.cnblogs.com/hetutu-5238/p/12206675.html">https://www.cnblogs.com/hetutu-5238/p/12206675.html</a></p>
<h3 id="Netty客户端发送消息并同步获取结果"><a href="#Netty客户端发送消息并同步获取结果" class="headerlink" title="Netty客户端发送消息并同步获取结果"></a>Netty客户端发送消息并同步获取结果</h3><p><a href="https://www.cnblogs.com/scy251147/p/10721736.html">https://www.cnblogs.com/scy251147/p/10721736.html</a></p>
<h3 id="ByteBuf：Netty的数据容器"><a href="#ByteBuf：Netty的数据容器" class="headerlink" title="ByteBuf：Netty的数据容器"></a>ByteBuf：Netty的数据容器</h3><p><a href="https://www.jianshu.com/p/3fbf54b8e8ec#comments">https://www.jianshu.com/p/3fbf54b8e8ec#comments</a></p>
<h3 id="LengthFieldBasedFrameDecoder-秒懂"><a href="#LengthFieldBasedFrameDecoder-秒懂" class="headerlink" title="LengthFieldBasedFrameDecoder 秒懂"></a>LengthFieldBasedFrameDecoder 秒懂</h3><p><a href="https://www.cnblogs.com/crazymakercircle/p/10294745.html">https://www.cnblogs.com/crazymakercircle/p/10294745.html</a></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之二—NIO入门</title>
    <url>/2021/06/09/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C%E2%80%94NIO%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>以时间服务器（TimeServer）为例，通过不同代码编程来分析实现细节。</p>
<h2 id="传统的BIO编程"><a href="#传统的BIO编程" class="headerlink" title="传统的BIO编程"></a>传统的BIO编程</h2><p>采用BIO通信模型的服务端，通常由一个独立的Acceptor线程负责监听客户端的连接，它接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完之后，通过输出流返回应答客户端，线程销毁，这就是典型的一请求一应答通信模型。</p>
<span id="more"></span>

<h3 id="同步阻塞式IO创建TimeServer、TimeClient"><a href="#同步阻塞式IO创建TimeServer、TimeClient" class="headerlink" title="同步阻塞式IO创建TimeServer、TimeClient"></a>同步阻塞式IO创建TimeServer、TimeClient</h3><p>TimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.传统的BIO编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 上午10:26:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			server = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;The time server is start in port: 8080&quot;</span>);</span><br><span class="line">			Socket socket = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				socket = server.accept();</span><br><span class="line">				<span class="keyword">new</span> Thread(<span class="keyword">new</span> TimeServerHandler(socket)).start();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;The time server close&quot;</span>);</span><br><span class="line">				server.close();</span><br><span class="line">				server = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeServerHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.传统的BIO编程;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 上午10:14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeServerHandler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.socket = socket;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;当前服务器处理线程为:&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">		BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">		PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">this</span>.socket.getInputStream()));</span><br><span class="line">			out = <span class="keyword">new</span> PrintWriter(<span class="keyword">this</span>.socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">			String currentTime = <span class="keyword">null</span>;</span><br><span class="line">			String body = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				body = in.readLine();</span><br><span class="line">				<span class="keyword">if</span> (body == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + body);</span><br><span class="line">				currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">				out.println(currentTime);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">				out.close();</span><br><span class="line">				out = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">this</span>.socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.传统的BIO编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 上午10:35:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">		PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">			in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">			out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">			out.println(<span class="string">&quot;QUERY TIME ORDER&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;Send order 2 server succeed.&quot;</span>);</span><br><span class="line">			String resp = in.readLine();</span><br><span class="line">			System.out.println(<span class="string">&quot;Now is: &quot;</span> + resp);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					in.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">				out.close();</span><br><span class="line">				out = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				socket = <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="伪异步IO编程"><a href="#伪异步IO编程" class="headerlink" title="伪异步IO编程"></a>伪异步IO编程</h2><p><em>传统的BIO编程创建的线程交由线程池管理</em></p>
<h2 id="NIO编程"><a href="#NIO编程" class="headerlink" title="NIO编程"></a>NIO编程</h2><p>与Socket类和ServerSocket类相对应，NIO也提供了SocketChannel和ServerSocketChannel两种不同的套件字通道实现。它提供了高度的、面向块的IO。通过自定义包含数据的类，以及通过以块的形式处理这些数据，NIO不用使用本机代码就可以利用低级优化，这是原来的IO包所无法做到的。</p>
<h3 id="缓冲区Buffer"><a href="#缓冲区Buffer" class="headerlink" title="缓冲区Buffer"></a>缓冲区Buffer</h3><p>在面向流的IO中，可以将数据直接写入或者将数据直接读到Stream对象中。在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p>
<p>缓冲区实际上是一个数组。通常它是一个字节数组（ByteBuffer），也可以使用其他种类的数组。但是一个缓冲区不仅仅是一个数组，缓冲区提供了对数据的结构化访问以及维护读写位置（limit）等信息。</p>
<h3 id="通道Channel"><a href="#通道Channel" class="headerlink" title="通道Channel"></a>通道Channel</h3><p>网络数据通过Channel读取和写入，相对于InputStream和OutputStream，它是双向的，即全双工。常用Channel包含ServerSocketChannel、ScoketChannel、FileChannel</p>
<h3 id="多路复用器Selector"><a href="#多路复用器Selector" class="headerlink" title="多路复用器Selector"></a>多路复用器Selector</h3><p>Selector会不断轮询注册在其上的Channel，如果存在就绪状态的Channel，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的IO操作。</p>
<h3 id="NIO创建TimeServer和TimeClient"><a href="#NIO创建TimeServer和TimeClient" class="headerlink" title="NIO创建TimeServer和TimeClient"></a>NIO创建TimeServer和TimeClient</h3><p>TimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.NIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 下午8:23:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MultiplexerTimeServer timeServer = <span class="keyword">new</span> MultiplexerTimeServer(<span class="number">8080</span>);</span><br><span class="line">		<span class="keyword">new</span> Thread(timeServer, <span class="string">&quot;NIO-MultiplexerTimeServer-001&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动一个线程，负责轮询多路复用器Selector，可以处理多个客户端的并发接入。</p>
<p>MultiplexerTimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.NIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月8日 下午8:25:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiplexerTimeServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ServerSocketChannel servChannel;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop;</span><br><span class="line">    <span class="comment">// 在构造方法中进行资源初始化，创建多路复用器Selector、ServerSocketChannel，设置异步非阻塞模式，它的backlog设置为1024。系统资源初始化成功后，将ServerSocketChannel注册到Selector，监听SelectionKey.OP_ACCEPT操作位。如果资源初始化失败（例如端口被占用），则退出</span></span><br><span class="line">    <span class="comment">// backlog用于构造服务端套接字ServerSocket对象，标识当服务器请求处理线程全满时，用于临时存放已完成三次握手的请求的队列的最大长度。如果设置或所设置的值小于1，Java将使用默认值50</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MultiplexerTimeServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			selector = Selector.open();</span><br><span class="line">			servChannel = ServerSocketChannel.open();</span><br><span class="line">			servChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">			servChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port), <span class="number">1024</span>);</span><br><span class="line">			servChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">			System.out.println(<span class="string">&quot;The time server is start in port: &quot;</span> + port);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.exit(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				selector.select(<span class="number">1000</span>);</span><br><span class="line">                <span class="comment">// 当处于就绪状态的Channel时，selector将返回该Channel的SelectionKey集合。</span></span><br><span class="line">				Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">				Iterator&lt;SelectionKey&gt; it = selectedKeys.iterator();</span><br><span class="line">				SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">					key = it.next();</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						handleInput(key);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						<span class="comment">// 如果当前可以处理发生异常,则取消</span></span><br><span class="line">						<span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">							key.cancel();</span><br><span class="line">							<span class="keyword">if</span> (key.channel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">								key.channel().close();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 多路复用器关闭后，所有注册在上面的Channel和Pipe等资源都会被自动去注册并关闭，所以不需要重复释放资源</span></span><br><span class="line">		<span class="keyword">if</span> (selector != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				selector.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleInput</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (key.isValid()) &#123;</span><br><span class="line">			<span class="comment">// 处理新接入的请求消息</span></span><br><span class="line">			<span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                <span class="comment">// 该状态下，相当于TCP完成了三次握手，TCP物理链路正式建立。这里将新建的SocketChannel设置为异步非阻塞，同时也可以对其TCP参数进行设置，例如TCP接收和发送缓冲区的大小等。</span></span><br><span class="line">				ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</span><br><span class="line">				SocketChannel sc = ssc.accept();</span><br><span class="line">				sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">				sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">				SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">                <span class="comment">// 开启一个1MB的缓冲区</span></span><br><span class="line">				ByteBuffer readBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">// 因为将SocketChannel设置为异步非阻塞模式，因此它的read是非阻塞的。使用返回值进行判断，看读取到的字节数，返回值有以下三种可能结果。</span></span><br><span class="line">                <span class="comment">// 返回值大于0：读到了字节，对字节进行编解码</span></span><br><span class="line">                <span class="comment">// 返回值等于0：没有读取到字节，属于正常场景，忽略</span></span><br><span class="line">                <span class="comment">// 返回-1：链路已经关闭，需要关闭SocketChannel，释放资源</span></span><br><span class="line">				<span class="keyword">int</span> readBytes = sc.read(readBuffer);</span><br><span class="line">				<span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 当读取到码流以后，进行解码，首先对readBufer进行flip操作，它的作用是将缓冲区当前的limit设置为position，position设置为0，用于后续对缓冲区的读取操作</span></span><br><span class="line">					readBuffer.flip();</span><br><span class="line">                    <span class="comment">// remaining():获取可读字节数组大小</span></span><br><span class="line">					<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readBuffer.remaining()];</span><br><span class="line">                    <span class="comment">// 将可读字节数组复制到新创建的字节数组中</span></span><br><span class="line">					readBuffer.get(bytes);</span><br><span class="line">					String body = <span class="keyword">new</span> String(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + body);</span><br><span class="line">					String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.contentEquals(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">					doWrite(sc, currentTime);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (readBytes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="comment">// 对端链路关闭</span></span><br><span class="line">					key.cancel();</span><br><span class="line">					sc.close();</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					; <span class="comment">// 读到0字节，忽略</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(SocketChannel channel, String response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (response != <span class="keyword">null</span> &amp;&amp; response.trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">byte</span>[] bytes = response.getBytes();</span><br><span class="line">			ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);</span><br><span class="line">			writeBuffer.put(bytes);</span><br><span class="line">			writeBuffer.flip();</span><br><span class="line">            <span class="comment">// 将字节数组发送出去</span></span><br><span class="line">			channel.write(writeBuffer);</span><br><span class="line">            <span class="comment">// 由于SocketChannel是异步非阻塞的，它并不能保证一次能够把需要发送的字节数组发送完，此时会出现“写半包”问题。我们需要注册写操作，不断轮询Selector()方法判断消息是否发送完成。此处没有考虑这种情况。</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.NIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 上午9:18:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> TimeClientHandle(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>), <span class="string">&quot;TimeCLient-001&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TimeClientHandle.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.NIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 上午9:14:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String host;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">	<span class="keyword">private</span> Selector selector;</span><br><span class="line">	<span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandle</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.host = host == <span class="keyword">null</span> ? <span class="string">&quot;127.0.0.1&quot;</span> : host;</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			selector = Selector.open();</span><br><span class="line">			socketChannel = SocketChannel.open();</span><br><span class="line">			socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.exit(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doConnect();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			System.exit(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				selector.select(<span class="number">1000</span>);</span><br><span class="line">				Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">				Iterator&lt;SelectionKey&gt; it = selectedKeys.iterator();</span><br><span class="line">				SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                    <span class="comment">// 当有就绪的Channel时，执行handleInput(key)方法</span></span><br><span class="line">					key = it.next();</span><br><span class="line">					it.remove();</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						handleInput(key);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						<span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">							key.cancel();</span><br><span class="line">							<span class="keyword">if</span> (key.channel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">								key.channel().close();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">				System.exit(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 多路复用器关闭后，所有注册在上面的Channel和Pipe等资源都会被自动去注册并关闭，所以不需要重复释放资源（JDK底层支持）</span></span><br><span class="line">		<span class="keyword">if</span> (selector != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				selector.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleInput</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (key.isValid()) &#123;</span><br><span class="line">			SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">// 如果是连接状态，即服务端已经返回ACK应答消息。调用finishConnect方法，如果返回值为true，说明客户端连接成功；如果返回值为false或者抛出异常，说明连接失败</span></span><br><span class="line">			<span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (sc.finishConnect()) &#123;</span><br><span class="line">                    <span class="comment">// 注册OP_READ并发送请求消息给服务端</span></span><br><span class="line">					sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">					doWrite(sc);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					System.exit(<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">				ByteBuffer readBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">				<span class="keyword">int</span> readBytes = sc.read(readBuffer);</span><br><span class="line">				<span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					readBuffer.flip();</span><br><span class="line">					<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[readBuffer.remaining()];</span><br><span class="line">					readBuffer.get(bytes);</span><br><span class="line">					String body = <span class="keyword">new</span> String(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;Now is: &quot;</span> + body);</span><br><span class="line">					<span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (readBytes &lt; <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="comment">// 对端链路关闭</span></span><br><span class="line">					key.cancel();</span><br><span class="line">					sc.close();</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					; <span class="comment">// 读到0字节，忽略</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(host, port))) &#123;</span><br><span class="line">			socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">			doWrite(socketChannel);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有直接连接成功，则说明服务端没有返回TCP握手应答消息，注册SelectionKey.OP_CONNECT，当服务返回syn-ack消息后，Selector就能轮询到这个SocketChannel处于连接就绪状态</span></span><br><span class="line">			socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.getBytes();</span><br><span class="line">		ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);</span><br><span class="line">		writeBuffer.put(req);</span><br><span class="line">		writeBuffer.flip();</span><br><span class="line">		sc.write(writeBuffer);</span><br><span class="line">        <span class="comment">// 如果缓冲区消息全部发送完成了，打印发送成功。由于异步，可能会有半包问题</span></span><br><span class="line">		<span class="keyword">if</span> (!writeBuffer.hasRemaining()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Send order 2 server &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="AIO编程"><a href="#AIO编程" class="headerlink" title="AIO编程"></a>AIO编程</h2><p>服务端：</p>
<p>TimeServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.AIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 下午6:58:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AsyncTimeServerHandler timeServer = <span class="keyword">new</span> AsyncTimeServerHandler(<span class="number">8080</span>);</span><br><span class="line">		<span class="keyword">new</span> Thread(timeServer, <span class="string">&quot;AIO-AsyncTimeServerHandler-001&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AsyncTimeServerHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.AIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 下午6:22:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTimeServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">	CountDownLatch latch;</span><br><span class="line">	AsynchronousServerSocketChannel asynchronousServerSocketChannel;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AsyncTimeServerHandler</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">			asynchronousServerSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.port));</span><br><span class="line">			System.out.println(<span class="string">&quot;The time server is start in port: &quot;</span> + port);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">		doAccept();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			latch.await();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		asynchronousServerSocketChannel.accept(<span class="keyword">this</span>, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, AsyncTimeServerHandler&gt;() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel result, AsyncTimeServerHandler attachment)</span> </span>&#123;</span><br><span class="line">				attachment.asynchronousServerSocketChannel.accept(attachment, <span class="keyword">this</span>);</span><br><span class="line">				ByteBuffer buffer  =ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">				<span class="comment">// 第一个参数 接收缓冲区，用于从异步Channel中读取数据包</span></span><br><span class="line">				<span class="comment">// 第二个参数 异步Channel携带的附件，通知回调的时候作为入参使用</span></span><br><span class="line">				<span class="comment">// 第三个参数 接收通知回调的业务Handler</span></span><br><span class="line">				result.read(buffer, buffer, <span class="keyword">new</span> ReadCompletionHandler(result));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, AsyncTimeServerHandler attachment)</span> </span>&#123;</span><br><span class="line">				exc.printStackTrace();</span><br><span class="line">				attachment.latch.countDown();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ReadCompletionHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.AIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 下午6:45:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadCompletionHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">Integer</span>, <span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> AsynchronousSocketChannel channel;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ReadCompletionHandler</span><span class="params">(AsynchronousSocketChannel channel)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.channel = channel;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">		attachment.flip();</span><br><span class="line">		<span class="keyword">byte</span>[] body = <span class="keyword">new</span> <span class="keyword">byte</span>[attachment.remaining()];</span><br><span class="line">		attachment.get(body);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String req = <span class="keyword">new</span> String(body, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">			System.out.println(<span class="string">&quot;The time server receive order: &quot;</span> + req);</span><br><span class="line">			String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(req) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">			doWrite(currentTime);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(String currentTime)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (currentTime != <span class="keyword">null</span> &amp;&amp; currentTime.trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">byte</span>[] bytes = (currentTime).getBytes();</span><br><span class="line">			ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);</span><br><span class="line">			writeBuffer.put(bytes);</span><br><span class="line">			writeBuffer.flip();</span><br><span class="line">			channel.write(writeBuffer, writeBuffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">					<span class="keyword">if</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">						channel.write(buffer, buffer, <span class="keyword">this</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						channel.close();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.channel.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<p>TimeClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.AIO;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 下午7:26:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> AsyncTimeClientHandler(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>), <span class="string">&quot;AIO-AsyncTimeClientHandler-001&quot;</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AsyncTimeClientHandler.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.netty2.c2_NIO入门.AIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021年6月9日 下午7:01:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTimeClientHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">Void</span>, <span class="title">AsyncTimeClientHandler</span>&gt;, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> AsynchronousSocketChannel client;</span><br><span class="line">	<span class="keyword">private</span> String host;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">	<span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AsyncTimeClientHandler</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.host = host;</span><br><span class="line">		<span class="keyword">this</span>.port = port;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			client = AsynchronousSocketChannel.open();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">		client.connect(<span class="keyword">new</span> InetSocketAddress(host, port), <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			latch.await();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			client.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Void result, AsyncTimeClientHandler attachment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span>[] req = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.getBytes();</span><br><span class="line">		ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);</span><br><span class="line">		writeBuffer.put(req);</span><br><span class="line">		writeBuffer.flip();</span><br><span class="line">		client.write(writeBuffer, writeBuffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">				<span class="comment">// 如果还有数据没有发送</span></span><br><span class="line">				<span class="keyword">if</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">					client.write(buffer, buffer, <span class="keyword">this</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					ByteBuffer readBuffer  =ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">					client.read(readBuffer, readBuffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">							buffer.flip();</span><br><span class="line">							<span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.remaining()];</span><br><span class="line">							buffer.get(bytes);</span><br><span class="line">							String body;</span><br><span class="line">							<span class="keyword">try</span> &#123;</span><br><span class="line">								body = <span class="keyword">new</span> String(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">								System.out.println(<span class="string">&quot;Now is: &quot;</span>+body);</span><br><span class="line">								latch.countDown();</span><br><span class="line">							&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">								e.printStackTrace();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">							<span class="keyword">try</span> &#123;</span><br><span class="line">								client.close();</span><br><span class="line">							&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">								e.printStackTrace();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					client.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, AsyncTimeClientHandler attachment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			client.close();</span><br><span class="line">			latch.countDown();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><h3 id="为什么不直接使用JDK的NIO？"><a href="#为什么不直接使用JDK的NIO？" class="headerlink" title="为什么不直接使用JDK的NIO？"></a>为什么不直接使用JDK的NIO？</h3><ol>
<li>NIO类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等</li>
<li>需要具备额外的技能做铺垫，例如熟悉Java多线程编程</li>
<li>可靠性，客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流等问题，NIO编程的特点是功能开发相对容器，但是可靠性能力补齐的工作量和难度都非常大。</li>
<li>JDK NIO的BUG，epoll bug，它会导致Selector空轮询，最终导致CPU100%。其他bug可查看相关资料。</li>
</ol>
<h3 id="为什么选择Netty？"><a href="#为什么选择Netty？" class="headerlink" title="为什么选择Netty？"></a>为什么选择Netty？</h3><ol>
<li>API简单</li>
<li>预置多种编解码器，可自定义解码器</li>
<li>定制能力强，可以通过ChannelHandler对通信框架灵活地扩展</li>
<li>性能高</li>
<li>成熟、稳定、修复所有已发现的JDK NIO的bug</li>
<li>社区活跃，迭代周期短，更多功能加入</li>
<li>经历了大规模商业应用考验，质量得到验证。Netty在互联网、大数据、网络游戏、企业应用、典型软件等众多行业已经得到了成功商用，证明已经完全能够满足不同行业的商业应用了。</li>
</ol>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
        <category>nio</category>
      </categories>
  </entry>
  <entry>
    <title>Netty权威指南学习笔记之一—Java_IO演进之路</title>
    <url>/2021/06/09/Netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%80%E2%80%94Java-IO%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>在Java早期版本，对IO的支持并不完善，开发人员在开发高性能IO程序的时候，会面临一些巨大的挑战和困难。随着操作系统底层对IO技术进行了迭代升级，Java也进一步完善了IO体系。</p>
<h2 id="Linux网络IO模型"><a href="#Linux网络IO模型" class="headerlink" title="Linux网络IO模型"></a>Linux网络IO模型</h2><p>Linux的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor(fd，文件描述符)。而对一个socket的读写也会有相应的描述符，称为socketfd（socket描述符），描述符就是一个数字，它指向内核中的一个结构体（文件路径，数据区等一些属性）</p>
<span id="more"></span>

<h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><h3 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h3><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>Linux下有select、poll、epoll。select是数组存储fd，有数量限制；poll是链表存储，没有数量限制；epoll红黑树+链表，没有数量限制，它有epoll_create、epoll_ctl、epoll_wait。具体区别见下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>seelct</th>
<th>poll</th>
<th>epoll</th>
</tr>
</thead>
<tbody><tr>
<td>操作方式</td>
<td>遍历</td>
<td>遍历</td>
<td>回调</td>
</tr>
<tr>
<td>底层实现</td>
<td>数组</td>
<td>链表</td>
<td>哈希表</td>
</tr>
<tr>
<td>IO效率</td>
<td>每次调用都进行线性遍历，时间复杂度为O(n)</td>
<td>每次调用都进行线性遍历，时间复杂度为O(n)</td>
<td>事件通知方式，每当fd就绪，系统注册回调函数就会被调用，将就绪fd放到rdlist里。时间复杂度O(1)</td>
</tr>
<tr>
<td>最大连接数</td>
<td>1024（x86）或2048（x64）</td>
<td>无上限</td>
<td>无上限</td>
</tr>
<tr>
<td>fd拷贝</td>
<td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td>
<td>每次调用poll，都需要把fd集合从用户态拷贝到内核态</td>
<td>调用epoll_ctl时拷贝进内核并保存，之后每次epoll_wait不拷贝</td>
</tr>
</tbody></table>
<h3 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h3><h3 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h3><h2 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h2><p>为了克服select的缺点，epoll作了很多重大改进：</p>
<ul>
<li><p>支持一个进程打开的socket描述符（FD）不受限制（仅受限于操作系统的最大文件句柄数）</p>
<p>vim /proc/sys/fs/<strong>file-max</strong></p>
</li>
<li><p>IO效率不会随着FD数目的增加而线性下降</p>
<p>select是线性遍历所有fd，而epoll是根据每个fd上面的callback函数实现的。那么，只有“活跃”的socket才会去主动调用callback函数，其他idle状态的socket则不会。在这点上，epoll实现了伪AIO。针对epoll和select性能对比的benchmark测试表明：如果所有的socket都处于活跃态——例如一个高速LAN环境，epoll并不比select/poll效率高太多；相反，如果过多使用epoll_ctl，效率相比还有稍微降低。但是一旦使用idle connections模拟WAN环境，epoll的效率就远在select/poll之上了。</p>
</li>
<li><p>使用mmap加速内核与用户空间的消息传递</p>
<p>无论是select1、poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存复制就显得非常重要，epoll是通过内核和用户空间mmap同一块内存来实现的。</p>
</li>
<li><p>epoll的API更加简单</p>
<p>包括创建一个epoll描述符、添加监听事件、阻塞等待所监听的事件发生、关闭epoll描述符等。</p>
</li>
</ul>
<h2 id="Java的I-O发展简史"><a href="#Java的I-O发展简史" class="headerlink" title="Java的I/O发展简史"></a>Java的I/O发展简史</h2><p>Java1.4 NIO1.0</p>
<p>Java7 NIO2.0（Java在NIO2.0中提供AIO功能，支持基于文件的异步IO操作和针对网络套接字的异步操作）</p>
]]></content>
      <categories>
        <category>Netty</category>
        <category>Netty权威指南学习笔记</category>
        <category>nio</category>
      </categories>
  </entry>
  <entry>
    <title>nio知识集锦</title>
    <url>/2021/06/09/nio%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="java-nio-socketChannel-read返回值代表的意思"><a href="#java-nio-socketChannel-read返回值代表的意思" class="headerlink" title="java nio socketChannel read返回值代表的意思"></a>java nio socketChannel read返回值代表的意思</h3><p><a href="https://blog.csdn.net/cao478208248/article/details/41648359">https://blog.csdn.net/cao478208248/article/details/41648359</a></p>
<span id="more"></span>]]></content>
      <categories>
        <category>nio</category>
      </categories>
  </entry>
  <entry>
    <title>博客网站论坛类</title>
    <url>/2021/06/08/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E8%AE%BA%E5%9D%9B%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><p><a href="https://www.yuque.com/fuzhengwei/hzgecg/hvoy2a">https://www.yuque.com/fuzhengwei/hzgecg/hvoy2a</a></p>
<p><a href="https://mp.weixin.qq.com/s/N7kzEhGA2432H0h8wqk1AQ">https://mp.weixin.qq.com/s/N7kzEhGA2432H0h8wqk1AQ</a></p>
<p>云服务使用学习，部环境、开端口、配域名、弄SSL、搭博客。</p>
<span id="more"></span>

<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h2 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h2>]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/2021/06/07/%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><h3 id="百度文库"><a href="#百度文库" class="headerlink" title="百度文库"></a>百度文库</h3><ul>
<li>网页方式：wenku.baiduvvv.com</li>
<li>软件（百度文库下载器）使用方式：链接：<a href="https://pan.baidu.com/s/18eIo7BY1ts-jSKqOzIsIYw">https://pan.baidu.com/s/18eIo7BY1ts-jSKqOzIsIYw</a>     提取码：rv9y</li>
</ul>
<span id="more"></span>

<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="IDEA安装激活"><a href="#IDEA安装激活" class="headerlink" title="IDEA安装激活"></a>IDEA安装激活</h3><p><a href="https://tech.souyunku.com/?p=49115">https://tech.souyunku.com/?p=49115</a></p>
]]></content>
      <categories>
        <category>整理收藏</category>
      </categories>
  </entry>
  <entry>
    <title>化解职场35岁危机的四个建议</title>
    <url>/2021/06/07/%E5%8C%96%E8%A7%A3%E8%81%8C%E5%9C%BA35%E5%B2%81%E5%8D%B1%E6%9C%BA%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<p>化解职场35岁危机的四个建议</p>
<p>不要被扰乱心智，但也不要掉以轻心，毕竟中年危机是真实存在的，而且很多职业确实有天花板和瓶颈。</p>
<p>如果你选择无视这些问题，不将其当回事，没有长远且合理的规划，那么届时就很可能会品尝到生活的恶意，所以一定要尽早做好应对的准备。不管你现在是二十出头还是已经步入中年，都希望能有这样的意识。</p>
<p>那么，如何才能化解中年职场危机呢？</p>
<p>对此，我们有四点小建议。</p>
<span id="more"></span>

<p>a、对身体自律，别放纵自己<br>与年轻人相比，中年人的劣势有一点就在于身体状态的下滑。<br>人随着年龄的增长，衰老是不可逆的，但长期运动以及对身体的有效管理，可以最大程度上延缓身体机能下滑的趋势。<br>养成运动的习惯，尽可能早睡早起，规律作息；健康饮食，不胡吃海喝，这不仅可以让你的体能更加充沛，能够以更佳的状态工作，也是对自身生命以及家庭的负责。<br>要知道，一场猝不及防的大病足可以摧毁一个中产家庭。很多时候，中年人的身体健康，往往不再是属于自己的，而是整个家庭。</p>
<p>b、不断学习和积累，提升核心竞争力<br>不同的年龄段，比拼的侧重点应该有所区别。<br>人到中年如果还同年轻后生们比拼体力，那会必输无疑，毫无胜算。到了这个年纪，最大的优势应该是能力、经验、资源，这就是中年职场人的核心竞争力。<br>无论是哪一个行业，不管是从事什么工作，业务能力出色、实战经验丰富、资源优质的人通常都会被善待。<br>而想要拥有这些年轻人难以够到的优势，就要做到不断地学习和成长，不断地积累，延迟满足感，一步一个脚印，踏踏实实地向前走。<br>学习和成长应该被视为终生的事业，任何时候都不能松懈。</p>
<p>c、不断尝试，寻找新的可能<br>什么是困难？<br>被困住了才会难。<br>中年职场人的危机，一方面来自多变的外部世界，这类危机是很难抵抗的，属于不可抗拒力危机，比如大到行业湮灭，小到公司倒闭、部门裁撤，这些都没办法预估或改变；另一方面是来自内部，比如个人的能力局限，职业发展进入瓶颈期。<br>但不管是哪一种类型的危机，我们想要打破这种困局，就要做到两点：1. 观察趋势，并做出预判；2. 不断尝试和突破，努力寻找新的可能性。<br>实际上，这个时代从来不缺少机遇，往往是缺少发现机遇的眼睛、缺少敢于行动的勇气以及拥抱变化的格局。</p>
<p>d、 调整收入方式和心态<br>成年人的焦虑感，归根结底还是和荷包挂勾的，兜里的钱越多，焦虑感就越小，反之就会越没有安全感。<br>为此，一定要调整自己的收入结构，增加收入渠道，不能只靠工资，比如理财、投资、开展副业等等。这项调整收入结构的计划，越好实施越有利。<br>与此同时，也要调整好自身的心态，不管发生多糟糕的事情，都要坚强面对，坦然接受，不要沮丧、衰颓、消沉，因为这只会让你陷入更困难的境地。<br>不要过度焦虑，不要放弃希望。35岁不是职业生涯的终点，中年职场人也有春天，前提是你要持续努力，做好充分准备，具备核心竞争力。</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>高效学习</title>
    <url>/2021/06/07/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>既然已经毕业了，大部分时间和精力都花在了工作和生活上，学习就不是第一要务，是从中抽出来额外的时间进行的。</p>
<p>既然如此，对于我们来说就希望学有所成，不管是为了解决一个问题，还是提升自己、升职加薪，亦或是缓解外界信息太多、变化太快带来的焦虑。无论是什么，我们都有一个诉求，希望学习是高效且有效的。不然的话，看剧不舒服么，躺尸不舒服么，刷抖音不舒服么？</p>
<p>如何高效学习，这里分为四步走。</p>
<span id="more"></span>

<p>第一步，要有学习意愿<br>相信能看到这篇文章，肯定是有学习意愿的。</p>
<p>第二步，要有明确的目标<br>切实可行的目标是达到可预期效果的重要保证。成年人带着功利学习不是什么说不出口的事。</p>
<p>第三步，实践<br>付诸实践，小步迭代。</p>
<p>第四步，产出<br>人同时具备生产者和消费者两个角色，如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。所以一定要产出一些作品，比解决了一个工作中的技术难题，如果学习了一些公司业务目前还用不上的技术，你可以边学习边做一些 demo 或样例项目，你也可以把自己的学习过程中的思考写下来分享出去(blog)，还可以以教代学，把自己学习到的东西教给别人，看看能不能教得会。教学相长，就是这个道理。</p>
<p>参考链接：<a href="https://time.geekbang.org/column/article/93521">https://time.geekbang.org/column/article/93521</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>redis学习笔记</title>
    <url>/2021/06/05/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="redis介绍及NIO原理"><a href="#redis介绍及NIO原理" class="headerlink" title="redis介绍及NIO原理"></a>redis介绍及NIO原理</h2><h3 id="man程序安装及操作"><a href="#man程序安装及操作" class="headerlink" title="man程序安装及操作"></a>man程序安装及操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装man程序，查看io涉及的操作函数</span></span><br><span class="line">yum install man man-pages</span><br><span class="line">Installed:</span><br><span class="line">  man-pages-4.15-6.2.al8.x86_64               man-pages-overrides-8.3.0.2-2.1.al8.noarch</span><br><span class="line"></span><br><span class="line">man 2 read #查看read操作函数</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="同步非租塞（NIO）"><a href="#同步非租塞（NIO）" class="headerlink" title="同步非租塞（NIO）"></a>同步非租塞（NIO）</h3><p>描述：一个进程或者线程管理n个文件描述符，然后一个一个循环遍历文件描述符去查看该文件描述符是否有数据到达（是否可读写了）。轮询发生在用户空间，整个过程是同步非阻塞的。当然某一个文件描述符有数据来了，读数据时是同步的。</p>
<p>问题：如果有1000个fd，代表用户进程轮询调用1000次kernel，成本问题。</p>
<h3 id="IO多路复用（select、epoll）"><a href="#IO多路复用（select、epoll）" class="headerlink" title="IO多路复用（select、epoll）"></a>IO多路复用（select、epoll）</h3><p>内核支持（目前linux没有真正实现aio，windows已经实现了）</p>
<p>描述：线程或者进程统一传1000个文件描述符给给select进行系统调用，然后调用结果返回给线程进程；线程和进程根据传回的文件描述遍历一下，看哪些可以有数据了（即可read了），然后通过这些fd去调用内核读取数据。</p>
<p>问题：fd相关数据拷贝来拷贝去，在用户态和内核态</p>
<h3 id="IO多路复用（epoll）"><a href="#IO多路复用（epoll）" class="headerlink" title="IO多路复用（epoll）"></a>IO多路复用（epoll）</h3><p>曾经，内核有内核地址空间，用户有用户地址空间；现在内核和用户约定一个空间（共享空间mmap，<strong>mmap和零拷贝sendfile不是一回事，sendfile+mmap就是kafka的核心技术</strong>）。空间里放了一些数据结构，这些数据结构存的就是文件描述符，其中哪些有数据到达了，就把这些文件符放到列表中，然后用户进程或线程遍历这些文件描述符进行文件描述符的read事件</p>
<h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><p>Nginx-&gt;多少颗cpu启动多少个进程worker-&gt;每个进程进行kernel的epoll同步，非阻塞多路复用</p>
<p>tomcat8之后也是使用的nio</p>
<h2 id="linux操作命令"><a href="#linux操作命令" class="headerlink" title="linux操作命令"></a>linux操作命令</h2><h3 id="查看当前进程关联的文件描述符"><a href="#查看当前进程关联的文件描述符" class="headerlink" title="查看当前进程关联的文件描述符"></a>查看当前进程关联的文件描述符</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /proc/6244/fd #查看当前进程关联的文件描述符</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>Java迭代:Iterator和Iterable接口</title>
    <url>/2021/06/04/Java%E8%BF%AD%E4%BB%A3-Iterator%E5%92%8CIterable%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>勉励：学习知识的最大价值在于愉悦自己的大脑，其次才是让自己生存。</p>
<h2 id="Iterable和Iterator关系"><a href="#Iterable和Iterator关系" class="headerlink" title="Iterable和Iterator关系"></a>Iterable和Iterator关系</h2><p>Iterable ：见此知意，实现了这个接口的集合对象支持迭代，是可迭代的。able结尾的表示 能怎么样。</p>
<p>Iterator：在英语中or 结尾是都是表示 …样的人 or … 者。如creator就是创作者的意思。这里也是一样：iterator就是迭代者，我们一般叫迭代器，它就是提供迭代机制的对象，具体如何迭代，都是Iterator接口规范的。实现该接口的子类是需要具体做元素迭代这件事的。</p>
<span id="more"></span>

<h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><p>一个集合对象要表明自己支持迭代，能有使用foreach语句的特权，就必须实现Iterable接口，表明我是可迭代的！然而实现Iterable接口，就必需为foreach语句提供一个迭代器（实现了Iterator接口的子类）。</p>
<p>这个迭代器是用接口定义的 iterator方法提供的。也就是iterator方法需要返回一个Iterator对象。</p>
<p>oreach只能用于数组和实现了Iterable接口的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Iterable JDK源码//可以通过成员内部类，方法内部类，甚至匿名内部类去实现Iterator</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>包含3个方法: hasNext ,  next , remove。remove按需求实现，一般它很少用到，以至于Eclipse接口方法自动补全时，都忽略了remove放方法。</p>
<ul>
<li>每次在迭代前  ，先调用hasNext()探测是否迭代到终点（本次还能再迭代吗？）。</li>
<li>next方法不仅要返回当前元素，还要后移游标cursor</li>
<li>remove()方法用来删除最近一次已经迭代出的元素</li>
<li>迭代出的元素是原集合中元素的拷贝（重要）</li>
<li>配合foreach使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Iterator接口的JDK源码，注释为整理建议使用Iterator的正确姿势</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//每次next之前，先调用此方法探测是否迭代到终点</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回当前迭代元素 ，同时，迭代游标后移</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/*删除最近一次已近迭代出出去的那个元素。</span></span><br><span class="line"><span class="comment">     只有当next执行完后，才能调用remove函数。</span></span><br><span class="line"><span class="comment">     比如你要删除第一个元素，不能直接调用 remove()   而要先next一下( );</span></span><br><span class="line"><span class="comment">     在没有先调用next 就调用remove方法是会抛出异常的。</span></span><br><span class="line"><span class="comment">     这个和MySQL中的ResultSet很类似</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>     </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="List迭代的具体细节"><a href="#List迭代的具体细节" class="headerlink" title="List迭代的具体细节"></a>List迭代的具体细节</h2><ul>
<li>hasNext , next  , remove 的调用顺序</li>
<li>迭代出来的是原集合元素拷贝</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        li.add(<span class="number">1</span>);</span><br><span class="line">        li.add(<span class="number">2</span>);</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//不使用foreach 而手动迭代</span></span><br><span class="line">        Iterator&lt;Integer&gt; iter = li.iterator();    <span class="comment">//获取ArrayList 的迭代器</span></span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;                      <span class="comment">//①先探测能否继续迭代</span></span><br><span class="line">            System.out.println(iter.next());       <span class="comment">//②后取出本次迭代出的元素</span></span><br><span class="line">            <span class="comment">//invoke  remove()                     //③最后如果需要，调用remove</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractList中实现的迭代器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定类实现迭代器"><a href="#自定类实现迭代器" class="headerlink" title="自定类实现迭代器"></a>自定类实现迭代器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyString s = <span class="keyword">new</span> MyString(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">			System.out.println(c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Character</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyString</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.value = value;</span><br><span class="line">		<span class="keyword">this</span>.length = value.length();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;Character&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Character</span>&gt; </span>&#123;</span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> cur != length;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Character <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				Character c = value.charAt(cur);</span><br><span class="line">				cur++;</span><br><span class="line">				<span class="keyword">return</span> c;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyIterator();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>linux知识集锦</title>
    <url>/2021/06/04/linux%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><h3 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看防火墙状态：systemctl status firewalld / firewall-cmd --state</span><br><span class="line">开启防火墙：systemctl start firewalld</span><br><span class="line">关闭防火墙：systemctl stop firewalld</span><br><span class="line">检查开启的端口：firewall-cmd --list-ports</span><br><span class="line">重启防火墙：firewall-cmd --reload</span><br><span class="line">开启新端口：firewall-cmd --zone=public --add-port=端口号/tcp --permanent</span><br><span class="line"></span><br><span class="line">开启防火墙：   systemctl start firewalld.service</span><br><span class="line">关闭防火墙：  systemctl stop firewalld.service</span><br><span class="line">禁止防火墙开机启动：  systemctl disable firewalld.service </span><br><span class="line">检查开启的端口：firewall-cmd --list-ports</span><br><span class="line">使用防火墙开启端口：firewall-cmd --zone=public --add-port=6379/tcp --permanent     （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line">端口开启后，需要下一步，刷新一下规则：firewall-cmd --reload    （刷新规则）</span><br></pre></td></tr></table></figure>

<p><span style="color:red;">注：在防火墙中增加了新的端口后需要刷新规则。</span></p>
<span id="more"></span>

<h4 id="centos出现“FirewallD-is-not-running”怎么办？"><a href="#centos出现“FirewallD-is-not-running”怎么办？" class="headerlink" title="centos出现“FirewallD is not running”怎么办？"></a><a href="https://jingyan.baidu.com/article/5552ef47f509bd518ffbc933.html">centos出现“FirewallD is not running”怎么办？</a></h4><h3 id="设置mysql远程连接权限"><a href="#设置mysql远程连接权限" class="headerlink" title="设置mysql远程连接权限"></a>设置mysql远程连接权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、进入容器：docker exec -it mysqlserver /bin/bash</span><br><span class="line">2、进入msyql：mysql -uroot -p</span><br><span class="line">3、授权：mysql&gt; GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line">4、刷新权限：mysql&gt; flush privileges;</span><br><span class="line">5、更新加密规则：mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line">6、更新root用户密码：mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">7、刷新权限：mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="在一些云服务器上安装宝塔"><a href="#在一些云服务器上安装宝塔" class="headerlink" title="在一些云服务器上安装宝塔"></a>在一些云服务器上安装宝塔</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure>

<h3 id="经验脚本1"><a href="#经验脚本1" class="headerlink" title="经验脚本1"></a>经验脚本1</h3><p>分享个老运维分享的初始化脚本，如果你是个服务器新手，可以试着复制下面所有内容，在服务器中执行，会减少你很多不必要的或者诡异的问题。比如 SeLinux 未关闭，可能会导致 nginx 配置不生效；比如 安装ES时，会让修改文件限制；比如 自己编译一些软件时，需要安装许多工具；诸此种种，这个脚本都有涉及。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## centos初始化</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关掉 SeLinux</span></span><br><span class="line">if [ -s /etc/selinux/config ]; then</span><br><span class="line">    sudo sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">    sudo sed -i &#x27;s/SELINUX=permissive/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">    sudo setenforce 0</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">开启文件限制</span> </span><br><span class="line">if [ &quot;`cat /etc/security/limits.conf|grep -c \&quot;soft nproc 65535\&quot;`&quot; = 0 ];then</span><br><span class="line">cat &gt;&gt;/etc/security/limits.conf&lt;&lt;eof</span><br><span class="line">* soft nproc 65536</span><br><span class="line">* hard nproc 65536</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* - memlock unlimited</span><br><span class="line">eof</span><br><span class="line">    fi</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################优化内核#######################################</span></span> </span><br><span class="line">if [ &quot;`cat /etc/sysctl.conf|grep -c net.ipv4.netfilter.nf_conntrack_max`&quot; = 0 ];then</span><br><span class="line">cp -a /etc/sysctl.conf /etc/sysctl.conf$(date +&quot;%F_%T&quot;)</span><br><span class="line">cat &gt;&gt;/etc/sysctl.conf&lt;&lt;EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">CUSTOM</span></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.all.accept_source_route = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">net.ipv4.conf.all.send_redirects = 0</span><br><span class="line">net.ipv4.conf.default.send_redirects = 0</span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 1</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line"><span class="meta">#</span><span class="bash"> Try not to get high TIME_WAIT number <span class="keyword">in</span> network connection</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_timestamps = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1800</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.core.netdev_max_backlog =262144</span><br><span class="line">net.netfilter.nf_conntrack_max = 1048576</span><br><span class="line"><span class="meta">#</span><span class="bash"> Max system and socket send/receive cache</span></span><br><span class="line">fs.aio-max-nr = 3145728</span><br><span class="line">fs.file-max = 655360</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_max=16777216</span><br><span class="line">net.core.wmem_max=16777216</span><br><span class="line">net.ipv4.tcp_rmem=4096 87380 16777216</span><br><span class="line">net.ipv4.tcp_wmem=4096 65536 16777216</span><br><span class="line"><span class="meta">#</span><span class="bash"> Max socket connect backlog</span></span><br><span class="line">net.core.somaxconn = 16384</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_max_orphans= 262144</span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP connections operations</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.ip_local_port_range = 15000 65000</span><br><span class="line"><span class="meta">#</span><span class="bash"> Mem</span></span><br><span class="line">vm.swappiness = 0</span><br><span class="line">vm.overcommit_memory = 0</span><br><span class="line">vm.overcommit_ratio = 100</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">disable</span> ipv6</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">fs.inotify.max_queued_events = 99999999</span><br><span class="line">fs.inotify.max_user_watches = 99999999</span><br><span class="line">fs.inotify.max_user_instances = 65536</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">EOF</span><br><span class="line">        sysctl -p</span><br><span class="line">    fi</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###################关防火墙安装老防火墙##########</span></span></span><br><span class="line">systemctl status NetworkManager</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld</span><br><span class="line">sudo yum install iptables iptables-services -y</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########安装工具软件############</span></span></span><br><span class="line">yum install -y net-tools patch make cmake gcc gcc-c++ bzip2 bzip2-devel curl curl-devel vim vim-minimal zip unzip wget openssl-devel telnet lrzsz iostat sysstat</span><br></pre></td></tr></table></figure>

<h2 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h2><h3 id="Linux下安装supervisor进程管理工具"><a href="#Linux下安装supervisor进程管理工具" class="headerlink" title="Linux下安装supervisor进程管理工具"></a>Linux下安装supervisor进程管理工具</h3><p><a href="https://www.cnblogs.com/yunjiandubu/archive/2019/05/01/10801315.html">https://www.cnblogs.com/yunjiandubu/archive/2019/05/01/10801315.html</a></p>
<p><a href="https://docs.cloudreve.org/getting-started/install%EF%BC%88%E5%8C%85%E5%90%ABCloudreve%E8%BF%9B%E7%A8%8B%E5%AE%88%E6%8A%A4%EF%BC%89">https://docs.cloudreve.org/getting-started/install（包含Cloudreve进程守护）</a></p>
<p><a href="https://www.cnblogs.com/niuben/p/14695201.html">Supervisor-进程守护工具</a></p>
<p><a href="https://blog.csdn.net/caizhengwu/article/details/79935747">supervisor管理tomcat</a></p>
<p><a href="https://blog.csdn.net/shudaqi2010/article/details/51153961/">Supervisor重新加载配置启动新的进程</a></p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>使用supervisor进程管理命令之前先启动supervisord，否则程序报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<p>查看是否生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@henry tmp]# ps -ef | grep supervisord</span><br><span class="line">root         726       1  0 09:51 ?        00:00:01 /usr/bin/python3.6 /usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">root        4283    3187  0 12:55 pts/1    00:00:00 grep --color=auto supervisord</span><br><span class="line">[root@henry tmp]# </span><br></pre></td></tr></table></figure>

<p><strong>centos</strong>环境，配置supervisor跟随系统启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start supervisord.service     //启动supervisor并加载默认配置文件</span><br><span class="line">systemctl enable supervisord.service    //将supervisor加入开机启动项</span><br></pre></td></tr></table></figure>

<p>查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service supervisord status || systemctl status supervisord.service</span><br></pre></td></tr></table></figure>

<p>执行命令来验证是否为开机启动，enabled为成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled supervisord</span><br></pre></td></tr></table></figure>

<p>supervisor日志查看目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -1000f /var/log/supervisor/supervisord.log</span><br></pre></td></tr></table></figure>

<h4 id="supervisor常用命令"><a href="#supervisor常用命令" class="headerlink" title="supervisor常用命令"></a>supervisor常用命令</h4><p>直接输入supervisorctl进入supervisorctl的shell交互界面，此时命令不带supervisorctl可直接使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supervisorctl update        //配置文件修改后使用该命令加载新的配置</span><br><span class="line">supervisorctl status        //查看所有进程的状态</span><br><span class="line">supervisorctl stop es       //停止es</span><br><span class="line">supervisorctl start es      //启动es</span><br><span class="line">supervisorctl restart       //重启es</span><br><span class="line">supervisorctl reload        //重新启动配置中的所有程序</span><br><span class="line"></span><br><span class="line">supervisorctl stop all        //停止全部进程</span><br><span class="line">注：</span><br><span class="line">1、显示用stop停止掉的进程，用reload或者update都不会自动重启。</span><br><span class="line">2、加个配置文件不需要重启所有进程，加载后会自动拉起新增配置对应的应用</span><br></pre></td></tr></table></figure>



<h3 id="Linux上安装、卸载JDK"><a href="#Linux上安装、卸载JDK" class="headerlink" title="Linux上安装、卸载JDK"></a>Linux上安装、卸载JDK</h3><p><a href="https://www.cnblogs.com/chy18883701161/p/12354039.html">https://www.cnblogs.com/chy18883701161/p/12354039.html</a></p>
<p><a href="http://blog.sina.com.cn/s/blog_155063c740102wmi9.html">http://blog.sina.com.cn/s/blog_155063c740102wmi9.html</a></p>
<h3 id="阿里云CentOS7-X安装nginx"><a href="#阿里云CentOS7-X安装nginx" class="headerlink" title="阿里云CentOS7.X安装nginx"></a>阿里云CentOS7.X安装nginx</h3><p><a href="https://zhuanlan.zhihu.com/p/138982930">https://zhuanlan.zhihu.com/p/138982930</a></p>
<h3 id="Linux上安装rz、sz"><a href="#Linux上安装rz、sz" class="headerlink" title="Linux上安装rz、sz"></a>Linux上安装rz、sz</h3><p><a href="https://blog.csdn.net/qq_27870421/article/details/94550689">https://blog.csdn.net/qq_27870421/article/details/94550689</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure>

<h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><h3 id="阿里云开启自定义端口"><a href="#阿里云开启自定义端口" class="headerlink" title="阿里云开启自定义端口"></a>阿里云开启自定义端口</h3><p><a href="https://blog.csdn.net/qq_19467623/article/details/92839686">https://blog.csdn.net/qq_19467623/article/details/92839686</a></p>
<h3 id="宝塔使用"><a href="#宝塔使用" class="headerlink" title="宝塔使用"></a>宝塔使用</h3><img src="/2021/06/04/linux%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/baota.png" class title="宝塔命令行管理">

<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="linux怎么模糊查找一个文件"><a href="#linux怎么模糊查找一个文件" class="headerlink" title="linux怎么模糊查找一个文件"></a>linux怎么模糊查找一个文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find . -name &#x27;*.txt&#x27; // 在当前目录下模糊搜索文件</span><br><span class="line">find . -name test.txt // 在当前目录下搜索指定文件</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnblogs.com/adolfmc/p/5875214.html">https://www.cnblogs.com/adolfmc/p/5875214.html</a></p>
<h3 id="系统挂载硬盘"><a href="#系统挂载硬盘" class="headerlink" title="系统挂载硬盘"></a>系统挂载硬盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加磁盘，查看磁盘状况</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将硬盘/dev/sdb1挂载到/henry目录下</span></span><br><span class="line">mount /dev/sdb1 /henry</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/tianlesoftware/article/details/5642883">https://blog.csdn.net/tianlesoftware/article/details/5642883</a></p>
<h3 id="运行service-iptables-status时报错"><a href="#运行service-iptables-status时报错" class="headerlink" title="运行service iptables status时报错"></a>运行service iptables status时报错</h3><p><a href="https://www.cnblogs.com/yangfor/p/12857738.html">https://www.cnblogs.com/yangfor/p/12857738.html</a></p>
<p>需执行：yum install iptables-services</p>
<h3 id="shell脚本编程之自定义函数库"><a href="#shell脚本编程之自定义函数库" class="headerlink" title="shell脚本编程之自定义函数库"></a>shell脚本编程之自定义函数库</h3><p><a href="https://www.cnblogs.com/dongzhanyi123/p/12023462.html">https://www.cnblogs.com/dongzhanyi123/p/12023462.html</a></p>
<h3 id="source和-的区别"><a href="#source和-的区别" class="headerlink" title="source和./的区别"></a>source和./的区别</h3><p><a href="https://blog.csdn.net/R972965/article/details/96426190">https://blog.csdn.net/R972965/article/details/96426190</a></p>
<h3 id="linux-source命令路径-source（-）命令"><a href="#linux-source命令路径-source（-）命令" class="headerlink" title="linux source命令路径,source（.）命令"></a>linux source命令路径,source（.）命令</h3><p><a href="https://blog.csdn.net/weixin_42398056/article/details/116837812">https://blog.csdn.net/weixin_42398056/article/details/116837812</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Java知识集锦</title>
    <url>/2021/06/01/Java%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Java中isAssignableFrom的用法"><a href="#Java中isAssignableFrom的用法" class="headerlink" title="Java中isAssignableFrom的用法"></a>Java中isAssignableFrom的用法</h3><p>class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。</p>
<span id="more"></span> 

<p>1、class1是不是class2的父类或者父接口</p>
<p>2、Object是所有类的父类</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.henry.test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		A a = <span class="keyword">new</span> A();</span><br><span class="line">		B b = <span class="keyword">new</span> B();</span><br><span class="line">		A ba = <span class="keyword">new</span> B();</span><br><span class="line">		System.out.println(<span class="string">&quot;1-------------&quot;</span>);</span><br><span class="line">		System.out.println(A.class.isAssignableFrom(a.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(B.class.isAssignableFrom(b.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(A.class.isAssignableFrom(b.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(B.class.isAssignableFrom(a.getClass())); <span class="comment">// false</span></span><br><span class="line">		System.out.println(A.class.isAssignableFrom(ba.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(B.class.isAssignableFrom(ba.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="string">&quot;2-------------&quot;</span>);</span><br><span class="line">		System.out.println(a.getClass().isAssignableFrom(A.class)); <span class="comment">// true</span></span><br><span class="line">		System.out.println(b.getClass().isAssignableFrom(B.class)); <span class="comment">// true</span></span><br><span class="line">		System.out.println(a.getClass().isAssignableFrom(B.class)); <span class="comment">// true</span></span><br><span class="line">		System.out.println(b.getClass().isAssignableFrom(A.class)); <span class="comment">// false</span></span><br><span class="line">		System.out.println(ba.getClass().isAssignableFrom(A.class)); <span class="comment">// false</span></span><br><span class="line">		System.out.println(ba.getClass().isAssignableFrom(B.class)); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="string">&quot;3-------------&quot;</span>);</span><br><span class="line">		System.out.println(Object.class.isAssignableFrom(b.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(Object.class.isAssignableFrom(<span class="string">&quot;abc&quot;</span>.getClass())); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="string">&quot;4-------------&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;a&quot;</span>.getClass().isAssignableFrom(Object.class)); <span class="comment">// false</span></span><br><span class="line">		System.out.println(<span class="string">&quot;abc&quot;</span>.getClass().isAssignableFrom(Object.class)); <span class="comment">// false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>hexo+next搭建个人博客</title>
    <url>/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<style>
</style>



<p>本文记录采用hexo搭建个人博客项目的全过程（<span style="color:red">持续更新中…</span>）</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="✔-安装前软件准备"><a href="#✔-安装前软件准备" class="headerlink" title="✔ 安装前软件准备"></a>✔ 安装前软件准备</h3><ul>
<li>git（上传下载git仓库使用）<a href="https://git-scm.com/">git官网</a></li>
<li>nodejs（安装hexo、下载各种插件、主题需要）<a href="https://nodejs.org/">nodejs官网</a></li>
<li>typora（markdown文件编辑器，可选）<em>需要的评论联系</em></li>
</ul>
<p>上述软件安装过程省略，这里仅给出自己所使用的版本，方便参考。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git_v.png" class title="git版本">

<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/node_v.png" class title="nodejs版本">

<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_v.png" class title="hexo版本">

<p>安装好上面几个软件后，注意测试是否可以在命令行使用git、npm命令（命令执行失败，看下是否是因为环境变量没有配置，类似java path）</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>下面虽然使用的是在Windows系统下使用命令完成，但Linux系统命令与之相同，所以可以Linux也是可以完成的。Win+R-&gt; ‘cmd’ 打开命令行</p>
<p>首先需要配置npm的国内源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org         # 配置国内的镜像源</span><br><span class="line">npm info hexo        # 查看hexo的安装信息，是否是taobao.org的源</span><br></pre></td></tr></table></figure>

<p>然后安装hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm instal -g hexo        # 通过npm安装hexo，-g代表全局安装，可以使用hexo命令</span><br></pre></td></tr></table></figure>

<p>进入指定hexo项目初始化文件夹（就是在这个文件夹下创建一个hexo博客项目）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init henry-blog        # 初始化创建，会在当前目录创建henry-blog文件夹</span><br><span class="line">cd henry-blog        # 进入henry-blog目录</span><br><span class="line">npm install        # 进一步安装hexo所需文件，这一步在另外一个电脑从git库上拉代码后也需要</span><br></pre></td></tr></table></figure>

<p>这样hexo安装完成了，接下来启动hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean        # 清除所有记录</span><br><span class="line">hexo generate        # 生成静态网页</span><br><span class="line">hexo server -p 80        # 启动服务 -p代表启动后访问页面时的端口号,默认端口为4000</span><br></pre></td></tr></table></figure>

<p>浏览器访问 <a href="http://localhost/">http://localhost</a></p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/first_page.png" class title="首页">



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">在 Hexo 中有两份主要的配置文件，其名称都是 <span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的站点配置；</span><br><span class="line">另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</span><br></pre></td></tr></table></figure>

<p>为了描述方便，在下面的配置文件设置中，将前者称为<strong>站点配置文件</strong>，后者称为<strong>主题配置文件</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/henry-blog/</span>_config.yml</span><br><span class="line"><span class="regexp">/henry-blog/</span>themes<span class="regexp">/hexo-theme-next-5.1.4/</span>_config.yml</span><br></pre></td></tr></table></figure>

<h2 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h2><p>设置站点配置文件language属性值为zh-Hans</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Henry</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Jing</span> <span class="string">Chenyong</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>如果不喜欢默认主题（一般都会不喜欢~），可以换一个。可以选择<a href="https://github.com/iissnan/hexo-theme-next/">next主题</a>，然后选择一个版本压缩包下载到自己博客项目的theme目录中，并解压，我本地使用的是5.1.4。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/next_v.PNG" class title="next版本">

<p>打开站点配置文件进行如下设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">在博客项目目录下的_config.yml文件中修改theme为hexo-theme-next-5.1.4，如下所示:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="comment">#theme: landscape</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-next-5.1.4</span></span><br></pre></td></tr></table></figure>

<p>hexo详细配置参考<a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p>
<p>next详细配置参考<a href="http://theme-next.iissnan.com/getting-started.html#author-setting">next官方文档</a></p>
<p>配置完后重启服务，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除所有记录</span><br><span class="line">hexo generate   # 生成静态网页</span><br><span class="line">hexo server -p 80   # 启动服务</span><br></pre></td></tr></table></figure>

<h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>在主题配置文件中查找：scheme，可以看到next自带的四种主题样式，这里我们选择Gemini</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="新建标签及分类界面"><a href="#新建标签及分类界面" class="headerlink" title="新建标签及分类界面"></a>新建标签及分类界面</h3><p>打开主题配置文件，搜索menu，设置menu。||后面表示分类图标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">categories||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">个人项目:</span> <span class="string">/test/hello-world.html</span>   <span class="comment">#自己建立的页面</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/|| calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/|| heartbeat</span></span><br></pre></td></tr></table></figure>

<h2 id="部署GitPages"><a href="#部署GitPages" class="headerlink" title="部署GitPages"></a>部署GitPages</h2><p>为了能在互联网中通过浏览器访问我们的网站，通常可以自己购买一个云主机发布自己的网站，并绑定域名访问，但是这种方式成本较高。这里我们通过github提供的gitpage功能发布自己的网站（当然也可以绑定域名访问）</p>
<h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>登录github账号，新建一个New repository，新建仓库。这里创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io。点击create repository。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ujshenry_github_io.png" class title="仓库">

<h3 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a>将hexo部署到GitHub</h3><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件，滚动到最后，修改deploy发布配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>这个时候需要先安装deploy-git，也就是部署的命令，这样你才能用命令部署到GitHub。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>其中<code>hexo clean</code>清除了你之前生成的东西，也可以不加。</p>
<p><code>hexo generate</code> 顾名思义，生成静态文章，可以用 hexo g缩写</p>
<p><code>hexo deploy</code> 部署文章，可以用hexo d缩写</p>
<p>注意deploy时可能要你输入username和password。这样发布完成后，可以在github中查看到自己发布的博客网站文件。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/deploy.png" class title="deploy">

<p>过一会就可在<a href="http://ujshenry.github.io/">http://ujshenry.github.io</a> 这个网站看到你的博客了！！</p>
<h3 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h3><p>现在你的个人网站的地址是yourname.github.io，如果觉得逼格不够高，那么可以买一个域名然后解析绑定博客网站。这里我使用的是<a href="https://wanwang.aliyun.com/">阿里云</a>，买的是jingchenyong.xyz（第一年1元钱~~），手机上也可以下载阿里云app操作。域名购买的操作步骤这里就不详述了。</p>
<p>域名购买成功后，进入域名控制台，点击所买域名并继续点击解析设置，添加记录，并解析域名到自己的博客地址。（应该还有其他方式，自行探索）</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/domain1.png" class>

<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/domain2.png" class>

<p>阿里云域名配置成功后，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名xxx.xxx（我这里是blog.jingchenyong.xyz）。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git_setting.png" class>

<p>然后在你的博客文件source中创建一个名为CNAME文件（注意，这里是在本地博客项目目录），不要后缀。写上你的域名。<em>这一步的目的是每次项目重新发布到github时，都可以通过域名访问博客，否则，每次发布后都要自己点击settings，设置Custom domain。</em></p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cname1.png" class>

<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cname2.png" class>

<p>最后，在命令行中，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站了。</p>
<h2 id="Hexo插入图片"><a href="#Hexo插入图片" class="headerlink" title="Hexo插入图片"></a>Hexo插入图片</h2><p>版本：Hexo5.0.2（Hexo3以上即可）</p>
<ul>
<li>修改根目录配置文件post_asset_folder为true（默认为false）</li>
<li>这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用</li>
<li>我这里放的图片是：git_v.png</li>
<li>安装插件：hexo-asset-image   npm install <a href="https://github.com/7ym0n/hexo-asset-image">https://github.com/7ym0n/hexo-asset-image</a> –save</li>
<li>使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法</li>
<li>插入图片时用这种方式：<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/git_v.png" class title="This is git_v.png"></li>
<li>其中git_v.png就是你要引用的图片，我这里就是git_v.png，后面的This is git_v.png是图片描述，可以自己修改。</li>
</ul>
<p>参考链接：<a href="https://blog.csdn.net/weixin_45509582/article/details/108280827">https://blog.csdn.net/weixin_45509582/article/details/108280827</a></p>
<h2 id="使用hexo新建、编辑文章"><a href="#使用hexo新建、编辑文章" class="headerlink" title="使用hexo新建、编辑文章"></a>使用hexo新建、编辑文章</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：hexo new [layout] title或 hexo n [layout] title</span><br></pre></td></tr></table></figure>

<p>创建文章前要先选定模板，在hexo中也叫做布局。hexo支持三种布局（layout）：post(默认)、draft、page。我们先介绍如何使用已有布局，后面还将会介绍如何自定义布局。</p>
<p>在博客目录下输入以下命令时，会默认使用post布局，然后自动在<code>source\_posts</code>目录生成一个text1.md文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n text1</span><br></pre></td></tr></table></figure>

<p>打开创建的text1.md文件，我们可以看到文章开头包含以下内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: text1</span><br><span class="line">author: ujshenry</span><br><span class="line">date: 2021-05-29 13:13:36</span><br><span class="line"><span class="section">......</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>当然上面的内容可以自定义。如何自定义布局呢？实际上，布局是一个markdown文件，它们保存在<code>scaffolds/</code>目录下，可以看到hexo自带的三种布局其实就是三个<code>.md</code>文件：</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/custom1.png" class>

<p>而每一个文件中的内容实际只包含一个Front-matter。<strong>并且你可以在这里修改布局或者建立新的布局，然后创建文章时使用这些布局。</strong></p>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">使用hexo n draft draft1命令将在<span class="built_in">source</span>\目录下创建_drafts目录，并生成一个draft1.md文件。</span><br></pre></td></tr></table></figure>

<p>当你编辑完草稿后，可以把文章推送到<code>_posts</code>目录下，通过下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish &lt;file_name&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用<code>hexo --draft</code>命令可以查看已有草稿。</p>
<p><em>想要在本地预览草稿的静态文件，也需要在生成静态文件时加上<code>draft</code>参数。</em></p>
<h2 id="Hexo设置阅读全文"><a href="#Hexo设置阅读全文" class="headerlink" title="Hexo设置阅读全文"></a>Hexo设置阅读全文</h2><p>这里介绍next主题下设置在首页显示一篇文章的简介，在简介后面提供一个链接阅读全文来进入文章的详情页。</p>
<p>总共3种方式。</p>
<p>（1）在文章中使用&lt; !–more–&gt; 手动进行截断</p>
<p>这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。</p>
<p>（2）在文章中的front-matter中添加description，并提供文章摘录</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo+next搭建个人博客</span><br><span class="line">author: ujshenry</span><br><span class="line">date: 2021-05-25 19:59:52</span><br><span class="line">tags: [hexo, next]</span><br><span class="line">categories: [工具相关, hexo]</span><br><span class="line"><span class="section">description: 这是对文中的描述，会显示在主页上，点击进入详情后不会再显示</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>（3）自动形成摘要，在主题配置文件中添加</p>
<p>默认截取的长度为 150 字符，可以根据需要自行设定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p>建议使用 &lt; !– more –&gt;（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
<h2 id="为Next主题添加Valine评论系统"><a href="#为Next主题添加Valine评论系统" class="headerlink" title="为Next主题添加Valine评论系统"></a>为Next主题添加Valine评论系统</h2><p>在上面的章节中，我们把博客搭建好了并实现了主题的一些定制配置，本节介绍hexo在next主题下配置Valine评论系统（<em>Valine 仅支持 Next 7.+ 以下版本，Next8.0 以上版本似乎取消了Valine评论系统的支持</em>）。</p>
<h3 id="为什么选择Valine"><a href="#为什么选择Valine" class="headerlink" title="为什么选择Valine"></a>为什么选择Valine</h3><p>简洁、方便、支持Markdown。</p>
<h3 id="注册LeanClound-获取APP-ID-和-APP-Key"><a href="#注册LeanClound-获取APP-ID-和-APP-Key" class="headerlink" title="注册LeanClound,获取APP ID 和 APP Key"></a>注册LeanClound,获取APP ID 和 APP Key</h3><p>Valine 是基于 <a href="https://www.leancloud.cn/">LeanCloud</a> 作为数据存储的，所以需要注册一个账号，注册完成后，我们找到创建应用</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/leancloud1.png" class>

<p>在这里填写你的应用名称,名称可以自己定义，然后下面选择开发版 点击创建。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/leancloud2.png" class>

<p>然后点击应用进入设置</p>
<p>在设置页，我们首先点击存储，查看是否有<code>Comment</code>和 <code>Counter</code>，没有则创建，权限设为无限制。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/leancloud3.png" class>

<p>然后点击设置 &gt; 安全中心 ,将除了数据存储的服务全部关闭。</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/leancloud4.png" class>

<p>最后点击应用 Key 取得我们 <code>AppKey</code> 和 <code>App id</code></p>
<h3 id="在Hexo-Next主题中配置"><a href="#在Hexo-Next主题中配置" class="headerlink" title="在Hexo Next主题中配置"></a>在Hexo Next主题中配置</h3><p>首先打开 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 获取最新的 valine.min.js 的cdn地址：</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/leancloud5.png" class>

<p>修改next主题中comments(\henry-blog\themes\hexo-theme-next-5.1.4\layout_third-party\comments)下的valine.swig文件：</p>
<p>修改前：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/valine/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  ......</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;script src=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  <span class="comment">// 加载Valine.min.js文件</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  ......</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>注：这里不要自作聪明，把Valine.min.js文件下载到自己私有的环境中，然后上面script中src设置为自己的地址。</p>
<p>最后打开主题配置文件配置Valine</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">SSC3O9nAuF0D7JiwkCRaCMU8-gzGzoHsz</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">bljJ0Jy6rAMnAdcavu8Oc8WV</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎畅所欲言~</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,link</span> <span class="comment"># custom comment header:nick,mail,</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>

<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><h4 id="指定文章（页面）评论功能是否开启"><a href="#指定文章（页面）评论功能是否开启" class="headerlink" title="指定文章（页面）评论功能是否开启"></a>指定文章（页面）评论功能是否开启</h4><p>在 Hexo 博客中，评论的功能是在所有页面都默认开启的，但是有的时候我们在页面上不需要显示评论功能，例如分类，标记页面我们并不需要评论功能。</p>
<p>我们可以在 Front-matter 中通过<code>comments</code>属性设置true或false控制该页面或者是文章的评论功能是否打开，如我设置标签页面的评论功能关闭：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2019-07-18 15:16:50</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure>

<p>更多Valine设置参见:<a href="https://valine.js.org/">Valine文档</a></p>
<h2 id="增加功能整理"><a href="#增加功能整理" class="headerlink" title="增加功能整理"></a>增加功能整理</h2><h3 id="友情链接页面搭建"><a href="#友情链接页面搭建" class="headerlink" title="友情链接页面搭建"></a>友情链接页面搭建</h3><p><a href="https://blog.csdn.net/qq_21237971/article/details/108395258">https://blog.csdn.net/qq_21237971/article/details/108395258</a></p>
<h3 id="Hexo-NexT-代码块复制功能"><a href="#Hexo-NexT-代码块复制功能" class="headerlink" title="Hexo NexT 代码块复制功能"></a>Hexo NexT 代码块复制功能</h3><p><a href="https://www.jianshu.com/p/3e9d614c1e77">https://www.jianshu.com/p/3e9d614c1e77</a></p>
<h3 id="如何更改字体"><a href="#如何更改字体" class="headerlink" title="如何更改字体"></a>如何更改字体</h3><p><a href="https://theme-next.iissnan.com/faqs.html">https://theme-next.iissnan.com/faqs.html</a></p>
<h3 id="Hexo-Next添加版权协议并修改出现位置"><a href="#Hexo-Next添加版权协议并修改出现位置" class="headerlink" title="Hexo Next添加版权协议并修改出现位置"></a>Hexo Next添加版权协议并修改出现位置</h3><p><a href="https://zhuanlan.zhihu.com/p/75355613">https://zhuanlan.zhihu.com/p/75355613</a></p>
<p><a href="https://exkulo.github.io/2019/07/24/Hexo-Next-Add-Share-Protocol/">https://exkulo.github.io/2019/07/24/Hexo-Next-Add-Share-Protocol/</a></p>
<h2 id="hexo布局自己的静态页面到博客"><a href="#hexo布局自己的静态页面到博客" class="headerlink" title="hexo布局自己的静态页面到博客"></a>hexo布局自己的静态页面到博客</h2><p>这个很简单，首先你先把自己的静态页面写好。之后在最前面插入下面几行文字（hello-world.html），这样就是直接渲染你的html文件（不是一般的md文件）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>注意这个页面要放在source文件夹或者其子文件夹。之后路径设置在theme的配置（主题配置文件）里写。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">categories||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="comment"># 这是在首页设置了分类菜单，当然也可以直接访问页面</span></span><br><span class="line">  <span class="string">个人项目:</span> <span class="string">/test/hello-world.html</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/|| calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/|| heartbeat</span></span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="如何解决next5主题目录无法跳转的问题"><a href="#如何解决next5主题目录无法跳转的问题" class="headerlink" title="如何解决next5主题目录无法跳转的问题"></a>如何解决next5主题目录无法跳转的问题</h3><p><a href="https://www.cnblogs.com/Createsequence/p/14150758.html">https://www.cnblogs.com/Createsequence/p/14150758.html</a></p>
<h3 id="如何在新的电脑环境继续使用hexo来写文章和发布文章"><a href="#如何在新的电脑环境继续使用hexo来写文章和发布文章" class="headerlink" title="如何在新的电脑环境继续使用hexo来写文章和发布文章"></a>如何在新的电脑环境继续使用hexo来写文章和发布文章</h3><p>一般情况我们不可能在一台电脑来完成以后所有文章撰写和发布工作，接下来介绍如何在新的环境下使用hexo继续原有博客文章的撰写发布</p>
<p>（1）提交自己本地的博客项目到git仓库中</p>
<p>这里我选择提交到gitee上</p>
<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitee1.png" class title="本地">

<img src="/2021/05/25/hexo-next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitee2.png" class title="仓库">

<p>（2）新的电脑环境拉取仓库中的代码</p>
<p>（3）安装好hexo的依赖环境，参见本文<code>安装</code>章节</p>
<p>（4）执行npm install（重要）</p>
<p>该步骤很重要，执行npm install初始化博客项目环境</p>
<p>（5）hexo clean &amp;&amp; hexo generate &amp;&amp; (hexo server || hexo deploy)</p>
<h3 id="部署git后发现无法通过主域名访问，必须主域名-index-html才能访问"><a href="#部署git后发现无法通过主域名访问，必须主域名-index-html才能访问" class="headerlink" title="部署git后发现无法通过主域名访问，必须主域名+index.html才能访问"></a>部署git后发现无法通过主域名访问，必须主域名+index.html才能访问</h3><ul>
<li>先查看github主目录是否有index.html</li>
<li>删掉.deploy_git文件夹</li>
<li>依次输入命令：hexo clean，hexo g，hexo d。</li>
</ul>
<h3 id="关于Hexo-Next主题的‘下一页’、‘上一页’按钮错误显示为html代码-lt-i-class-quot-fa-fa-angle-right-quot-gt-lt-i-gt-的解决方法"><a href="#关于Hexo-Next主题的‘下一页’、‘上一页’按钮错误显示为html代码-lt-i-class-quot-fa-fa-angle-right-quot-gt-lt-i-gt-的解决方法" class="headerlink" title="关于Hexo,Next主题的‘下一页’、‘上一页’按钮错误显示为html代码 &lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;的解决方法"></a>关于Hexo,Next主题的‘下一页’、‘上一页’按钮错误显示为html代码 <code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>的解决方法</h3><p><a href="https://blog.csdn.net/weixin_45748734/article/details/106042522">https://blog.csdn.net/weixin_45748734/article/details/106042522</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/somata/p/11255547.html">gitee+hexo搭建个人博客（包含gitee pages）</a></p>
<p><a href="https://blog.csdn.net/weixin_41287260/article/details/97758641">Hexo新建标签、分类、归档等页面</a></p>
<p><a href="https://www.zhihu.com/tardis/landing/m/360/art/132823826">使用hexo新建、编辑并预览文章</a></p>
<p><a href="https://blog.csdn.net/as480133937/article/details/100138838/">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
<ul>
<li>文章加密访问</li>
<li>增加文章字数统计及阅读时常功能</li>
<li>文章置顶功能</li>
<li>…</li>
</ul>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程（包含发布git pages）</a></p>
<p><a href="https://blog.csdn.net/xdfwsl/article/details/102587821">Hexo Yilia 高级配置</a></p>
<p><a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">Hexo博客进阶：为Next主题添加Valine评论系统</a></p>
<hr>
<p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p>
<p><a href="http://theme-next.iissnan.com/getting-started.html#author-setting">next官方文档</a></p>
<p><a href="https://valine.js.org/">Valine文档</a></p>
<hr>
<p>hexo优秀博客示例：</p>
<p><a href="https://www.cnblogs.com/Createsequence/">Createsequence</a></p>
<p><a href="https://blog.yaogro.cn/">Mr Yao的博客</a></p>
]]></content>
      <categories>
        <category>工具相关</category>
        <category>hexo</category>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>工具相关</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
